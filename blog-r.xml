<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Mike Mahoney</title>
<link>https://mm218.dev/blog.html#category=R</link>
<atom:link href="https://mm218.dev/blog-r.xml" rel="self" type="application/rss+xml"/>
<description>Technology and the Environment</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 27 Nov 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Helping R find the right methods for unserialized complex objects.</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-11-27-objects-loading-namespaces/index.html</link>
  <description><![CDATA[ 




<p>So here’s a problem you may have encountered. Say you’ve serialized some complicated R object using a function like <code>saveRDS()</code>, which saves your objects as a binary file. For instance, we can take the <code>boston_canopy</code> sf object from spatialsample, which looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">spatialsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>boston_canopy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 6 features and 18 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 749383.6 ymin: 2913059 xmax: 801174.4 ymax: 2965741
Projected CRS: NAD83 / Massachusetts Mainland (ftUS)
# A tibble: 6 × 19
  grid_id land_area canopy_gain canopy_loss canopy_no_change canopy_area_2014
  &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;
1 AB-4      795045.      15323.       3126.           53676.           56802.
2 I-33      265813.       8849.      11795.           78677.           90472.
3 AO-9      270153        6187.       1184.           26930.           28114.
4 H-10     2691490.      73098.      80362.          345823.          426185.
5 V-7       107890.        219.       3612.             240.            3852.
6 Q-22     2648089.     122211.     154236.         1026632.         1180868.
# ℹ 13 more variables: canopy_area_2019 &lt;dbl&gt;, change_canopy_area &lt;dbl&gt;,
#   change_canopy_percentage &lt;dbl&gt;, canopy_percentage_2014 &lt;dbl&gt;,
#   canopy_percentage_2019 &lt;dbl&gt;, change_canopy_absolute &lt;dbl&gt;,
#   mean_temp_morning &lt;dbl&gt;, mean_temp_evening &lt;dbl&gt;, mean_temp &lt;dbl&gt;,
#   mean_heat_index_morning &lt;dbl&gt;, mean_heat_index_evening &lt;dbl&gt;,
#   mean_heat_index &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [US_survey_foot]&gt;</code></pre>
</div>
</div>
<p>And save it out as an RDS file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">bos_rds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".rds"</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(spatialsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>boston_canopy, bos_rds)</span></code></pre></div>
</div>
<p>When you unserialize that file, R won’t automatically be able to find all the methods associated with your complicated object. For instance, in a new session, our <code>boston_canopy</code> data doesn’t print nearly as nicely:<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">console_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb4-2">callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span>(</span>
<span id="cb4-3">  \(bos_rds) {</span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(bos_rds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb4-7">    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb4-8">  },</span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bos_rds =</span> bos_rds),</span>
<span id="cb4-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stdout =</span> console_output</span>
<span id="cb4-11">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(console_output)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "  grid_id land_area canopy_gain canopy_loss canopy_no_change canopy_area_2014"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
 [2] "1    AB-4  795044.8    15323.45    3126.004         53676.05         56802.05"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
 [3] "  canopy_area_2019 change_canopy_area change_canopy_percentage

 [5] "  canopy_percentage_2014 canopy_percentage_2019 change_canopy_absolute

 [7] "  mean_temp_morning mean_temp_evening mean_temp mean_heat_index_morning
 [8] "1          75.72113          86.04341  91.51711                76.97335"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
 [9] "  mean_heat_index_evening mean_heat_index

geometry"
[12] "1 781922.7, 781441.9, 780424.1, 780361.1, 780386.0, 780385.0, 780385.7, 780386.0, 780386.7, 780388.0, 780389.3, 780390.9, 780392.8, 780394.5, 780394.8, 780394.8, 780394.1, 780393.5, 780391.9, 780391.5, 780393.2, 780393.8, 780394.1, 780395.1, 780394.5, 780414.6, 780415.6, 780416.9, 780429.8, 780430.5, 780430.5, 780519.8, 780522.4, 780522.7, 780523.0, 780523.4, 780523.7, 780524.0, 780524.3, 780524.3, 780524.7, 780525.0, 780525.6, 780526.3, 780527.3, 780528.6, 780529.9, 780531.2, 780532.8, 780534.1, 780535.7, 780537.6, 780539.6, 780541.5, 780543.8, 780546.1, 780548.4, 780550.6, 780552.9, 780555.2, 780557.5, 780559.7, 780562.0, 780564.3, 780566.5, 780568.2, 780570.1, 780571.7, 780573.4, 780575.0, 780576.6, 780577.6, 780578.9, 780579.9, 780580.5, 780581.5, 780582.1, 780582.8, 780584.1, 780585.4, 780586.0, 780587.0, 780587.0, 780586.4, 780586.0, 780585.7, 780585.4, 780584.7, 780584.4, 780584.4, 780583.1, 780582.5, 780582.1, 780582.1, 780582.1, 780582.8, 780583.4, 780584.1, 780584.4, 780585.4, 780586.0, 780586.7, 780587.6, 780588.6, 780589.6, 780590.9, 780591.9, 780594.5, 780596.7, 780599.3, 780601.3, 780602.3, 780664.3, 780665.3, 780665.3, 780669.1, 780676.3, 780683.1, 780705.5, 780713.0, 780713.0, 780712.0, 780751.0, 780750.6, 780750.3, 780764.0, 780803.6, 780809.1, 780809.1, 780809.1, 780810.1, 780811.0, 780812.7, 780814.3, 780816.6, 780817.9, 780819.5, 780821.4, 780822.7, 780824.0, 780825.3, 780827.0, 780828.6, 780829.9, 780831.5, 780842.2, 780846.1, 780858.1, 780856.2, 780855.9, 780856.2, 780856.2, 780856.2, 780856.5, 780856.5, 780856.8, 780857.2, 780857.5, 780857.8, 780858.5, 780858.8, 780859.4, 780859.7, 780860.7, 780861.4, 780862.0, 780863.0, 780864.0, 780864.6, 780865.6, 780866.6, 780867.2, 780868.2, 780869.2, 780870.1, 780871.1, 780871.8, 780872.7, 780873.7, 780874.7, 780875.7, 780876.6, 780877.6, 780878.6, 780879.6, 780880.2, 780881.2, 780881.8, 780882.8, 780883.5, 780884.4, 780885.1, 780885.4, 780886.1, 780886.4, 780887.3, 780888.0, 780890.3, 780892.9, 780894.5, 780895.5, 780944.5, 780945.1, 780980.5, 781028.3, 781076.6, 781123.7, 781155.6, 781169.2, 781167.6, 781163.7, 781166.3, 781165.6, 781186.7, 781186.7, 781210.8, 781211.1, 781306.2, 781340.6, 781341.9, 781373.4, 781399.7, 781431.2, 781449.7, 781463.4, 781483.8, 781483.8, 781485.8, 781488.7, 781490.6, 781491.9, 781492.9, 781493.9, 781494.2, 781495.8, 781496.2, 781495.8, 781496.2, 781496.2, 781497.1, 781497.8, 781498.8, 781499.7, 781500.4, 781500.7, 781501.4, 781501.7, 781502.0, 781502.7, 781503.0, 781504.0, 781505.3, 781506.2, 781507.2, 781509.8, 781510.8, 781512.1, 781512.7, 781513.4, 781514.0, 781514.3, 781514.7, 781514.7, 781515.3, 781515.6, 781516.3, 781516.6, 781517.3, 781517.9, 781519.2, 781520.5, 781521.5, 781522.1, 781523.1, 781523.8, 781524.7, 781525.7, 781526.0, 781526.4, 781527.0, 781527.3, 781529.3, 781534.2, 781539.0, 781543.2, 781544.2, 781545.2, 781545.8, 781546.5, 781547.1, 781547.8, 781548.8, 781549.7, 781551.0, 781552.3, 781553.6, 781554.9, 781555.9, 781557.2, 781557.5, 781558.2, 781558.8, 781559.2, 781559.5, 781560.1, 781560.1, 781560.8, 781564.0, 781566.0, 781567.9, 781570.5, 781571.8, 781572.5, 781572.8, 781573.4, 781574.1, 781574.7, 781575.4, 781576.0, 781576.4, 781577.0, 781577.7, 781579.9, 781582.9, 781585.5, 781588.1, 781591.0, 781593.2, 781595.5, 781597.8, 781598.8, 781599.7, 781602.3, 781608.2, 781614.0, 781617.3, 781620.5, 781626.4, 781629.3, 781632.2, 781636.1, 781639.4, 781642.3, 781644.6, 781646.5, 781648.4, 781650.4, 781651.4, 781652.3, 781653.3, 781654.3, 781656.6, 781658.8, 781664.7, 781670.5, 781677.7, 781682.5, 781684.8, 781687.1, 781689.4, 781690.7, 781691.6, 781692.6, 781693.6, 781695.2, 781696.8, 781698.5, 781700.4, 781702.3, 781703.3, 781704.0, 781704.9, 781705.6, 781706.6, 781708.2, 781710.5, 781712.7, 781714.7, 781715.3, 781716.3, 781717.6, 781718.3, 781718.9, 781719.2, 781719.2, 781717.9, 781717.3, 781717.0, 781716.6, 781716.6, 781716.3, 781716.6, 781717.0, 781717.3, 781718.9, 781719.2, 781719.2, 781719.6, 781720.2, 781720.2, 781719.9, 781719.6, 781719.2, 781718.6, 781717.6, 781717.3, 781717.0, 781717.0, 781717.3, 781717.6, 781717.9, 781718.3, 781718.9, 781720.2, 781720.9, 781720.9, 781720.9, 781721.2, 781721.2, 781721.8, 781722.5, 781723.5, 781724.1, 781724.8, 781725.1, 781725.7, 781726.7, 781728.3, 781729.0, 781729.9, 781731.2, 781732.5, 781736.8, 781743.6, 781743.6, 781743.3, 781780.0, 781831.3, 781904.3, 781922.7, 2965534.6, 2964701.8, 2964701.8, 2964810.9, 2964811.0, 2964821.4, 2964824.0, 2964826.3, 2964828.6, 2964835.7, 2964847.4, 2964859.4, 2964869.8, 2964880.2, 2964885.4, 2964890.6, 2964894.5, 2964898.4, 2964906.5, 2964966.6, 2965059.1, 2965076.0, 2965081.2, 2965132.8, 2965190.0, 2965190.0, 2965144.8, 2965108.1, 2965107.2, 2965094.5, 2965079.6, 2965081.2, 2965079.2, 2965078.6, 2965077.3, 2965076.3, 2965075.0, 2965074.4, 2965073.4, 2965072.1, 2965070.5, 2965068.8, 2965066.9, 2965065.3, 2965063.6, 2965061.7, 2965060.4, 2965058.8, 2965056.8, 2965055.9, 2965054.6, 2965053.6, 2965052.3, 2965051.3, 2965050.3, 2965049.4, 2965049.0, 2965048.4, 2965048.1, 2965047.7, 2965047.7, 2965048.1, 2965048.1, 2965048.4, 2965049.0, 2965049.7, 2965050.0, 2965050.7, 2965051.3, 2965052.0, 2965053.3, 2965054.2, 2965055.5, 2965056.8, 2965058.1, 2965059.4, 2965061.0, 2965062.0, 2965066.9, 2965071.1, 2965075.7, 2965092.2, 2965108.8, 2965133.8, 2965146.1, 2965159.1, 2965164.6, 2965208.8, 2965222.7, 2965236.7, 2965246.8, 2965252.0, 2965256.8, 2965261.1, 2965265.0, 2965269.5, 2965273.1, 2965274.7, 2965276.0, 2965277.0, 2965278.3, 2965279.6, 2965280.5, 2965281.5, 2965282.5, 2965283.5, 2965284.4, 2965285.1, 2965285.7, 2965286.1, 2965286.1, 2965286.1, 2965287.4, 2965287.4, 2965279.6, 2965279.9, 2965279.6, 2965279.9, 2965281.2, 2965327.0, 2965385.4, 2965445.5, 2965445.5, 2965391.3, 2965325.4, 2965324.7, 2965321.8, 2965359.8, 2965363.7, 2965367.9, 2965373.4, 2965378.9, 2965384.5, 2965390.3, 2965395.2, 2965399.1, 2965402.3, 2965405.9, 2965406.5, 2965407.2, 2965408.2, 2965408.5, 2965409.1, 2965409.5, 2965409.8, 2965410.1, 2965409.8, 2965408.8, 2965448.1, 2965449.7, 2965451.0, 2965451.3, 2965452.0, 2965453.0, 2965453.9, 2965454.3, 2965454.9, 2965455.6, 2965456.2, 2965456.9, 2965457.5, 2965458.2, 2965458.5, 2965459.1, 2965459.8, 2965460.1, 2965460.4, 2965460.8, 2965461.1, 2965461.4, 2965461.4, 2965461.4, 2965461.7, 2965461.7, 2965461.4, 2965461.4, 2965461.1, 2965461.1, 2965460.8, 2965460.4, 2965460.1, 2965459.5, 2965459.1, 2965458.5, 2965457.8, 2965456.9, 2965456.2, 2965455.9, 2965454.3, 2965452.3, 2965451.3, 2965450.0, 2965448.4, 2965447.1, 2965445.5, 2965436.4, 2965419.8, 2965392.9, 2965363.7, 2965340.0, 2965318.9, 2965318.5, 2965300.4, 2965301.7, 2965302.3, 2965302.6, 2965303.6, 2965304.6, 2965303.6, 2965376.0, 2965416.6, 2965441.6, 2965741.3, 2965738.1, 2965442.2, 2965442.9, 2965359.1, 2965359.1, 2965488.7, 2965493.2, 2965490.6, 2965487.4, 2965485.1, 2965484.5, 2965483.2, 2965481.9, 2965465.0, 2965463.4, 2965460.8, 2965456.5, 2965452.6, 2965449.1, 2965445.8, 2965443.5, 2965430.9, 2965426.3, 2965424.7, 2965423.1, 2965421.8, 2965419.5, 2965417.2, 2965415.3, 2965413.0, 2965412.7, 2965412.1, 2965411.4, 2965411.1, 2965410.8, 2965410.4, 2965410.4, 2965409.5, 2965409.1, 2965408.8, 2965408.8, 2965408.5, 2965408.5, 2965408.2, 2965407.8, 2965407.8, 2965407.5, 2965407.2, 2965407.2, 2965406.9, 2965406.9, 2965406.2, 2965405.9, 2965405.6, 2965405.2, 2965404.9, 2965404.6, 2965403.9, 2965403.6, 2965403.0, 2965402.0, 2965401.0, 2965399.7, 2965398.4, 2965397.4, 2965396.8, 2965396.1, 2965395.5, 2965393.9, 2965390.6, 2965388.3, 2965386.4, 2965386.1, 2965385.7, 2965385.7, 2965385.7, 2965385.7, 2965385.7, 2965385.4, 2965385.1, 2965384.5, 2965383.8, 2965383.2, 2965382.2, 2965381.2, 2965380.2, 2965379.9, 2965379.3, 2965378.6, 2965377.6, 2965376.3, 2965375.0, 2965373.1, 2965369.8, 2965358.5, 2965352.3, 2965346.1, 2965340.3, 2965338.3, 2965337.7, 2965337.0, 2965336.7, 2965336.1, 2965335.7, 2965335.1, 2965334.8, 2965334.8, 2965334.4, 2965334.1, 2965333.8, 2965334.1, 2965334.1, 2965334.4, 2965334.4, 2965334.1, 2965333.5, 2965332.8, 2965332.5, 2965332.2, 2965331.8, 2965331.8, 2965331.8, 2965331.8, 2965331.5, 2965331.5, 2965331.5, 2965331.5, 2965330.9, 2965330.2, 2965329.3, 2965328.6, 2965327.6, 2965326.0, 2965325.0, 2965324.1, 2965323.4, 2965322.8, 2965322.4, 2965321.8, 2965321.1, 2965320.8, 2965320.5, 2965320.5, 2965321.1, 2965321.5, 2965322.1, 2965322.8, 2965323.1, 2965323.7, 2965324.1, 2965325.0, 2965326.7, 2965328.3, 2965330.2, 2965333.1, 2965335.4, 2965337.4, 2965339.3, 2965341.9, 2965344.8, 2965348.4, 2965353.6, 2965358.8, 2965364.0, 2965369.8, 2965374.4, 2965379.3, 2965384.8, 2965387.4, 2965390.3, 2965394.8, 2965401.3, 2965430.6, 2965435.1, 2965436.1, 2965437.1, 2965438.4, 2965439.7, 2965440.3, 2965441.3, 2965443.5, 2965459.1, 2965462.7, 2965466.3, 2965470.2, 2965473.7, 2965477.3, 2965481.2, 2965484.1, 2965487.7, 2965491.0, 2965494.2, 2965498.1, 2965501.7, 2965505.9, 2965509.8, 2965511.7, 2965513.0, 2965514.0, 2965515.0, 2965518.6, 2965520.8, 2965521.2, 2965521.8, 2965522.8, 2965523.1, 2965523.7, 2965524.7, 2965525.7, 2965526.0, 2965526.7, 2965527.0, 2965527.6, 2965529.3, 2965532.2, 2965533.8, 2965535.4, 2965536.7, 2965539.0, 2965546.8, 2965554.6, 2965566.9, 2965589.3, 2965578.3, 2965563.0, 2965540.3, 2965534.6"</code></pre>
</div>
</div>
<p>What on Earth is up with that geometry column? That’s unworkable.</p>
<p>Before we dig into this further, let’s write a quick wrapper function that will handle the <code>console_output</code> and <code>readLines()</code> dance we just did for the rest of this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">run_isolated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">libpath =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.libPaths</span>()) {</span>
<span id="cb6-2">  console_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb6-3">  callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span>(</span>
<span id="cb6-4">    ...,</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">libpath =</span> libpath,</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stdout =</span> console_output</span>
<span id="cb6-7">  )</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(console_output)</span>
<span id="cb6-9">}</span></code></pre></div>
</div>
<p>I’ve also added a <code>libpath</code> argument, which will let me control what packages these new R sessions are able to access. By default, R sessions run via <code>run_isolated()</code> will have access to all the libraries installed on my machine:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_isolated</span>(</span>
<span id="cb7-2">  \() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>))</span>
<span id="cb7-3">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "[1] TRUE"</code></pre>
</div>
</div>
<p>But because I’ve got all my packages installed into a user library (not the system library), I can use that new <code>libpath</code> argument to make it so these R sessions are <em>entirely</em> isolated, without access to any non-base packages at all:<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_isolated</span>(</span>
<span id="cb9-2">  \() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>)),</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">libpath =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/null"</span></span>
<span id="cb9-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "[1] FALSE"</code></pre>
</div>
</div>
<p>Anyway, back to the point. Complicated objects print ugly, and don’t have any of their other methods available, when you unserialize them in a new session.</p>
<p>The reason for this is pretty straightforward: the print (and other) methods are inside the namespace of the package that created the objects,<sup>3</sup> if that namespace isn’t loaded then R can’t find the methods when they’re needed, and deserializing the object doesn’t automatically load the relevant namespace. So the reason that <code>boston_canopy</code> printed nicely in our current session is that spatialsample sneakily loaded sf in the background when we called the <code>boston_canopy</code> object:<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">is_sf_loaded <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sessionInfo</span>()[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"otherPkgs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loadedOnly"</span>)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(names) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>()</span>
<span id="cb11-6">}</span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_sf_loaded</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>But when we unserialize the object this doesn’t happen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span>(</span>
<span id="cb13-2">  \(bos_rds, is_sf_loaded) {</span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(bos_rds)</span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_sf_loaded</span>()</span>
<span id="cb13-5">  },</span>
<span id="cb13-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bos_rds =</span> bos_rds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_sf_loaded =</span> is_sf_loaded)</span>
<span id="cb13-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>Because <code>print.sf()</code> is defined in sf, and sf isn’t loaded, we fall back to the default, ugly print method.</p>
<p>This has broader-reaching impacts. For instance, a number of dplyr functions fail for seemingly nonsensical reasons if they’re used on a unserialized object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span>(</span>
<span id="cb15-2">  \(bos_rds) {</span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(bos_rds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-4">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>()</span>
<span id="cb15-6">  },</span>
<span id="cb15-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bos_rds =</span> bos_rds)</span>
<span id="cb15-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Error in vec_size() : \n  `x` must be a vector, not a &lt;sfc_MULTIPOLYGON/sfc&gt; object.\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
&lt;error/vctrs_error_scalar_type&gt;
Error in `vec_size()`:
! `x` must be a vector, not a &lt;sfc_MULTIPOLYGON/sfc&gt; object.
---
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `&lt;fn&gt;`(...)
 12. ├─global `&lt;fn&gt;`(bos_rds = base::quote("/tmp/RtmpMLtYi9/file709d79a74949.rds"))
 13. │ ├─base::try(dplyr::arrange(readRDS(bos_rds)))
 14. │ │ └─base::tryCatch(...)
 15. │ │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │ │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 17. │ │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │ ├─dplyr::arrange(readRDS(bos_rds))
 19. │ └─dplyr:::arrange.data.frame(readRDS(bos_rds))
 20. │   ├─dplyr::dplyr_row_slice(.data, loc)
 21. │   └─dplyr:::dplyr_row_slice.data.frame(.data, loc)
 22. │     ├─dplyr::dplyr_reconstruct(vec_slice(data, i), data)
 23. │     │ └─dplyr:::dplyr_new_data_frame(data)
 24. │     │   ├─row.names %||% .row_names_info(x, type = 0L)
 25. │     │   └─base::.row_names_info(x, type = 0L)
 26. │     └─vctrs::vec_slice(data, i)
 27. └─vctrs:::stop_scalar_type(`&lt;fn&gt;`(`&lt;s_MULTIP&gt;`), "x", `&lt;fn&gt;`(vec_size()))
 28.   └─vctrs:::stop_vctrs(...)</code></pre>
</div>
</div>
<p>Just like with printing, the root cause here is that R can’t find the <code>arrange.sf()</code> method when sf isn’t loaded, and winds up using the basic data frame method instead (which then errors out).<sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span>arrange.sf</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (.data, ..., .dots) 
{
    sf_column_name = attr(.data, "sf_column")
    class(.data) = setdiff(class(.data), "sf")
    st_as_sf(NextMethod(), sf_column_name = sf_column_name)
}
&lt;bytecode: 0x560f44ad5378&gt;
&lt;environment: namespace:sf&gt;</code></pre>
</div>
</div>
<p>The fix is pretty straightforward: load sf (or whatever package has the methods you’re looking for). That’ll let R find your methods, arrange your data, print all pretty, and do everything else you want:<sup>6</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_isolated</span>(</span>
<span id="cb19-2">  \(bos_rds) {</span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(bos_rds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-5">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb19-8">  },</span>
<span id="cb19-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bos_rds =</span> bos_rds)</span>
<span id="cb19-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Simple feature collection with 1 feature and 18 fields"                       
 [2] "Geometry type: MULTIPOLYGON"                                                  
 [3] "Dimension:     XY"                                                            
 [4] "Bounding box:  xmin: 780361.1 ymin: 2964702 xmax: 781922.7 ymax: 2965741"     
 [5] "Projected CRS: NAD83 / Massachusetts Mainland (ftUS)"                         
 [6] "# A tibble: 1 × 19"                                                           
 [7] "  grid_id land_area canopy_gain canopy_loss canopy_no_change canopy_area_2014"
 [8] "  &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;"
 [9] "1 AB-4      795045.      15323.       3126.           53676.           56802."
[10] "# ℹ 13 more variables: canopy_area_2019 &lt;dbl&gt;, change_canopy_area &lt;dbl&gt;,"     
[11] "#   change_canopy_percentage &lt;dbl&gt;, canopy_percentage_2014 &lt;dbl&gt;,"            
[12] "#   canopy_percentage_2019 &lt;dbl&gt;, change_canopy_absolute &lt;dbl&gt;,"              
[13] "#   mean_temp_morning &lt;dbl&gt;, mean_temp_evening &lt;dbl&gt;, mean_temp &lt;dbl&gt;,"       
[14] "#   mean_heat_index_morning &lt;dbl&gt;, mean_heat_index_evening &lt;dbl&gt;,"            
[15] "#   mean_heat_index &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [US_survey_foot]&gt;"          </code></pre>
</div>
</div>
<p>This all might sound pretty familiar; I wrote a post about <a href="https://www.mm218.dev/posts/2022-12-01-sf-in-packages/">more or less about this a year ago</a>. So why bring it up again?</p>
<p>Well, because I saw <a href="https://github.com/thomasp85/patchwork/commit/f7fbab5452c3545211724fee5f9303106ed9b257">a cool trick in patchwork</a> that is currently <a href="https://github.com/r-spatial/sf/pull/2212">in the development version of sf</a> that I like a lot better than the one I wrote about last year. It’s possible for these unserialized objects to load their relevant packages themselves, making all their methods available as soon as they exist in your R session. For this example to work on your machine, you’re going to need the development version (at time of writing) of sf:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageVersion</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0-14"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Let’s create a new RDS file, this time using an object that was created by the development version of sf:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">nc_rds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".rds"</span>)</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape/nc.shp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-3">  sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_read</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(nc_rds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Reading layer `nc' from data source 
  `/home/mikemahoney218/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp' 
  using driver `ESRI Shapefile'
Simple feature collection with 100 features and 14 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965
Geodetic CRS:  NAD27</code></pre>
</div>
</div>
<p>Just like before, let’s unserialize this RDS file and print it to our console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_isolated</span>(</span>
<span id="cb25-2">  \(nc_rds) {</span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(nc_rds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb25-7">  },</span>
<span id="cb25-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nc_rds =</span> nc_rds)</span>
<span id="cb25-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Simple feature collection with 1 feature and 14 fields"                        
[2] "Geometry type: MULTIPOLYGON"                                                   
[3] "Dimension:     XY"                                                             
[4] "Bounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965"  
[5] "Geodetic CRS:  NAD27"                                                          
[6] "   AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS FIPSNO CRESS_ID BIR74 SID74 NWBIR74"
[7] "1 0.114     1.442  1825    1825 Ashe 37009  37009        5  1091     1      10"
[8] "  BIR79 SID79 NWBIR79                       geometry"                          
[9] "1  1364     0      19 MULTIPOLYGON (((-81.47276 3..."                          </code></pre>
</div>
</div>
<p>Somehow, magically, R found the right print method!</p>
<p>R can now also find the right methods for other functions, like <code>arrange()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span>(</span>
<span id="cb27-2">  \(nc_rds) {</span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(nc_rds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-4">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>()</span>
<span id="cb27-6">  },</span>
<span id="cb27-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nc_rds =</span> nc_rds)</span>
<span id="cb27-8">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 1 feature and 14 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965
Geodetic CRS:  NAD27
   AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS FIPSNO CRESS_ID BIR74 SID74 NWBIR74
1 0.114     1.442  1825    1825 Ashe 37009  37009        5  1091     1      10
  BIR79 SID79 NWBIR79                       geometry
1  1364     0      19 MULTIPOLYGON (((-81.47276 3...</code></pre>
</div>
</div>
<p>So what’s the trick? Well, under the hood these new sf objects are quietly loading sf when they get unserialized:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r</span>(</span>
<span id="cb29-2">  \(nc_rds, is_sf_loaded) {</span>
<span id="cb29-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(nc_rds)</span>
<span id="cb29-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_sf_loaded</span>()</span>
<span id="cb29-5">  },</span>
<span id="cb29-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nc_rds =</span> nc_rds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_sf_loaded =</span> is_sf_loaded)</span>
<span id="cb29-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>The magic here is that sf objects now have an attribute, <code>.sf_namespace</code>, that’s a simple stub function defined in the sf namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">nc_from_rds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(nc_rds)</span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(nc_from_rds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".sf_namespace"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function () 
NULL
&lt;bytecode: 0x560f4ca71f90&gt;
&lt;environment: namespace:sf&gt;</code></pre>
</div>
</div>
<p>That attribute – which takes up nearly no RAM or disk space – is enough to cause R to automatically load the sf namespace when these objects are unserialized. You now magically have access to all the methods for your complex objects right out of the box.</p>
<p>What if sf isn’t installed? Then it doesn’t get loaded. But that means objects fall back to their default methods, which isn’t <em>great</em> but seems <em>fine</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_isolated</span>(</span>
<span id="cb33-2">  \(nc_rds) {</span>
<span id="cb33-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(nc_rds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb33-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb33-7">  },</span>
<span id="cb33-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nc_rds =</span> nc_rds),</span>
<span id="cb33-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">libpath =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/dev/null"</span></span>
<span id="cb33-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "   AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS FIPSNO CRESS_ID BIR74 SID74 NWBIR74"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
[2] "1 0.114     1.442  1825    1825 Ashe 37009  37009        5  1091     1      10"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
[3] "  BIR79 SID79 NWBIR79"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

geometry"
[6] "1 -81.47276, -81.54084, -81.56198, -81.63306, -81.74107, -81.69828, -81.70280, -81.67000, -81.34530, -81.34754, -81.32478, -81.31332, -81.26624, -81.26284, -81.24069, -81.23989, -81.26424, -81.32899, -81.36137, -81.36569, -81.35413, -81.36745, -81.40639, -81.41233, -81.43104, -81.45289, -81.47276, 36.23436, 36.27251, 36.27359, 36.34069, 36.39178, 36.47178, 36.51934, 36.58965, 36.57286, 36.53791, 36.51368, 36.48070, 36.43721, 36.40504, 36.37942, 36.36536, 36.35241, 36.36350, 36.35316, 36.33905, 36.29972, 36.27870, 36.28505, 36.26729, 36.26072, 36.23959, 36.23436"</code></pre>
</div>
</div>
<p>I think this is really cool! It feels like a user-friendly way to make unserialized complex objects work like you’d expect them to, and prevents confusing error chains like the ones above.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Note that we need to use the <code>stdout</code> argument to capture how this object actually prints to R’s console, and to then use <code>readLines()</code> to print the contents of that file into our current session.↩︎</p></li>
<li id="fn2"><p>Thanks to <a href="https://fosstodon.org/@gaborcsardi/111472185756408510">Gabor on Mastodon</a> for teaching me that R will always have access to the system library.↩︎</p></li>
<li id="fn3"><p>I mean, mostly. Some packages like <a href="https://broom.tidymodels.org">broom</a> provide a bunch of methods for objects that don’t come from that package. But those packages aren’t automatically loaded on deserialization either (and can you imagine how chaotic a world that would be!), so the basic point stands.↩︎</p></li>
<li id="fn4"><p>More on the trick <a href="https://www.mm218.dev/posts/2022-12-01-sf-in-packages/">in this old blog post</a>.↩︎</p></li>
<li id="fn5"><p>Well, the <em>root</em> root cause is that <a href="https://github.com/r-lib/pillar/issues/552">vctrs can’t calculate the length of sf geometry columns</a>, because they don’t subclass the list class.↩︎</p></li>
<li id="fn6"><p>I’m trying to be very precise with my wording here, so let me highlight that this call to <code>library()</code> is actually <em>attaching</em> sf, when all that’s necessary is <em>loading</em> it. For <em>this post</em> this is a distinction without a difference, so I’m not spending a lot of time on it. But only loading the namespace is necessary, you don’t need to attach it to the search path.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Spatial</category>
  <category>geospatial data</category>
  <category>R packages</category>
  <guid>https://mm218.dev/posts/2023-11-27-objects-loading-namespaces/index.html</guid>
  <pubDate>Mon, 27 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-11-27-objects-loading-namespaces/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Downloading STAC data using rsi when you’ve got a geographic CRS or don’t want a composite.</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-11-21-rsi-null/index.html</link>
  <description><![CDATA[ 




<p>A quick post today, inspired by <a href="https://github.com/Permian-Global-Research/rsi/issues/6">a GitHub issue</a>.</p>
<p>I’ve been working recently on <a href="https://github.com/Permian-Global-Research/rsi">the new rsi package</a> which helps you download, reproject, resample, mask, rescale, and composite data from STAC APIs.<sup>1</sup> The standard function interface does all of these steps: it grabs all the relevant files from your STAC source, reprojects them to match your AOI and desired resolution, masks and rescales the component files, and then merges them into a composite:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsi)</span>
<span id="cb1-2">future<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multisession"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">aoi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">74.912131</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.080410</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-5">  sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_sfc</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-6">  sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_set_crs</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-7">  sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3857</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-8">  sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_buffer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-06-01"</span></span>
<span id="cb1-11">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-07-01"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_landsat_imagery</span>(</span>
<span id="cb1-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aoi =</span> aoi,</span>
<span id="cb1-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> start_date,</span>
<span id="cb1-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> end_date,</span>
<span id="cb1-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb1-18">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-19">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-20">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-11-21-rsi-null/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>What if you want to skip some of these steps? For instance, if you try to call <code>get_landsat_imagery()</code> with an AOI in geographic coordinates, you’ll get a warning (likely followed by an error) saying that you’re asking to resample the data to 30 degree pixels, which is probably not what you wanted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_landsat_imagery</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aoi =</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(aoi, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> start_date,</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> end_date,</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb2-7">  )</span>
<span id="cb2-8">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The default pixel size arguments are intended for use with projected AOIs, but `aoi` appears to be in geographic coordinates.
ℹ Pixel X size: 30. Pixel Y size: 30.
ℹ These dimensions will be interpreted in the same units as `aoi` (likely degrees), which may cause errors.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in CPL_gdalwarp(source, destination, options, oo, doo, config_options,
: GDAL Error 1: Attempt to create 0x0 dataset is illegal,sizes must be larger
than zero.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Failed to download LC08_L2SP_015029_20220617_02_T1 from
2022-06-17T15:45:03.055481Z</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in CPL_gdalwarp(source, destination, options, oo, doo, config_options,
: GDAL Error 1: Attempt to create 0x0 dataset is illegal,sizes must be larger
than zero.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Failed to download LC09_L2SP_015029_20220609_02_T2 from
2022-06-09T15:44:23.649712Z</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in CPL_gdalwarp(source, destination, options, oo, doo, config_options,
: GDAL Error 1: Attempt to create 0x0 dataset is illegal,sizes must be larger
than zero.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Failed to download LC08_L2SP_015029_20220601_02_T1 from
2022-06-01T15:44:51.569374Z</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in new_CppObject_xp(fields$.module, fields$.pointer, ...): GDAL Error
4: /tmp/Rtmp7E1urK/filedddb8dfac1e.tif: No such file or directory</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Error : [rast] file does not exist: /tmp/Rtmp7E1urK/filedddb8dfac1e.tif</code></pre>
</div>
</div>
<p>That’s coming from the resampling step of the function’s workflow. Can we just skip that?</p>
<p>Short answer: yes! If we pass <code>NULL</code> to the <code>pixel_*_size</code> arguments, we’ll skip the resampling stage and instead download our data in its native resolution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_landsat_imagery</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aoi =</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(aoi, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>),</span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> start_date,</span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> end_date,</span>
<span id="cb12-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixel_x_size =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb12-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixel_y_size =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb12-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb12-8">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-9">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-10">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-11-21-rsi-null/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is a pattern throughout the rsi API design: if you want to skip something, pass <code>NULL</code> to the relevant argument. For instance (and this is where <a href="https://github.com/Permian-Global-Research/rsi/issues/6">the GitHub issue comes in</a>), if you want to not composite and instead download all the images within your spatiotemporal area of interest, we can pass <code>NULL</code> to the <code>composite_function</code> argument to skip compositing. I’ll also skip masking by passing <code>NULL</code> to the <code>mask_function</code> argument, because otherwise a handful of these images are entirely masked out:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_landsat_imagery</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aoi =</span> aoi,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> start_date,</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> end_date,</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>),</span>
<span id="cb13-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">composite_function =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb13-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mask_function =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># otherwise half of these images are blank</span></span>
<span id="cb13-8">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>rast) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-11-21-rsi-null/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-11-21-rsi-null/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-11-21-rsi-null/index_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
NULL

[[2]]
NULL

[[3]]
NULL</code></pre>
</div>
</div>
<p>Hopefully this helps people use rsi to only perform the data wrangling steps they want!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>And calculate spectral indices from these data, and wrangle multiple rasters into a multi-band VRT – it’s a pretty neat package if I do say so myself.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Spatial</category>
  <category>geospatial data</category>
  <category>R packages</category>
  <guid>https://mm218.dev/posts/2023-11-21-rsi-null/index.html</guid>
  <pubDate>Tue, 21 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-11-21-rsi-null/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Classed conditions from rlang functions</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-11-07-classed-errors/index.html</link>
  <description><![CDATA[ 




<p>I’m a huge fan of the condition functions from rlang – <code>rlang::inform()</code> for sending messages, <code>rlang::warn()</code> for warnings, and <code>rlang::abort()</code> for errors. Compared to their base equivalents (<code>message()</code>, <code>warning()</code>, and <code>stop()</code>, respectively) these functions <a href="https://rlang.r-lib.org/reference/topic-condition-customisation.html">are extremely flexible</a> and make it easy to specify <a href="https://rlang.r-lib.org/reference/topic-error-call.html">which user-facing function actually caused the condition</a>. And recently I’ve become a huge fan of how these functions let you easily set the class of your conditions, which makes it a lot easier to implement logic to handle these conditions.</p>
<p>For instance, let’s say we’ve got some function that sends up a warning if you give it an unexpected input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x)) {</span>
<span id="cb1-3">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warn</span>(</span>
<span id="cb1-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` wasn't numeric. Was this expected?"</span></span>
<span id="cb1-5">    )</span>
<span id="cb1-6">  }</span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)</span>
<span id="cb1-8">}</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `x` wasn't numeric. Was this expected?</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>If we know that we’re going to be passing unexpected inputs to this function, we might consider using <code>suppressWarnings()</code> to hide this warning. I do this every so often in package code, where I know my inputs to another function are going to trigger a condition that I don’t need the user to see:<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressWarnings</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>The challenge with this is that <code>suppressWarnings()</code>, used this way, is a blunt tool that hides <em>all</em> warnings sent up by this function. For instance, if we passed a character vector as input to this function, we’d also trigger a warning from <code>mean()</code> that it’s going to return NA:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `x` wasn't numeric. Was this expected?</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mean.default(x): argument is not numeric or logical: returning NA</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>And that useful warning <em>also</em> gets hidden by the <code>suppressWarnings()</code> call:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressWarnings</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>Adding a subclass to our warning helps solve this. By specifying the <code>class</code> argument in any of the rlang condition functions, we’re able to easily subclass our warning. This doesn’t change how the warning displays during standard usage:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb12-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x)) {</span>
<span id="cb12-3">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warn</span>(</span>
<span id="cb12-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` wasn't numeric. Was this expected?"</span>,</span>
<span id="cb12-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non_numeric_x"</span></span>
<span id="cb12-6">    )</span>
<span id="cb12-7">  }</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)</span>
<span id="cb12-9">}</span>
<span id="cb12-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `x` wasn't numeric. Was this expected?</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>But it <em>does</em> mean that we can now use the <code>classes</code> argument to <code>suppressWarnings()</code> to only supress the warnings we care about, without accidentally hiding other unexpected warnings we might trigger:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressWarnings</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non_numeric_x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in mean.default(x): argument is not numeric or logical: returning NA</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>This is great, and makes it a lot easier to incorporate conditions into your program’s control flow. For instance, we can use these classed warnings with <code>tryCatch()</code> or <code>rlang::try_fetch()</code> to “catch” conditions, perhaps running a cleanup script or fallback method in the event that a specific classed warning is returned:<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try_fetch</span>(</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>),</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">non_numeric_x =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We're running a completely different function now!"</span></span>
<span id="cb18-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "We're running a completely different function now!"</code></pre>
</div>
</div>
<p>Last but not least, classed errors help in package testing. A huge number of my tests are designed to make sure that conditions fire when they’re supposed to – bad inputs trigger errors, concerning outputs trigger warnings and so on. Using classed errors can help me make sure I’m triggering the error or warning that I want to, not just any random error or warning that might be lurking in my code.</p>
<p>If you’re <a href="https://testthat.r-lib.org/articles/third-edition.html">using testthat’s 3rd edition</a>, the <code>expect_condition()</code> set of functions (including <code>expect_message()</code>, <code>expect_warning()</code>, <code>expect_error()</code>) all share a <code>class</code> argument which will make sure the warning or error you’re triggering is actually the one you expect:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_edition</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-2">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_warning</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non_numeric_x"</span>)</span></code></pre></div>
</div>
<p>If our condition class doesn’t match the expected class, these tests will fail:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_warning</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wrong_class"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `x` wasn't numeric. Was this expected?</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Error : `f2(TRUE)` did not throw the expected warning.</code></pre>
</div>
</div>
<p>I’m a late adopter of classed conditions, only really systematically adopting them for <a href="https://github.com/Permian-Global-Research/rsi">the new rsi package</a>, but I’ve found them super useful so far and am planning to slowly use them more and more in the rest of my packages over time!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For instance, the way that <code>autoplot()</code> in spatialsample <a href="https://github.com/tidymodels/spatialsample/blob/a8834bbe646967bc224cf5e558789e1d704b0778/R/autoplot.R#L141-L143">adds grids to spatial_block_cv() plots</a> always triggers the same message, which is expected and not worth worrying about. I hide that message so my users don’t need to be concerned.↩︎</p></li>
<li id="fn2"><p>I don’t currently, but I <em>should</em> do this in terrainr, where I <a href="https://github.com/ropensci/terrainr/blob/36fc069cb05dbcb44ff358858f5544863d506aee/R/merge_rasters.R#L58-L81">currently assume that any error during <code>merge_rasters()</code> can be fixed by the fallback method.</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-11-07-classed-errors/index.html</guid>
  <pubDate>Tue, 07 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-11-07-classed-errors/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>spatialsample 0.5.0 is now on CRAN</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-11-03-spatialsample/index.html</link>
  <description><![CDATA[ 




<p>The <a href="https://github.com/tidymodels/spatialsample">newest version of spatialsample</a>, the tidymodels package I maintain for spatial cross-validation, just landed on CRAN, with binaries for Windows and Mac coming in the next few days.</p>
<p>This release mostly fixes a few bugs in <code>spatial_block_cv()</code> and <code>spatial_nndm_cv()</code>. The only new feature is that <code>get_rsplit()</code> is now reexported from rsample, providing a nicer interface for extracting individual <code>rsplit</code> objects from an <code>rset</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(spatialsample)</span>
<span id="cb1-2"></span>
<span id="cb1-3">folds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spatial_clustering_cv</span>(boston_canopy, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rsplit</span>(folds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-7">  folds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>More pressing are two sets of breaking changes. The first of these is that <code>spatial_block_cv()</code> now creates slightly different grids, covering a very slightly larger area, which may change what fold any given observation is assigned into. This is to address a problem <a href="https://stackoverflow.com/q/77374348/9625040">reported on StackOverflow</a> where, if data fell exactly on grid lines (which was somewhat common with regularly-spaced grids of data), it would be assigned to both of the polygons on either side of the line.</p>
<p>The amount of grid expansion performed can be controlled using the new <code>expand_bbox</code> argument to <code>spatial_block_cv()</code>. If observations are still assigned to multiple folds, the function will now throw an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">drought_sf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>(</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand.grid</span>(</span>
<span id="cb3-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">995494</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1018714</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">430</span>),</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1019422</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">430</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>)</span>
<span id="cb3-5">  ),</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coords =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb3-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7760</span></span>
<span id="cb3-8">)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spatial_block_cv</span>(drought_sf, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand_bbox =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error in generate_folds_from_blocks(data, centroids, grid_blocks, v, n,  : 
  Some observations fell exactly on block boundaries, meaning they were assigned to multiple assessment sets unexpectedly.
ℹ Try setting a different `expand_bbox` value, an `offset`, or use a different number of folds.</code></pre>
</div>
</div>
<p>But hopefully the expansion will make this error relatively uncommon:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">folds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spatial_block_cv</span>(drought_sf)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(folds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-11-03-spatialsample/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is a breaking change for data in projected coordinate reference systems. Data in geographic coordinates was actually already using these slightly larger grids, <a href="https://github.com/ropensci/stplanr/pull/467">due to issues with straight-line grids in non-planar CRS</a>, so this change just makes the amount of grid expansion controllable there.</p>
<p>The other breaking change/bug-fix is in <code>spatial_nndm_cv()</code>. The <code>prediction_sites</code> argument to <code>spatial_nndm_cv()</code> lets you specify the actual sites you were going to generate predictions at. In older versions of spatialsample, if any of the data in <code>prediction_sites</code> weren’t points, then this function would instead randomly sample points from inside the bounding box of the entire <code>prediction_sites</code> object.</p>
<p>Starting with spatialsample 0.5.0, passing a single polygon to <code>prediction_sites</code> will cause <code>spatial_nndm_cv()</code> to instead sample points from inside that polygon, allowing you fine-grained control over the boundaries for this sampling stage. This feels like a more intuitive interface, and you can always revert to previous behaviors by passing <code>sf::st_as_sf(sf::st_as_sfc(sf::st_bbox(prediction_sites)))</code> if you’d rather sample from the bounding box instead.</p>



 ]]></description>
  <category>R</category>
  <category>Spatial</category>
  <category>geospatial data</category>
  <category>spatialsample</category>
  <category>R packages</category>
  <guid>https://mm218.dev/posts/2023-11-03-spatialsample/index.html</guid>
  <pubDate>Fri, 03 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-11-03-spatialsample/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Adding context to maps made with ggplot2</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-10-31-map-context/index.html</link>
  <description><![CDATA[ 




<p>A colleague asked me today how they could best add a larger data set for context to a map of a (spatially) smaller data set, without the map expanding to incorporate the whole of the larger data set. I didn’t have a great answer off the top of my head, so this blog post is here to record what we tried, and what wound up working for us!</p>
<p>Say we’ve got some spatial data set that covers a broad area; for instance, the <code>nc</code> data set from sf that contains the counties of North Carolina:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3">nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape/nc.shp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_sf</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(nc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We also need a comparatively smaller data set that we’re interested in visualizing. For this blog, simulate some number of observations inside one of the more central counties:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">johnston <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nc[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(nc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>NAME <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Johnston"</span>), ]</span>
<span id="cb2-2">johnston_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_sample</span>(johnston, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> johnston) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> johnston_obs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Our goal is to add a bit more context to this map by drawing the borders of surrounding counties. The challenge is that ggplot will, by default, expand our visualization to contain the largest layer that we add:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> nc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> johnston_obs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We could control this using <code>expansion()</code> inside of <code>scale_*_continuous()</code> functions, in order to restrict the range of our visualization:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> nc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> johnston_obs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.63</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.29</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.28</span>)))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But these <code>expansion()</code> calls are relative to the scale of our larger data set, which makes them a bit difficult to reason about. We aren’t specifying our extents in terms of the data that we actually care about visualizing, we’re forced to specify them relative to the larger context that we don’t care as much about.</p>
<p>We could make this a bit easier by filtering our larger data set to only observations that are near (or in this case, touching) the area we’re actually trying to visualize:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">neighbors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nc[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_touches</span>(johnston, nc)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], ]</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> neighbors) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> johnston_obs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But while this <em>reduces</em> the problem, moving the center of the larger layer closer to the center of the layer we care about, it still has the same issue as when we used the entire <code>nc</code> object.</p>
<p>So what we wound up doing was embracing a little bit of jank and reaching into the ggplot2 internals. We started off by making a “base plot” object that was zoomed out to the level of detail that we wanted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">base_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(johnston_obs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb6-5"></span>
<span id="cb6-6">base_plot</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Defining our boundaries here is a bit easier to reason about – the <code>expansion()</code> calls are centered on our data of interest and are expanding the scales relative to this focal data set. Once we’ve got our level of zoom where we want it, we can build our plot using <code>ggplot_build()</code> and then extract the ranges of our x and y scales from the constructed plot object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">base_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot_build</span>(base_plot)</span>
<span id="cb7-2">xlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base_plot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>layout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>panel_params[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x_range</span>
<span id="cb7-3">ylim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base_plot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>layout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>panel_params[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y_range</span></code></pre></div>
</div>
<p>We can then use those ranges as limits, to force our final plot to have the same level of zoom as our simple map. That means we can add whatever layers we want to add context to our map, and not need to worry about fiddling with our scales in term of the largest layer we’ve added:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> nc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> johnston_obs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> xlim) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> ylim)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-31-map-context/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I have no idea how stable this approach will be – <a href="https://www.tidyverse.org/blog/2022/09/playing-on-the-same-team-as-your-dependecy/">we’re decidedly not playing on the same team as ggplot2</a> with this approach – but it works as of ggplot version 3.4.3, and it’s made making maps a bit easier for us at the moment!</p>



 ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Spatial</category>
  <category>geospatial data</category>
  <guid>https://mm218.dev/posts/2023-10-31-map-context/index.html</guid>
  <pubDate>Tue, 31 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-10-31-map-context/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Executing R code from untrusted sources in minimal environments</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-10-27-minimal-environments/index.html</link>
  <description><![CDATA[ 




<p>Yesterday we released <a href="https://github.com/Permian-Global-Research/rsi">rsi</a>, an R package that (among other things) makes it easy to retrieve spectral indices from the <a href="https://github.com/davemlz/awesome-spectral-indices">Awesome Spectral Indices</a> project and calculate them against any images you have on hand.</p>
<p>The actual code required to do these calculations is mostly just a bit of glue. The ASI project provides the formulas you’d use to calculate any spectral indices you might be interested in, which as relatively simple arithmetic are easily <a href="https://www.mm218.dev/posts/2023-10-24-fun-r-funcs/#str2lang">transformed into R code via <code>str2lang()</code></a>.</p>
<p>Once we’ve done that transformation, we can evaluate that R code against our images through a slightly off-label use of <code>terra::predict()</code>. This function loads chunks of our raster into R as a data frame with column names corresponding to our band labels, meaning that if we’re careful to ensure that our band names align with the standardized band names used by ASI<sup>1</sup> we can compute indices by evaluating their formulas “with” the data frame.</p>
<p>This sounds complex, but doesn’t actually require that much code to put together:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">calculate_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(raster,</span>
<span id="cb1-2">                              indices,</span>
<span id="cb1-3">                              output_filename) {</span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(raster, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SpatRaster"</span>)) raster <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(raster)</span>
<span id="cb1-5">  formulas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(indices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formula"</span>]], str2lang)</span>
<span id="cb1-6">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(</span>
<span id="cb1-7">    raster,</span>
<span id="cb1-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb1-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(model, newdata) {</span>
<span id="cb1-10">      out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(formulas, \(calc) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(newdata, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(calc)))</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> indices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"short_name"</span>]]</span>
<span id="cb1-12">      out</span>
<span id="cb1-13">    },</span>
<span id="cb1-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> output_filename</span>
<span id="cb1-15">  )</span>
<span id="cb1-16">  output_filename</span>
<span id="cb1-17">}</span></code></pre></div>
</div>
<p>Turn our formulas into calls, load our raster into R chunk by chunk, evaluate those calls in the context of our raster, lather rinse repeat. The conceptual complexity here is a lot higher, in my view, than the code complexity.</p>
<p>Because this code is pretty straightforward, and relies on the fantastic, highly-optimized <a href="https://github.com/rspatial/terra">terra package</a> to actually do these computations, we’re able to calculate these indices <em>fast</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">example_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rsi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spectral_indices</span>()</span>
<span id="cb2-2">example_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> example_index[example_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>short_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DPDD"</span>, ]</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb2-5">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rasters/example_sentinel1.tif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rsi"</span>),</span>
<span id="cb2-7">    example_index,</span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb2-9">  )</span>
<span id="cb2-10">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  1.754   0.040   1.794 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(out))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-27-minimal-environments/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is pretty nifty!</p>
<p>That said, we should be careful about what text we’re willing to turn into R code and execute. In particular, rsi is designed to integrate nicely with the Awesome Spectral Indices project, and to retrieve and compute the ASI set of indices – which, phrased differently, means we’re downloading code from the internet and running it on our computers. If someone were to mess with our indices – either by corrupting the GitHub repository or by editing the cached file on your machine – this could wind up giving them access to <code>system()</code> or other scary commands:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">evil_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> example_index</span>
<span id="cb5-2">evil_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system('echo oh no &gt; /tmp/example.txt')"</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rasters/example_sentinel1.tif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rsi"</span>),</span>
<span id="cb5-7">    evil_index,</span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb5-9">  ),</span>
<span id="cb5-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-11">)</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/example.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "oh no"</code></pre>
</div>
</div>
<p>So, how can we make this safer?</p>
<p>One way is by taking away the number of toys any malicious code has available to play with. We can do this by running the code in a locked-down environment, where it won’t have access to functions that might let code mess with our machine.</p>
<p>One way of creating a locked down environment is <code>rlang::new_environment()</code>. By default, this function creates a new environment with nothing in it – no built-in functions or objects:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_environment</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>character(0)</code></pre>
</div>
</div>
<p>This environment is also going to have the empty environment as its parent, meaning that code executed in this scope won’t be able to use functions or objects from the global environment<sup>2</sup>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inheriting from the global environment</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>(</span>
<span id="cb9-3">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()</span>
<span id="cb9-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inheriting from the empty environment</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>(</span>
<span id="cb11-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb11-5">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_environment</span>()</span>
<span id="cb11-6">  )</span>
<span id="cb11-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error in 2 + 2 : could not find function "+"</code></pre>
</div>
</div>
<p>That means that any code we run inside of this new environment will only have access to whatever functions and variables we purposefully include in the environment. The <code>data</code> argument to <code>rlang::new_environment()</code> makes it relatively easy to define whatever objects we’re looking to make available in this new environment:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_environment</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
</div>
<p>That means that, if we create a minimal environment containing only the functions and variables essential for calculating our indices, we should hopefully be able to reduce the potential blast radius of malicious code – or at least make it a lot harder for malicious code to impact anything we care about. In rsi, that means we wind up calculating indices inside a minimal environment that looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">calculate_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(raster,</span>
<span id="cb15-2">                              indices,</span>
<span id="cb15-3">                              output_filename) {</span>
<span id="cb15-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(raster, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SpatRaster"</span>)) raster <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(raster)</span>
<span id="cb15-5">  formulas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(indices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formula"</span>]], str2lang)</span>
<span id="cb15-6">  </span>
<span id="cb15-7">  exec_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_environment</span>(</span>
<span id="cb15-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">::</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">::</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">^</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">^</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-17">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-18">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-19">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb15-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> list,</span>
<span id="cb15-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lapply =</span> lapply,</span>
<span id="cb15-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with =</span> with,</span>
<span id="cb15-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eval =</span> eval,</span>
<span id="cb15-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formulas =</span> formulas,</span>
<span id="cb15-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">short_names =</span> indices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"short_name"</span>]],</span>
<span id="cb15-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">raster =</span> raster,</span>
<span id="cb15-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_filename =</span> output_filename</span>
<span id="cb15-28">    )</span>
<span id="cb15-29">  )</span>
<span id="cb15-30">  </span>
<span id="cb15-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>(</span>
<span id="cb15-32">    {</span>
<span id="cb15-33">      terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(</span>
<span id="cb15-34">        raster,</span>
<span id="cb15-35">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb15-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(model, newdata) {</span>
<span id="cb15-37">          out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb15-38">            formulas,</span>
<span id="cb15-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(calc) {</span>
<span id="cb15-40">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(newdata, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(calc))</span>
<span id="cb15-41">            }</span>
<span id="cb15-42">          )</span>
<span id="cb15-43">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> short_names</span>
<span id="cb15-44">          out</span>
<span id="cb15-45">        },</span>
<span id="cb15-46">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> output_filename</span>
<span id="cb15-47">      )</span>
<span id="cb15-48">    },</span>
<span id="cb15-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> exec_env</span>
<span id="cb15-50">  )</span>
<span id="cb15-51">  </span>
<span id="cb15-52">  output_filename</span>
<span id="cb15-53">}</span></code></pre></div>
</div>
<p>This shouldn’t impact anything from the user’s perspective when calculating well-behaved formulas:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb16-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rasters/example_sentinel1.tif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rsi"</span>),</span>
<span id="cb16-4">    example_index,</span>
<span id="cb16-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb16-6">  )</span>
<span id="cb16-7">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.016   0.000   0.015 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(out))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-27-minimal-environments/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But it makes the most obvious malicious code fail:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rasters/example_sentinel1.tif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rsi"</span>),</span>
<span id="cb19-4">    evil_index,</span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb19-6">  )</span>
<span id="cb19-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error in system("echo oh no &gt; /tmp/example.txt") : 
  could not find function "system"</code></pre>
</div>
</div>
<p><strong>Update 2023-10-27</strong>: However, we actually need to go one step further. Because we’ve included <code>::</code> in our minimal environment, we’ve left in an “escape hatch” that malicious code can use to access any functions it wants:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">evil_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base::system('echo oh no &gt; /tmp/example2.txt')"</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rasters/example_sentinel1.tif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rsi"</span>),</span>
<span id="cb21-5">    evil_index,</span>
<span id="cb21-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb21-7">  )</span>
<span id="cb21-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error : [predict] the number of values returned by 'fun' (model predict function) does not match the input. Try na.rm=TRUE?</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/example2.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "oh no"</code></pre>
</div>
</div>
<p>Instead of calling <code>terra::predict()</code> via <code>::</code> inside our environment, we’ll need to include that function in the environment directly, in order to remove this escape hatch:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">calculate_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(raster,</span>
<span id="cb25-2">                              indices,</span>
<span id="cb25-3">                              output_filename) {</span>
<span id="cb25-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(raster, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SpatRaster"</span>)) raster <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(raster)</span>
<span id="cb25-5">  formulas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(indices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formula"</span>]], str2lang)</span>
<span id="cb25-6">  </span>
<span id="cb25-7">  exec_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_environment</span>(</span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb25-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">^</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">^</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-17">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-18">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb25-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> list,</span>
<span id="cb25-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lapply =</span> lapply,</span>
<span id="cb25-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with =</span> with,</span>
<span id="cb25-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eval =</span> eval,</span>
<span id="cb25-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formulas =</span> formulas,</span>
<span id="cb25-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">short_names =</span> indices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"short_name"</span>]],</span>
<span id="cb25-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">raster =</span> raster,</span>
<span id="cb25-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_filename =</span> output_filename,</span>
<span id="cb25-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">predict =</span> terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>predict</span>
<span id="cb25-28">    )</span>
<span id="cb25-29">  )</span>
<span id="cb25-30">  </span>
<span id="cb25-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>(</span>
<span id="cb25-32">    {</span>
<span id="cb25-33">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(</span>
<span id="cb25-34">        raster,</span>
<span id="cb25-35">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb25-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(model, newdata) {</span>
<span id="cb25-37">          out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb25-38">            formulas,</span>
<span id="cb25-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(calc) {</span>
<span id="cb25-40">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(newdata, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(calc))</span>
<span id="cb25-41">            }</span>
<span id="cb25-42">          )</span>
<span id="cb25-43">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> short_names</span>
<span id="cb25-44">          out</span>
<span id="cb25-45">        },</span>
<span id="cb25-46">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> output_filename</span>
<span id="cb25-47">      )</span>
<span id="cb25-48">    },</span>
<span id="cb25-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> exec_env</span>
<span id="cb25-50">  )</span>
<span id="cb25-51">  </span>
<span id="cb25-52">  output_filename</span>
<span id="cb25-53">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb26-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rasters/example_sentinel1.tif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rsi"</span>),</span>
<span id="cb26-4">    evil_index,</span>
<span id="cb26-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".tif"</span>)</span>
<span id="cb26-6">  )</span>
<span id="cb26-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error in base::system : could not find function "::"</code></pre>
</div>
</div>
<p>Thanks Gábor Csárdi for the catch!</p>
<p>This still isn’t a perfect fix – and rsi also checks to make sure that all of your formulas are only using symbols that match the band names of your rasters. Even with these checks, you should investigate the formulas you’re going to run before you actually run them – or save a copy of the trusted indices you’re going to calculate and provide <em>those</em> to <code>calculate_indices()</code>, rather than using <code>spectral_indices()</code> directly. But this hopefully makes this function a pinch safer.</p>
<p>I wrote this piece of rsi back in August and then more or less didn’t think of it again until yesterday, when we released rsi on GitHub – and at the same time, started using GitHub Actions for CI for the package. All of a sudden, I started seeing a lot of CI runs that looked like this:</p>
<p><img src="https://mm218.dev/posts/2023-10-27-minimal-environments/gh.png" class="img-fluid" alt="A screenshot of GitHub Actions, where all workflows -- including R CMD check -- are successful, but test coverage is failing."></p>
<p>R CMD check succeeding and test coverage failing made no sense to me, as theoretically they’re both running a full check and reporting the results. In classic developer tradition, I spent a few hours flailing around before finally giving up and resorting to the final option I had available: reading the error messages.</p>
<p>And it turned out that each of those failed test coverage runs had the same error message:</p>
<p><img src="https://mm218.dev/posts/2023-10-27-minimal-environments/err.png" class="img-fluid" alt="Expected `... <- NULL` to run without any errors. Actually got a <simpleError> with text: could not find function :::"></p>
<p><code>could not find function ":::"</code>.</p>
<p>My test coverage workflow is using the (fantastic) <a href="https://covr.r-lib.org/">covr</a> package to measure line coverage. Behind the scenes, covr is doing a lot more than just running R CMD check, like my other workflows – covr is actually <a href="https://covr.r-lib.org/articles/how_it_works.html">changing what R runs when it runs your code</a>, in order to measure how many times any given line of code gets called. This is a really neat workflow, but it doesn’t play nicely with our minimal environment here; the new code added inside of our <code>local()</code> statement depends upon functions that we didn’t (and aren’t going to) provide to the minimal environment, such as <code>:::</code>. Adding a new environment variable to the test coverage workflow, and skipping tests that ran the <code>local()</code> call when that environment variable was defined, wound up solving the issue.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Which rsi will automatically enforce when using <code>get_*_imagery()</code> functions.↩︎</p></li>
<li id="fn2"><p>Or any other environments this one inherits from.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-10-27-minimal-environments/index.html</guid>
  <pubDate>Fri, 27 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-10-27-minimal-environments/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introducing rsi</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-10-26-rsi/index.html</link>
  <description><![CDATA[ 




<p>I am so, so excited to share that rsi,<sup>1</sup> a new R package for handling common spatial data wrangling tasks, is <a href="https://github.com/Permian-Global-Research/rsi">now available on GitHub</a>! Specifically, rsi handles:</p>
<ul>
<li>Downloading data from STAC APIs (using some of the tricks I wrote about in <a href="https://stacspec.org/en/tutorials/1-download-data-using-r/">the STAC R tutorials</a>),</li>
<li>Computing indices from the <a href="https://github.com/awesome-spectral-indices/awesome-spectral-indices">Awesome Spectral Indices</a> project using that imagery,</li>
<li>And a handful of other spatial data wrangling problems, including <a href="https://permian-global-research.github.io/rsi/reference/stack_rasters.html">merging multiple bands into a single VRT file</a>.</li>
</ul>
<p>Most of my work on the package happened while I was at <a href="https://permianglobal.com/">Permian Global</a>, helping them automate their MMRV pipelines used to make sure their carbon credit projects are actually preserving carbon sinks and have additive benefits over time.<sup>2</sup> I’m really excited and grateful that Permian has agreed to open-source this work.</p>
<p>Let’s take a whirlwind tour through the features in this package! For the purposes of this blog post, let’s download and process imagery for Middlesex county in Massachusetts, USA.<sup>3</sup> We’ll use the tigris package to get the borders for this county, and then reproject it into the Massachusetts State Plane:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">ma_counties <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tigris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">counties</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MA"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">progress_bar =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-2">middlesex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ma_counties[ma_counties<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>NAME <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middlesex"</span>, ]</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reprojecting into the MA state plane, a planar CRS:</span></span>
<span id="cb1-4">middlesex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(middlesex, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26986</span>)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_geometry</span>(middlesex))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-26-rsi/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is the area we’re going to download and process data for.</p>
<p>Specifically, let’s start off by downloading Landsat imagery from Microsoft’s Planetary Computer STAC API! This is pretty straightforward using rsi: use the <code>get_landsat_imagery()</code> function with an area of interest and a timeframe, and you’ll automatically get a cloud-masked composite image of all acquisitions for that spatiotemporal window. Let’s grab all the imagery from September 2023:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsi)</span>
<span id="cb2-2">future<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multisession"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">middlesex_imagery <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_landsat_imagery</span>(</span>
<span id="cb2-5">  middlesex,</span>
<span id="cb2-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-01"</span>,</span>
<span id="cb2-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-30"</span></span>
<span id="cb2-8">)</span>
<span id="cb2-9">middlesex_imagery</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "shell_liquid_doctor.tif"</code></pre>
</div>
</div>
<p>Note that I’ve used <code>future::plan()</code> here to specify a parallelization methodology, as the data retrieval functions in rsi are all compatible with future<sup>4</sup> to speed up downloads by using multiple threads. These functions also use progressr to let users specify progress reporting methods, if they want them, by calling <code>progressr::handlers()</code>.</p>
<p>By default, <code>get_landsat_imagery()</code> will download a composite of all bands available in Landsat 8 and 9 imagery for our timeframe:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(middlesex_imagery) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-26-rsi/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that this composite has been cloud-masked (using the QA pixel band) and rescaled<sup>5</sup> (using the scale and offset specified in metadata provided by the STAC endpoint) automatically. You can control these behaviors via function arguments.</p>
<p>We’re able to download more than just imagery via rsi functions – for instance, we could also grab a DEM for this area from Planetary Computer, using the <code>get_dem()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">middlesex_dem <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_dem</span>(middlesex)</span>
<span id="cb5-2">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(middlesex_dem) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-3">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-26-rsi/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Under the hood, both of these functions (and their friends, <code>get_sentinel2_data()</code> and <code>get_sentinel1_data()</code>) are powered by a lower-level <code>get_stac_data()</code> function, which should theoretically work with any imagery provided by any STAC API, anywhere. These functions simply provide user-friendly defaults to make it faster to get the data you care about.</p>
<p>In addition to these STAC-focused data-downloading functions, rsi also has an interface to the <a href="https://github.com/awesome-spectral-indices/awesome-spectral-indices">Awesome Spectral Indices</a> project, via the <code>spectral_indices()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spectral_indices</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 9
  application_domain bands     contributor    date_of_addition formula long_name
  &lt;chr&gt;              &lt;list&gt;    &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt;    
1 vegetation         &lt;chr [2]&gt; https://githu… 2021-11-17       (N - 0… Aerosol …
2 vegetation         &lt;chr [2]&gt; https://githu… 2021-11-17       (N - 0… Aerosol …
3 water              &lt;chr [6]&gt; https://githu… 2022-09-22       (B + G… Augmente…
4 vegetation         &lt;chr [2]&gt; https://githu… 2021-09-20       (1 / G… Anthocya…
5 vegetation         &lt;chr [3]&gt; https://githu… 2022-04-08       N * ((… Anthocya…
6 vegetation         &lt;chr [4]&gt; https://githu… 2021-05-11       (N - (… Atmosphe…
# ℹ 3 more variables: platforms &lt;list&gt;, reference &lt;chr&gt;, short_name &lt;chr&gt;</code></pre>
</div>
</div>
<p>This function attempts to grab the newest version of the spectral indices JSON file from the ASI repo, and then stores that data in a cache folder on your computer. If the downloading fails, the package will fall back (with a warning) to use your possibly outdated cache instead; if you don’t have a cache and can’t download the files, the package will instead (with a different warning) resort to using a packaged version of the indices file. This ensures that you’re always getting the latest and greatest version of the ASI list possible, but that the package can still be used without an internet connection.</p>
<p>There are also functions in rsi to sort through the ASI list of indices. For instance, the <code>filter_platforms()</code> function can be used to, well, filter the list to only indices that can be calculated from a given platform. For instance, to filter to only indices that can be calculated using data from Landsat’s Operational Land Imager:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_platforms</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">platforms =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Landsat-OLI"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 9
  application_domain bands     contributor    date_of_addition formula long_name
  &lt;chr&gt;              &lt;list&gt;    &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt;    
1 vegetation         &lt;chr [2]&gt; https://githu… 2021-11-17       (N - 0… Aerosol …
2 vegetation         &lt;chr [2]&gt; https://githu… 2021-11-17       (N - 0… Aerosol …
3 water              &lt;chr [6]&gt; https://githu… 2022-09-22       (B + G… Augmente…
4 vegetation         &lt;chr [4]&gt; https://githu… 2021-05-11       (N - (… Atmosphe…
5 vegetation         &lt;chr [4]&gt; https://githu… 2021-05-14       sla * … Adjusted…
6 vegetation         &lt;chr [2]&gt; https://githu… 2022-04-08       (N * (… Advanced…
# ℹ 3 more variables: platforms &lt;list&gt;, reference &lt;chr&gt;, short_name &lt;chr&gt;</code></pre>
</div>
</div>
<p>There’s an equivalent function to filter indices based upon the bands that require. For instance, we can filter the list to only indices that use the red and blue band of images:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_bands</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bands =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 9
  application_domain bands     contributor    date_of_addition formula long_name
  &lt;chr&gt;              &lt;list&gt;    &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt;    
1 vegetation         &lt;chr [2]&gt; https://githu… 2022-04-08       (R - B… Kawashim…
2 vegetation         &lt;chr [2]&gt; https://githu… 2022-04-08       (R^2.0… Modified…
# ℹ 3 more variables: platforms &lt;list&gt;, reference &lt;chr&gt;, short_name &lt;chr&gt;</code></pre>
</div>
</div>
<p>Arguments to these functions let you control whether you’re looking for indices that match <em>all</em> platforms and bands you’ve specified, or <em>any</em> of them.</p>
<p>But rsi doesn’t simply make these formulas available in R, it also helps you compute these indices from imagery, via the <code>calculate_indices()</code> function. This function takes your imagery and a subset of <code>spectral_indices()</code> as arguments, and creates a raster containing all of those indices as an output. We can use <code>filter_bands()</code> to quickly get a list of the indices we can compute from our Landsat imagery, and then <code>calculate_indices()</code> to compute all 128 of those indices from our images:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">middlesex_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb12-2">  middlesex_imagery,</span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_bands</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bands =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(middlesex_imagery))),</span>
<span id="cb12-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"middlesex_indices.tif"</span></span>
<span id="cb12-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
|---------|---------|---------|---------|
=========================================
                                          </code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(middlesex_indices) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-2">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-26-rsi/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Note that <code>calculate_indices()</code> is evaluating the formulas in the <code>formula</code> column of the spectral indices data frame as if they were code.<sup>6</sup> These formulas are evaluated inside of a very limited environment, which doesn’t have access to the global environment or most R fixtures, which does <em>reduce</em> the amount of harm malicious code could do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">evil_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spectral_indices</span>()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span>
<span id="cb15-2">evil_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system('echo OHNO')"</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_indices</span>(</span>
<span id="cb15-5">    middlesex_imagery,</span>
<span id="cb15-6">    evil_index,</span>
<span id="cb15-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test.tif"</span></span>
<span id="cb15-8">  )</span>
<span id="cb15-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error in system("echo OHNO") : could not find function "system"</code></pre>
</div>
</div>
<p>But it’s worth scanning your formulas before running <code>calculate_indices()</code>, just to make sure you aren’t going to be accidentally running something surprising!</p>
<p>Last but not least, rsi also provides a way to combine disparate data sets covering the same geographic region into a single VRT, quickly creating a file that you can treat as a single raster without taking up much additional storage space. This is a great way to create predictor bricks from your indices and downloaded data<sup>7</sup> which you can then use for model fitting and prediction:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">combined_layers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack_rasters</span>(</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(middlesex_imagery, middlesex_dem, middlesex_indices),</span>
<span id="cb17-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"middlesex.vrt"</span></span>
<span id="cb17-4">)</span>
<span id="cb17-5"></span>
<span id="cb17-6">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(combined_layers) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-7">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-10-26-rsi/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I’m <em>extremely</em> excited for this package to be out in the open, and for people to start using it. If you find the package useful or interesting, <a href="https://github.com/Permian-Global-Research/rsi/">drop us a star on GitHub</a> – and if you have any questions/comments/concerns about how it does things, please open an issue or a PR! We’re planning a CRAN release in the not-too-distant future, and would love to incorporate any feedback we get into that first released version.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The name is a nonsense acronym. Initially the package was going to be “rsi: An R interface to the Rsome Spectral Indices project”, but the scope very quickly outgrew that; now it’s a convenient short package name that’s not taken on CRAN, and I’m backronyming as many additional meanings into those three letters as I can make fit.↩︎</p></li>
<li id="fn2"><p>I am not currently employed by Permian, and nothing I say here or elsewhere reflects their opinions! That said, Permian is a copyright holder and funder to rsi, just as Posit is to waywiser, given their support of the initial development of the package.↩︎</p></li>
<li id="fn3"><p>I was originally going to use Boston’s Suffolk county, but Suffolk county’s borders are <em>ludicrous</em>, because they include not just Boston’s mainland but also Boston’s islands, meaning the county is a normal-enough shape with a huge rectangle extending into the Atlantic off to the East.↩︎</p></li>
<li id="fn4"><p>Via future.apply, to be specific.↩︎</p></li>
<li id="fn5"><p>Explaining <a href="https://www.mm218.dev/posts/2023-08-24-landsat-scaling/">this blog post from a few months ago</a>.↩︎</p></li>
<li id="fn6"><p>Explaining <a href="https://www.mm218.dev/posts/2023-10-24-fun-r-funcs/#str2lang">this blog post from two days ago</a>.↩︎</p></li>
<li id="fn7"><p>Not that you should be regressing using raw imagery bands, but this lets you combine a DEM and other computed metrics with calculated indices.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Spatial</category>
  <category>geospatial data</category>
  <category>R packages</category>
  <guid>https://mm218.dev/posts/2023-10-26-rsi/index.html</guid>
  <pubDate>Thu, 26 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-10-26-rsi/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Three fun R functions</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-10-24-fun-r-funcs/index.html</link>
  <description><![CDATA[ 




<p>Inspired by <a href="https://masalmon.eu/2023/10/20/three-neat-functions/">Maëlle</a> who was inspired by <a href="https://yihui.org/en/2023/10/three-functions/">Yihui</a> who was inspired by <a href="https://masalmon.eu/2023/09/29/three-functions/">Maëlle</a>(who has <a href="https://masalmon.eu/2023/08/31/three-shorten/">a whole</a> <a href="https://masalmon.eu/2023/06/06/basic-patterns/">series</a> <a href="https://masalmon.eu/2023/08/30/three-r-functions/">about</a> <a href="https://masalmon.eu/2023/07/24/basic-notions/">this</a>), I wanted to share three useful base R functions that I think maybe don’t get enough love. And inspired by <a href="https://masalmon.eu/2023/10/20/three-neat-functions/">Maëlle again</a>, my list here is actually four functions.</p>
<section id="sweep" class="level2">
<h2 class="anchored" data-anchor-id="sweep"><code>sweep()</code></h2>
<p>If you ever need to do math with matrices, then <code>sweep()</code> is going to be your best friend. Say for instance we want to center and scale each column in a matrix. This is a pretty straightforward operation – we need to calculate the mean and standard deviations for each column, subtract the column mean from each observation, and then divide those by the corresponding standard deviation.</p>
<p>We can use <code>apply</code> to get our means and standard deviations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate some fake data in a 10x10 matrix:</span></span>
<span id="cb1-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate one mean and sd for each column of our matrix:</span></span>
<span id="cb1-4">col_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mean)</span>
<span id="cb1-5">col_sds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sd)</span></code></pre></div>
</div>
<p>The subtraction and division are a bit less straightforward. R’s base math operators will attempt to do element-wise operations, treating our vector as a one-column array and replicating as needed. That’s not what we want:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb2-2">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> col_means) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> col_sds,</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(x)</span>
<span id="cb2-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Attributes: &lt; Length mismatch: comparison on first 1 components &gt;"
[2] "Mean relative difference: 0.360556"                               </code></pre>
</div>
</div>
<p>We could replicate our vector ourself, in order to take advantage of these element-wise operations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb4-2">  ((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(col_means, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(col_sds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(),</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>()</span>
<span id="cb4-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>But that’s silly, especially if we were working with more observations.</p>
<p>Better instead is to use <code>sweep()</code> to perform some operation between each element of our vector and each column of the matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take every value in our matrix, and subtract its corresponding column mean:</span></span>
<span id="cb6-2">centered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MARGIN =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># just like in apply()</span></span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">STATS =</span> col_means, </span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "-" is the default argument -- we don't NEED to provide it here</span></span>
<span id="cb6-7">)</span></code></pre></div>
</div>
<p>And we can similarly use <code>sweep()</code> to divide each column by its corresponding standard deviation, finishing up our centering and scaling:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Divide each value by its corresponding column sd:</span></span>
<span id="cb7-2">centered_and_scaled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(centered, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, col_sds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works out identically to the built-in scale function:</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(centered_and_scaled),</span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(x))</span>
<span id="cb7-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>This is the main way I use <code>sweep()</code>, but there’s no requirement you use it for math – it works just as well with non-mathematical functions or non-numeric matrices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">letter_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-2">letter_mat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,] "a"  "a"  "a"  "a"  "a" 
[2,] "b"  "b"  "b"  "b"  "b" 
[3,] "c"  "c"  "c"  "c"  "c" 
[4,] "d"  "d"  "d"  "d"  "d" 
[5,] "e"  "e"  "e"  "e"  "e" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(letter_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], paste0)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "aA" "bA" "cA" "dA" "eA" "aB" "bB" "cB" "dB" "eB" "aC" "bC" "cC" "dC" "eC"
[16] "aD" "bD" "cD" "dD" "eD" "aE" "bE" "cE" "dE" "eE"</code></pre>
</div>
</div>
</section>
<section id="reformulate-and-df2formula" class="level2">
<h2 class="anchored" data-anchor-id="reformulate-and-df2formula"><code>reformulate()</code> and <code>DF2formula()</code></h2>
<p>The <code>reformulate()</code> function is a lifesaver if you’re trying to write long or complicated formulas, or multiple formulas generated by some other logic in your code.</p>
<p>The function is pretty straightforward. If you’re trying to make a formula <code>y ~ x + z</code>, provide your predictors as the first argument and your outcome as the second:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reformulate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>y ~ x + z</code></pre>
</div>
</div>
<p>The nice thing is that <code>reformulate</code> accepts vectors as inputs, making it easy to construct a vector of predictors and automatically turn them into a formula:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reformulate</span>(letters, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outcome"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>outcome ~ a + b + c + d + e + f + g + h + i + j + k + l + m + 
    n + o + p + q + r + s + t + u + v + w + x + y + z</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reformulate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(Orange), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>age ~ Tree + age + circumference</code></pre>
</div>
</div>
<p>And in particular, this is an excellent alternative to dropping a few columns in order to use <code>outcome ~ .</code> – instead, you can use <code>setdiff()</code> to exclude those columns from your formula:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">outcome_variable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reformulate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(Orange), outcome_variable), outcome_variable)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>age ~ Tree + circumference</code></pre>
</div>
</div>
<p>Relatedly, the function <code>DF2formula()</code> will automatically turn the column names from a data frame into a formula. The first column will become the outcome variable, and the rest will be used as predictors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DF2formula</span>(Orange)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Tree ~ age + circumference</code></pre>
</div>
</div>
<p>To change what column is used as the outcome variable, reorder the columns in your data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DF2formula</span>(Orange[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>circumference ~ age + Tree</code></pre>
</div>
</div>
</section>
<section id="str2lang" class="level2">
<h2 class="anchored" data-anchor-id="str2lang"><code>str2lang()</code></h2>
<p>Shockingly enough, <code>str2lang()</code> function turns a string into a language object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">growth_rate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circumference / age"</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str2lang</span>(growth_rate)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>circumference/age</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str2lang</span>(growth_rate))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "call"</code></pre>
</div>
</div>
<p>Wooooo!</p>
<p>I think that, to most people, this does not sound immediately useful.<sup>1</sup> But the idea that your code can turn plain text into code at runtime is pretty powerful, and some of the most R-esque nonsense that R has to offer.</p>
<p>For instance, we can use <code>eval()</code> to actually execute the call created by <code>str2lang()</code> in our global environment:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str2lang</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2 + 2"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4</code></pre>
</div>
</div>
<p>And that string can do anything that regular R code can do – assign variables, manage connections, any procedure that normal R code can do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str2lang</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x &lt;- 3"</span>))</span>
<span id="cb31-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<p>We can also use this with <code>with()</code> or <code>local()</code> to execute our code inside of other environments. For instance, if we want to calculate our <code>growth_rate</code> from earlier, we can run that code with the <code>Orange</code> data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(Orange, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str2lang</span>(growth_rate)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0.25423729 0.11983471 0.13102410 0.11454183 0.09748172 0.10349854
 [7] 0.09165613 0.27966102 0.14256198 0.16716867 0.15537849 0.13972380
[13] 0.14795918 0.12831858 0.25423729 0.10537190 0.11295181 0.10756972
[19] 0.09341998 0.10131195 0.08849558 0.27118644 0.12809917 0.16867470
[25] 0.16633466 0.14541024 0.15233236 0.13527181 0.25423729 0.10123967
[31] 0.12198795 0.12450199 0.11535337 0.12682216 0.11188369</code></pre>
</div>
</div>
<p>This can be a powerful way to “import” code from other sources, for instance if you have a CSV of equations you want to run against a data frame. You want to be careful when using this with untrusted inputs, of course – if your input includes a call to <code>system()</code>, it might wind up wrecking your computer!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I think, to most people, this barely sounds like English.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-10-24-fun-r-funcs/index.html</guid>
  <pubDate>Tue, 24 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-10-24-fun-r-funcs/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Cloud-Native Geospatial If You Don’t Speak Snake</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-09-20-cngf/index.html</link>
  <description><![CDATA[ 




<p>I’m over in the <a href="https://cloudnativegeo.org/blog/2023/09/cloud-native-geospatial-if-you-dont-speak-snake">Cloud-Native Geospatial Foundation’s blog today</a> with a post called “Cloud-Native Geospatial If You Don’t Speak Snake”. This post comes from an UnConference session at the 2023 ESIP July Meeting, organized by <a href="https://github.com/ashiklom">Alexey Shiklomanov</a>, focusing on what tools and what gaps exist in the cloud-native geospatial workflow for non-Python users. It was an absolutely fantastic UnConference session, and I’m hoping that my summary of our takeaways is as useful for others as it was for me.</p>
<p>One challenge in the session – and one that I don’t get into in the post – is that “cloud-native” means a lot of different things to different folks! The CNGF themselves have a pretty straightforward definition:</p>
<blockquote class="blockquote">
<p>Cloud-Native data formats are structured to be efficiently retrived from cloud object storage services which are designed to serve large volumes of data using generic RESTful / HTTP data transfer protocols.</p>
</blockquote>
<p>But our UnConference session was interested in a much broader definition, one that was a bit closer to the CNCF definition of the term:</p>
<blockquote class="blockquote">
<p>Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.</p>
</blockquote>
<p>My post focuses a bit more on tools and gaps relating to the CNGF definition – it’s on their blog, after all! – but our working group was interested in API specifications, serverless runtimes, and all sorts of other topics that I think haven’t seen the same amount of standardization as the data format and retrieval side of geospatial workflows.<sup>1</sup> There’s a lot of activity around geospatial workflows right now, and I’m excited to see what the future has in store!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Most of my data storage and retrieval work boils down to “use COGs, use GDAL’s virtual filesystem interface”. I <em>wish</em> my analysis, runtime, and codebase setups could be boiled down to that level.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Spatial</category>
  <category>geospatial data</category>
  <guid>https://mm218.dev/posts/2023-09-20-cngf/index.html</guid>
  <pubDate>Wed, 20 Sep 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-09-20-cngf/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pre-allocating vectors is for nerds</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-08-29-allocations/index.html</link>
  <description><![CDATA[ 




<p>The second circle of R hell, in <a href="https://www.burns-stat.com/pages/Tutor/R_inferno.pdf">Patrick Burns’ seminal book The R Inferno</a>, is titled “Growing Objects”. This refers to a common antipattern for R users, usually among the first things taught when dealing with iteration: it is extremely inefficient to grow a vector using <code>c()</code>, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">vector_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb1-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb1-4">    out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(out, i)</span>
<span id="cb1-5">  }</span>
<span id="cb1-6">  out</span>
<span id="cb1-7">}</span></code></pre></div>
</div>
<p>Instead, Burns says, it is better to pre-allocate our vector <code>out</code>, and assign our function’s output to a specific position in <code>out</code> using either <code>[</code> or <code>[[</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">vector_prealloc_one_bracket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb2-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, n)</span>
<span id="cb2-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb2-4">    out[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i</span>
<span id="cb2-5">  }</span>
<span id="cb2-6">  out</span>
<span id="cb2-7">}</span>
<span id="cb2-8"></span>
<span id="cb2-9">vector_prealloc_two_bracket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb2-10">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, n)</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb2-12">    out[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i</span>
<span id="cb2-13">  }</span>
<span id="cb2-14">  out</span>
<span id="cb2-15">}</span></code></pre></div>
</div>
<p>Of course, it would be better yet to avoid our loop entirely, and simply create our final object using the colon operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">colon_operator <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb3-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>But that’s beside the point right now.</p>
<p>This advice was originally written in 2011, but is even more important today. In Burns’ book, subsetting is roughly 7 times faster when <code>n</code> is 10,000; on my computer today, subsetting is roughly 200 times faster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb4-2">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_c</span>(n),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_prealloc_one_bracket</span>(n),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">two_brackets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_prealloc_two_bracket</span>(n),</span>
<span id="cb4-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colon =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colon_operator</span>(n),</span>
<span id="cb4-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_gc =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb4-8">)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expression"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"median"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itr/sec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mem_alloc"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  expression     median `itr/sec` mem_alloc
  &lt;bch:expr&gt;   &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;
1 c                51ms      19.3   191.2MB
2 one_bracket     277µs    3548.     99.1KB
3 two_brackets    276µs    3538.     96.7KB
4 colon           361ns 2124339.         0B</code></pre>
</div>
</div>
<p>But what if <code>n</code> is unknowable? Well, to quote Burns:</p>
<blockquote class="blockquote">
<p>Often a reasonable upper bound on the size of the final object is known. If so, then create the object with that size and then remove the extra values at the end. If the final size is a mystery, then you can still follow the same scheme, but allow for periodic growth of the object.</p>
</blockquote>
<p>This is still probably a decent approach: over-allocate and trim down, or allocate in chunks and only grow when those chunks are exhausted.</p>
<p>Or… perhaps we might try growing a vector with <code>[</code> or <code>[[</code>, rather than with <code>c()</code>? To anyone raised on R traditions, this might seem like a code smell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">vector_unalloc_one_bracket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb6-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb6-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb6-4">    out[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i</span>
<span id="cb6-5">  }</span>
<span id="cb6-6">  out</span>
<span id="cb6-7">}</span>
<span id="cb6-8"></span>
<span id="cb6-9">vector_unalloc_two_bracket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb6-10">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb6-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb6-12">    out[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i</span>
<span id="cb6-13">  }</span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(out)</span>
<span id="cb6-15">}</span></code></pre></div>
</div>
<p>But if we test it out:<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_c</span>(n),</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prealloc_one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_prealloc_one_bracket</span>(n),</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unalloc_one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_unalloc_one_bracket</span>(n),</span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unalloc_two_brackets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_unalloc_two_bracket</span>(n),</span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_gc =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb7-7">)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expression"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"median"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itr/sec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mem_alloc"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  expression             median `itr/sec` mem_alloc
  &lt;bch:expr&gt;           &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;
1 c                     54.02ms      16.6  191.23MB
2 prealloc_one_bracket 285.52µs    3428.    78.17KB
3 unalloc_one_bracket    1.24ms     710.   871.73KB
4 unalloc_two_brackets   2.76ms     337.     1.72MB</code></pre>
</div>
</div>
<p>Growing a vector via <code>[</code> is still notably slower than assigning values to a pre-allocated vector; it looks like it’s roughly ~5 times slower. But that still means it’s ~50 times faster than growing a vector via <code>c()</code>, and allocates ~200 times less memory to do so. Growing a vector via <code>[[</code> isn’t quite as efficient – taking roughly twice the time and memory as <code>[</code> here – but still blows <code>c()</code> out of the water.</p>
<p>That’s not too shabby, for a code smell. How does a method like <code>vapply()</code> compare?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">vapply_lambda <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, \(i) i, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb9-3">}</span>
<span id="cb9-4"></span>
<span id="cb9-5">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb9-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_c</span>(n),</span>
<span id="cb9-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prealloc_one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_prealloc_one_bracket</span>(n),</span>
<span id="cb9-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unalloc_one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_unalloc_one_bracket</span>(n),</span>
<span id="cb9-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unalloc_two_brackets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_unalloc_two_bracket</span>(n),</span>
<span id="cb9-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vapply =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply_lambda</span>(n),</span>
<span id="cb9-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_gc =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb9-12">)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expression"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"median"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itr/sec"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mem_alloc"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
  expression             median `itr/sec` mem_alloc
  &lt;bch:expr&gt;           &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;
1 c                     50.87ms      19.5   191.2MB
2 prealloc_one_bracket 279.79µs    3501.     78.2KB
3 unalloc_one_bracket    1.18ms     649.      853KB
4 unalloc_two_brackets   2.69ms     345.      1.7MB
5 vapply                 3.41ms     272.     78.2KB</code></pre>
</div>
</div>
<p><code>vapply()</code> uses as little memory as our pre-allocation approaches, but is slower than either of our un-allocated methods.<sup>2</sup></p>
<p>It’s worth emphasizing that the differences between these methods are <em>microscopic</em> compared to the difference between them and <code>c()</code> for growing vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">benchmarks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">press</span>(</span>
<span id="cb11-2">  bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_c</span>(n),</span>
<span id="cb11-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prealloc_one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_prealloc_one_bracket</span>(n),</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unalloc_one_bracket =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_unalloc_one_bracket</span>(n),</span>
<span id="cb11-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unalloc_two_brackets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector_unalloc_two_bracket</span>(n),</span>
<span id="cb11-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vapply =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply_lambda</span>(n),</span>
<span id="cb11-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_gc =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb11-9">  ),</span>
<span id="cb11-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>)</span>
<span id="cb11-11">)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb11-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(benchmarks, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n, median, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(expression))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median execution time (s)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-29-allocations/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But as far as execution speed goes, well, maybe growing objects in general isn’t worthy of its own circle of hell anymore:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">benchmarks[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(benchmarks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>expression) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, ] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n, median, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(expression))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median execution time (s)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-29-allocations/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Though of course, <code>vapply()</code> and the pre-allocated methods still win out in terms of memory allocation:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">benchmarks[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(benchmarks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>expression) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, ] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n, mem_alloc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(expression))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation (bytes)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-29-allocations/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So: pre-allocate your vectors when you’re able. But maybe it’s fine to grow an object every once in a while, as a treat. It probably won’t get you sent to hell.</p>
<p>I have no idea when things changed to make growing vectors via <code>[</code> so much more efficient now than in 2011 – and please let me know in the comments/<a href="https://fosstodon.org/@MikeMahoney218">Mastodon</a>/<a href="https://bsky.app/profile/mikemahoney218.com">BlueSky</a> if you know any more details here.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I dropped <code>prealloc_two_brackets</code> from the benchmarks because it was performing ~the same as the one-bracket alternative.↩︎</p></li>
<li id="fn2"><p>Usual disclaimer that this is probably not a type of slowness that matters for your code, that you should look into moving computation to C++/Rust if you care about a few milliseconds execution time, and that the real benefits of *apply functions come from readability and their potential for parallelization, not speed.↩︎</p></li>
<li id="fn3"><p>The pre-allocated line is hidden by the <code>vapply()</code> line; they’re practically identical, and possibly also literally identical.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-08-29-allocations/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-08-29-allocations/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Yes, you can rescale Landsat images after compositing them</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-08-24-landsat-scaling/index.html</link>
  <description><![CDATA[ 




<p>Landsat data are distributed as unsigned 16-bit images, which need to be rescaled to get raw band values. The <a href="https://www.usgs.gov/faqs/how-do-i-use-a-scale-factor-landsat-level-2-science-products">rescaling formulas are dependent upon the band type and collection used</a>, but for current Collection 2 data boil down to two equations:</p>
<ul>
<li>For surface reflectance data, the formula is <img src="https://latex.codecogs.com/png.latex?X%20*%200.0000275%20-%200.2"> (where <img src="https://latex.codecogs.com/png.latex?X"> is the scaled band value)</li>
<li>For surface temperature data, the formula is <img src="https://latex.codecogs.com/png.latex?X%20*%200.00341802%20+%20149.0">.</li>
</ul>
<p>For my use-cases, I’m only rarely looking to download (and rescale) a single Landsat image. More often, I want to take all the Landsat images from a given timeframe (for instance, the growing season in the area I care about) and combine them into a composite image, taking the mean or median pixel value for that time period.</p>
<p>And every single time I go to do this, I need to figure out for the umpteenth time whether I can composite the images and <em>then</em> rescale them, or whether I need to rescale each individual image before making my composite. This is analytically solvable, and I think is pretty straightforward to solve – and, to spoil the rest of this post, the answer is that it doesn’t matter when you rescale. But I can never remember that, and I never trust my algebra when I try to prove that you can rescale before or after compositing either.</p>
<p>But this is an easy thing to simulate – just make a bunch of replications of compositing some number of 16-bit values, rescaling either before or after making the composite, and test for equality. That’s do-able in a few lines of R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">landsat_rescale <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000275</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mean, median),</span>
<span id="cb1-5">  \(f) {</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, {</span>
<span id="cb1-7">      values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65455</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb1-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">landsat_rescale</span>(values)),</span>
<span id="cb1-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">landsat_rescale</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(values))</span>
<span id="cb1-11">      )</span>
<span id="cb1-12">    }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>()</span>
<span id="cb1-14">  },</span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-16">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>It’s fine! You can rescale before or after compositing, whether you’re using a mean or a median composite. Do whatever is easiest for your workflow. Go in peace.</p>



 ]]></description>
  <category>R</category>
  <category>geospatial data</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-08-24-landsat-scaling/index.html</guid>
  <pubDate>Thu, 24 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-08-24-landsat-scaling/landsat.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A long digression about the word ‘vector’</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-08-07-vector/index.html</link>
  <description><![CDATA[ 




<p>In linguistics, there’s this concept called “semantic overload” that refers to when a word has more than one distinct meaning, and the appropriate meaning needs to be inferred from context. The classic example is when someone says they’re “running to the store”: we can guess from context that the speaker isn’t going for a jog, but we’re forced to guess.</p>
<p>Software engineering loves semantic overload. An “agile team” might be a vague way to say that you’re very responsive, or it might mean you work in tightly-defined two week sprints. A “transaction” might be a customer ordering from a website, or a database writing a new row. When you’re developing software that’s tackling new types of problems, there’s often not existing language that describes exactly what your tool is trying to do, and so instead programmers use existing terms and rely upon metaphors and analogies to adapt them for a new purpose. But because the meaning of these terms changes depending on the context they’re used in, this overload can be a real barrier to learning for new users who don’t yet have the context to understand the overloaded term. For example, I’ve worked with a number of new programmers who were afraid of opening “Issues” on GitHub projects, because in other contexts announcing an issue you have with someone’s work is an aggressive action.<sup>1</sup> Lacking the shared context makes it hard to decode what these terms mean.</p>
<p>And so, the term “vector”. For a bit of context, my undergraduate degree was in ecology – forest ecosystem science specifically, a specialization chosen in order to not need to take courses in Calculus 2 or Organic Chemistry. Which meant that, coming out of my degree, I had one course in physics, a handful in GIS and spatial data, and none in computer science. So when I learned that the base unit of R data, the result of running code like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2</code></pre>
</div>
</div>
<p>Was called a “vector”, I was frustrated. At this point, I had been told that:</p>
<ul>
<li><p>In physics, a “vector” was any line with a magnitude (“length”) and a direction.</p></li>
<li><p>In GIS, a “vector” was pretty much any type of data; points, lines, polygons, whatever.<sup>2</sup></p></li>
<li><p>In R and apparently computer science, a “vector” was quite literally any data whatsoever.</p></li>
</ul>
<p>This felt to me like another case of pointless complexity, of the word “vector” being overloaded beyond the point of usefulness – and I didn’t feel like the word “vector” was particularly useful in the first place.</p>
<p>It turns out, though, that I was just missing the context that linked these three meanings together. I wouldn’t get that context until I was in grad school, procrastinating by watching <a href="https://www.3blue1brown.com/topics/linear-algebra">3Blue1Brown’s excellent videos on the fundamentals of linear algebra</a>. I’m not nearly qualified to teach anything about linear algebra, and I don’t have the space nor the inclination to try to do so here – but I’m going to try and share the thing that gave me an “aha!” moment. To do that, I need to start off by getting really abstract.</p>
<p>First off, let’s say we’ve got some 2-dimensional plane, that looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We’ve got our X axis and our Y axis here, and both meet at the origin – the place where the X coordinate is 0, and the Y coordinate is 0. We’d say that the coordinates at that point are (0, 0).</p>
<p>Now let’s go back to our physics definition of a vector – any line with a known length and direction. We could draw one of those in this coordinate plane – say our line is a bit longer than 70 “units”, going from (0, 0) all the way to (50, 50):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"segment"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is how I was taught to think about vectors in those physics classes – arrows on some abstract plane. For instance, we could turn this into an acceleration vector by labeling these axes, so that our line is now charting speed over time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Speed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"segment"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If you change the axis labels to distance over time, you have a velocity vector instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"segment"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The meaning of the line is defined by the axis labels – by the actual coordinate plane your vector is in. Looking at our velocity vector, we can tell how far we’ve gone (position on the Y axis) for any given time (position on the X axis).</p>
<p>So if we use a different coordinate plane and relabel our axes to show “distance away from the origin”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"segment"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We get vectors in a spatial sense. Rather than showing distance at a given time, we’re now showing the position of our data – in this case, a linestring – in one direction when it’s at a given position in the other direction. Just like in physics, the actual meaning of this line depends on the coordinate plane – on the <em>coordinate reference system</em> of the data. The CRS of your data is a standardized way to define <em>where</em> your origin is, <em>what units</em> your distances are measured in, and <em>which direction</em> away from the origin you’re going.</p>
<p>And we can use spatial vector data to replace our physics vector. We just need to define a matrix containing the beginning and end coordinates of our line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">our_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-2">our_matrix</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    0    0
[2,]   50   50</code></pre>
</div>
</div>
<p>And then we can tell sf that it should understand that matrix as being a line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">our_line <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_linestring</span>(our_matrix)</span>
<span id="cb10-2">our_line</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>LINESTRING (0 0, 50 50)</code></pre>
</div>
</div>
<p>And voila, we have a spatial vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> our_line</span>
<span id="cb12-6">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>At each point along this line on our X axis, our line is a single, known position on the Y axis. If we only have one measurement of XY position – say, a single GPS measurement – then our line would be of length 0. We’d have a point instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(</span>
<span id="cb13-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb13-6">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>That point represents a single position, which we’d understand through our coordinate reference system as being a certain distance away from a reference point.</p>
<p>Similarly, this is what vectors in R are abstracting. Imagine that, instead of using sf to make this a spatial vector, we turned our matrix into a data frame and used that with ggplot2 instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">our_matrix <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance away from the origin in this direction"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Just like with sf, we’re representing vectors by the places they start and end. And because we’ve plotted this as a line, we’re able to tell the position of our data at each distance along either the X or Y axis, within this coordinate reference system.</p>
<p>Or take for instance the <code>age</code> vector inside the <code>Orange</code> data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">Orange<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  118  484  664 1004 1231 1372</code></pre>
</div>
</div>
<p>According to <code>?Orange</code>, this vector represents the age of the tree, in units of days since 1968-12-31. Similarly, the <code>circumference</code> vector is the circumference of each tree in millimeters. We can plot those vectors just as easily as our physics and our spatial vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(Orange, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age, circumference, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Tree)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1700</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">225</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-08-07-vector/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This graph is using an abstract coordinate system – instead of “meters away from the origin”, one axis is “distance in time from a reference date”, and the other is “distance in length from not existing at all”. But just like our physics vectors, each of these points represents a magnitude in some direction. Our <code>age</code> vector is a set of magnitudes along a time axis; our <code>circumference</code> vector a set of magnitudes along a length axis.</p>
<p>Because I didn’t have a ton of formal math education, I never made the connection across these three types of vectors, and never entirely understood that they were all different ways of understanding and representing position along a coordinate plane, under some coordinate reference system. Recognizing that these different versions of “vectors” are all sharing an underlying meaning made it a lot easier for me to understand what “vector data” actually meant, and to understand the semantic difference between vector and raster representations of the same data. Hopefully this digression makes things a bit clearer for someone else, as well.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This has been partially addressed by the newer Discussions feature.↩︎</p></li>
<li id="fn2"><p>Don’t worry, Mastodon commenter, I’m aware that rasters exist. The point is that my education here was incomplete.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-08-07-vector/index.html</guid>
  <pubDate>Mon, 07 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-08-07-vector/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>From the inbox: How can I get fold assignments from spatialsample?</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-06-06-spatialsample_splits/index.html</link>
  <description><![CDATA[ 




<p>In my inbox,<sup>1</sup> someone asks:<sup>2</sup></p>
<blockquote class="blockquote">
<p>I’m using <code>spatial_clustering_cv()</code> from spatialsample to do cross-validation. How can I get separate data frames with each split created by this function?</p>
</blockquote>
<p>I think this question is decently common, because a lot of the spatialsample documentation is written assuming that you’re familiar with rsample already, which is often not the case for people working with spatial data. The functions to do this sort of thing live in rsample, and aren’t (<a href="https://github.com/tidymodels/spatialsample/issues/143">currently</a>) re-exported by spatialsample, so it can be hard to find the right function.</p>
<p>First and foremost, let’s assume that you’ve got some object called <code>my_folds</code> created by <code>spatial_clustering_cv()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(spatialsample)</span>
<span id="cb1-2">my_folds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spatial_clustering_cv</span>(boston_canopy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-3">my_folds</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#  2-fold spatial cross-validation 
# A tibble: 2 × 2
  splits            id   
  &lt;list&gt;            &lt;chr&gt;
1 &lt;split [277/405]&gt; Fold1
2 &lt;split [405/277]&gt; Fold2</code></pre>
</div>
</div>
<p>The “my_folds” object that gets created should have a “splits” column, which is a list. Each element of that list contains your analysis and assessment sets.<sup>3</sup> To get a single split, use <code>rsample::get_rsplit()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">rsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rsplit</span>(my_folds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Analysis/Assess/Total&gt;
&lt;277/405/682&gt;</code></pre>
</div>
</div>
<p>To get just the analysis data for that fold, use <code>rsample::analysis()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">rsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rsplit</span>(my_folds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  rsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analysis</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 277 features and 18 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 755424.9 ymin: 2935616 xmax: 812069.7 ymax: 2970073
Projected CRS: NAD83 / Massachusetts Mainland (ftUS)
# A tibble: 277 × 19
   grid_id land_area canopy_gain canopy_loss canopy_no_change canopy_area_2014
   &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;
 1 AB-4      795045.      15323.       3126.           53676.           56802.
 2 AO-9      270153        6187.       1184.           26930.           28114.
 3 V-7       107890.        219.       3612.             240.            3852.
 4 X-4       848558.       8275.       1760.            6872.            8632.
 5 AC-4     2069814.      82201.      50944.          240161.          291104.
 6 AC-15    1175032.      24517.      24010.          111148.          135158.
 7 U-14     2690727.      69780.      51404.          263796.          315201.
 8 AQ-15     453368.      13971.       3401.          343677.          347077.
 9 Q-10      156688.       9237.       3094.           57327.           60421.
10 T-10      215340.      13984.       3947.           59539.           63487.
# ℹ 267 more rows
# ℹ 13 more variables: canopy_area_2019 &lt;dbl&gt;, change_canopy_area &lt;dbl&gt;,
#   change_canopy_percentage &lt;dbl&gt;, canopy_percentage_2014 &lt;dbl&gt;,
#   canopy_percentage_2019 &lt;dbl&gt;, change_canopy_absolute &lt;dbl&gt;,
#   mean_temp_morning &lt;dbl&gt;, mean_temp_evening &lt;dbl&gt;, mean_temp &lt;dbl&gt;,
#   mean_heat_index_morning &lt;dbl&gt;, mean_heat_index_evening &lt;dbl&gt;,
#   mean_heat_index &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [US_survey_foot]&gt;</code></pre>
</div>
</div>
<p>Similarly, to get just the assessment data for that fold, use <code>rsample::assessment()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rsplit</span>(my_folds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">  rsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assessment</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 405 features and 18 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 739826.9 ymin: 2908294 xmax: 781347.5 ymax: 2959751
Projected CRS: NAD83 / Massachusetts Mainland (ftUS)
# A tibble: 405 × 19
   grid_id land_area canopy_gain canopy_loss canopy_no_change canopy_area_2014
   &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;
 1 I-33      265813.       8849.      11795.           78677.           90472.
 2 H-10     2691490.      73098.      80362.          345823.          426185.
 3 Q-22     2648089.     122211.     154236.         1026632.         1180868.
 4 P-18     2690726.     110928.     113146.          915137.         1028283.
 5 J-29     2574479.      38069.      15530.         2388638.         2404168.
 6 G-28     2641525.      87024.      39246.         1202528.         1241774.
 7 M-23     2690727.      87621.     124032.          748742.          872774.
 8 M-9      2690727.      52443.      53467.          304239.          357706.
 9 S-15     2690728.      93787.     162118.          478257.          640375.
10 Q-21     2690727.      54712.     101816.         1359305.         1461121.
# ℹ 395 more rows
# ℹ 13 more variables: canopy_area_2019 &lt;dbl&gt;, change_canopy_area &lt;dbl&gt;,
#   change_canopy_percentage &lt;dbl&gt;, canopy_percentage_2014 &lt;dbl&gt;,
#   canopy_percentage_2019 &lt;dbl&gt;, change_canopy_absolute &lt;dbl&gt;,
#   mean_temp_morning &lt;dbl&gt;, mean_temp_evening &lt;dbl&gt;, mean_temp &lt;dbl&gt;,
#   mean_heat_index_morning &lt;dbl&gt;, mean_heat_index_evening &lt;dbl&gt;,
#   mean_heat_index &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [US_survey_foot]&gt;</code></pre>
</div>
</div>
<p>If you’re trying to get your original data, with a column indicating which fold each row belongs to, there’s not a provided function for that. Instead, what you can do is take the assessment set from each split (which is “what fold data is assigned to”), add a new column to it with the fold name, and then combine those assessment sets into a single data frame. I do this via the function:<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb9-2">  my_folds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits, </span>
<span id="cb9-3">  my_folds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id, </span>
<span id="cb9-4">  \(split, id) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(rsample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assessment</span>(split), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fold_name =</span> id)</span>
<span id="cb9-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-6">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 682 features and 19 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 739826.9 ymin: 2908294 xmax: 812069.7 ymax: 2970073
Projected CRS: NAD83 / Massachusetts Mainland (ftUS)
First 10 features:
   grid_id land_area canopy_gain canopy_loss canopy_no_change canopy_area_2014
1     I-33  265813.3    8848.818    11795.11         78676.56         90471.67
2     H-10 2691489.9   73098.168    80361.85        345823.19        426185.04
3     Q-22 2648088.6  122211.269   154236.43       1026631.85       1180868.27
4     P-18 2690726.1  110927.833   113145.85        915137.00       1028282.85
5     J-29 2574478.7   38068.676    15529.73       2388638.19       2404167.92
6     G-28 2641525.3   87024.318    39246.15       1202527.94       1241774.09
7     M-23 2690727.2   87620.730   124031.79        748742.13        872773.92
8      M-9 2690726.6   52443.164    53466.56        304239.49        357706.04
9     S-15 2690727.8   93786.589   162118.16        478257.33        640375.48
10    Q-21 2690727.2   54711.827   101815.82       1359305.11       1461120.93
   canopy_area_2019 change_canopy_area change_canopy_percentage
1          87525.38          -2946.293               -3.2565923
2         418921.35          -7263.685               -1.7043502
3        1148843.12         -32025.158               -2.7120009
4        1026064.83          -2218.014               -0.2157008
5        2426706.87          22538.944                0.9374946
6        1289552.26          47778.164                3.8475730
7         836362.86         -36411.060               -4.1718776
8         356682.65          -1023.393               -0.2860988
9         572043.92         -68331.566              -10.6705469
10       1414016.94         -47103.991               -3.2238256
   canopy_percentage_2014 canopy_percentage_2019 change_canopy_absolute
1                34.03579               32.92739            -1.10840701
2                15.83454               15.56466            -0.26987600
3                44.59323               43.38386            -1.20936883
4                38.21581               38.13338            -0.08243181
5                93.38465               94.26013             0.87547604
6                47.00974               48.81847             1.80873391
7                32.43636               31.08315            -1.35320518
8                13.29403               13.25600            -0.03803406
9                23.79934               21.25982            -2.53951988
10               54.30208               52.55148            -1.75060448
   mean_temp_morning mean_temp_evening mean_temp mean_heat_index_morning
1           74.26247          83.87540  90.85933                75.63458
2           74.64432          84.96917  91.71625                75.86767
3           73.19889          82.29358  89.70302                74.47757
4           73.77269          84.29003  91.26480                75.03802
5           72.26419          79.77278  88.70229                73.65608
6           73.60919          82.80297  90.33156                74.96955
7           74.24167          83.34713  90.41143                75.66013
8           76.74740          84.69933  91.96502                77.91048
9           75.18260          84.85431  92.00132                76.39949
10          73.37669          82.38064  90.59503                74.63029
   mean_heat_index_evening mean_heat_index fold_name
1                 89.71880        96.70939     Fold1
2                 89.88733        96.19667     Fold1
3                 87.34062        95.53811     Fold1
4                 88.93811        96.43569     Fold1
5                 81.32060        95.56059     Fold1
6                 88.47864        96.82653     Fold1
7                 89.23434        96.05418     Fold1
8                 90.02009        96.14348     Fold1
9                 89.91342        96.92160     Fold1
10                86.90021        96.23439     Fold1
                         geometry
1  MULTIPOLYGON (((752945.6 29...
2  MULTIPOLYGON (((751419.1 29...
3  MULTIPOLYGON (((763631.7 29...
4  MULTIPOLYGON (((763122.9 29...
5  MULTIPOLYGON (((753963.4 29...
6  MULTIPOLYGON (((749383.6 29...
7  MULTIPOLYGON (((758543.1 29...
8  MULTIPOLYGON (((758543.1 29...
9  MULTIPOLYGON (((767702.6 29...
10 MULTIPOLYGON (((764649.4 29...</code></pre>
</div>
</div>
<p>I think it would make sense for <code>get_rsplit()</code>, <code>analysis()</code>, and <code>assessment()</code> to get ported over to spatialsample, to make it a bit easier for the folks whose first point-of-entry into tidymodels work is via spatialsample. I’ve got a <a href="https://github.com/tidymodels/spatialsample/issues/143">GitHub issue</a> to remind me to look into that before the package’s next release.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I want to mention that I include a link to <a href="https://yihui.org/en/2017/08/so-gh-email/">Yihui Xie’s excellent blog post</a> in replies to help questions sent via email. I love seeing people use my packages, and I love helping people use them, but I don’t always have the time to give 1:1 help via email. If you post a question somewhere publicly, then other people might give an even better answer; if no one answers in a day or two, then email me the link, so I can answer it publicly and have a link to send the next person with the same question as you. That’s also why I turned this into a blog post – so that I can send others with the same question a pre-written answer!↩︎</p></li>
<li id="fn2"><p>Anonymized and heavily paraphrased.↩︎</p></li>
<li id="fn3"><p>Sometimes called training and testing, respectively – rsample uses the analysis/assessment terminology to make it clear that all of this data should be in your training set, and doesn’t touch your final held-out test set.↩︎</p></li>
<li id="fn4"><p>This is how spatialsample’s <code>autoplot()</code> methods do it, for instance.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>spatialsample</category>
  <category>tidymodels</category>
  <category>R packages</category>
  <category>geospatial data</category>
  <category>Tutorials</category>
  <guid>https://mm218.dev/posts/2023-06-06-spatialsample_splits/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-06-06-spatialsample_splits/map.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using in-line grouping to fit many models</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-04-01-fitting_models/index.html</link>
  <description><![CDATA[ 




<p>Tim Tiefenbach <a href="https://tim-tiefenbach.de/post/2023-dplyr-many-models/">has a post</a> on using dplyr and other tidymodels tools to fit many models in relatively few lines of code. Tim’s post walks through a lot of interesting functions for more complicated model fitting, which I’m not going to talk about at all. What I want to talk about is that I recently realized I don’t do much nesting in R anymore!</p>
<p>The building block in Tim’s post uses the new-ish <code>dplyr::nest_by()</code> to create a nested data frame, then fits models using the new <code>data</code> list column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>storms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest_by</span>(status) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(wind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> pressure, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data))</span>
<span id="cb1-5">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
# Rowwise:  status
  status                                data mod   
  &lt;fct&gt;                  &lt;list&lt;tibble[,12]&gt;&gt; &lt;list&gt;
1 disturbance                     [146 × 12] &lt;lm&gt;  
2 extratropical                 [2,068 × 12] &lt;lm&gt;  
3 hurricane                     [4,684 × 12] &lt;lm&gt;  
4 other low                     [1,405 × 12] &lt;lm&gt;  
5 subtropical depression          [151 × 12] &lt;lm&gt;  
6 subtropical storm               [292 × 12] &lt;lm&gt;  
7 tropical depression           [3,525 × 12] &lt;lm&gt;  
8 tropical storm                [6,684 × 12] &lt;lm&gt;  
9 tropical wave                   [111 × 12] &lt;lm&gt;  </code></pre>
</div>
</div>
<p>This is a pattern I used to use all the time<sup>1</sup> – my <a href="https://www.mm218.dev/posts/2019/03/">undergrad thesis</a> and <a href="https://www.mm218.dev/papers/mahoney_stella_2020.pdf">eventual first pub from the same</a> were built from strings of nesting and unnesting data and models. But over the years, I’ve realized that you can often get the same results using grouped data frames in the place of nested ones, and have shifted to using <code>dplyr::summarise()</code> and friends instead of nesting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>storms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb3-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(wind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> pressure, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()))),</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> status</span>
<span id="cb3-5">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 2
  status                 mod   
  &lt;fct&gt;                  &lt;list&gt;
1 tropical depression    &lt;lm&gt;  
2 tropical storm         &lt;lm&gt;  
3 extratropical          &lt;lm&gt;  
4 hurricane              &lt;lm&gt;  
5 subtropical storm      &lt;lm&gt;  
6 subtropical depression &lt;lm&gt;  
7 disturbance            &lt;lm&gt;  
8 other low              &lt;lm&gt;  
9 tropical wave          &lt;lm&gt;  </code></pre>
</div>
</div>
<p>Now, the obvious downside of using a grouped data frame instead of a nested one is that future function calls no longer have access to your raw data frame. The slightly less obvious downside is that the output of <code>dplyr::nest_by()</code> is a <em>rowwise</em> data frame, which makes it easy to pass our model objects directly to other functions like <code>broom::tidy()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>storms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest_by</span>(status) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(wind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> pressure, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data)),</span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>(mod))</span>
<span id="cb5-6">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 4
# Rowwise:  status
  status                                data mod    res             
  &lt;fct&gt;                  &lt;list&lt;tibble[,12]&gt;&gt; &lt;list&gt; &lt;list&gt;          
1 disturbance                     [146 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
2 extratropical                 [2,068 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
3 hurricane                     [4,684 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
4 other low                     [1,405 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
5 subtropical depression          [151 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
6 subtropical storm               [292 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
7 tropical depression           [3,525 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
8 tropical storm                [6,684 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;
9 tropical wave                   [111 × 12] &lt;lm&gt;   &lt;tibble [2 × 5]&gt;</code></pre>
</div>
</div>
<p>The outputs of the grouped data frame method are <em>not</em> rowwise data frames, which means we need to use another function to iterate through each element of <code>mod</code>. I usually use <code>purrr::map()</code> for this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>storms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(wind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> pressure, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()))),</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(mod, broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>glance),</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> status</span>
<span id="cb7-6">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  status                 mod    res              
  &lt;fct&gt;                  &lt;list&gt; &lt;list&gt;           
1 tropical depression    &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
2 tropical storm         &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
3 extratropical          &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
4 hurricane              &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
5 subtropical storm      &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
6 subtropical depression &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
7 disturbance            &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
8 other low              &lt;lm&gt;   &lt;tibble [1 × 12]&gt;
9 tropical wave          &lt;lm&gt;   &lt;tibble [1 × 12]&gt;</code></pre>
</div>
</div>
<p>Part of the reason I use <code>purrr</code> for this is that <code>purrr</code> provides plenty of other helper functions for working with list columns; for instance, I tend to use <code>purrr::chuck()</code> to extract model fit statistics:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>storms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(wind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> pressure, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()))),</span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(mod, broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>glance),</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rsquared =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(res, purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chuck, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r.squared"</span>),</span>
<span id="cb9-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> status</span>
<span id="cb9-7">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 4
  status                 mod    res               rsquared
  &lt;fct&gt;                  &lt;list&gt; &lt;list&gt;               &lt;dbl&gt;
1 tropical depression    &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.0369
2 tropical storm         &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.485 
3 extratropical          &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.631 
4 hurricane              &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.807 
5 subtropical storm      &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.473 
6 subtropical depression &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.214 
7 disturbance            &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.299 
8 other low              &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.332 
9 tropical wave          &lt;lm&gt;   &lt;tibble [1 × 12]&gt;   0.126 </code></pre>
</div>
</div>
<p>Anyway – there’s nothing better or worse (as far as I’m concerned) with either nesting or grouping for fitting many models; I just think it’s interesting that my personal style has shifted over time to use much more grouping, and much less nesting.</p>
<p>And as I said at the start, Tim’s post walks through a lot of interesting functions for more complicated model fitting, which I’m not going to talk about at all; <a href="https://tim-tiefenbach.de/post/2023-dplyr-many-models/">here’s the link again if you’re interested</a>.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Using <code>tidyr::nest()</code>, though.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Data science</category>
  <guid>https://mm218.dev/posts/2023-04-01-fitting_models/index.html</guid>
  <pubDate>Sat, 01 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-04-01-fitting_models/nests.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>waywiser is now a part of rOpenSci</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-03-21-waywiser-ropensci/index.html</link>
  <description><![CDATA[ 




<p>I’m thrilled to share that <a href="https://docs.ropensci.org/waywiser/">waywiser</a>, my R package focused on providing framework-agnostic (but tidymodels-friendly) methods for assessing models fit to spatial data,<sup>1</sup> has passed peer review and been accepted to <a href="https://ropensci.org/">rOpenSci</a>. As always, <a href="https://github.com/ropensci/software-review/issues/571">the review process</a> improved the package immensely, thanks to the thoughtful reviews of <a href="https://becarioprecario.github.io/">Virgilio Gómez-Rubio</a> and <a href="https://jakubnowosad.com/">Jakub Nowosad</a><sup>2</sup>, as well as the shepherding of <a href="https://www.r-rse.eu/">Anna Krystalli</a> and <a href="https://www.paulamoraga.com/">Paula Moraga</a> as editors.</p>
<p>As of Monday, the reviewed version has officially <a href="https://cran.r-project.org/package=waywiser">made its way to CRAN</a>. This is a <a href="https://docs.ropensci.org/waywiser/news/index.html#waywiser-030">huge update</a>, bringing in a ton of new functions and improving consistency and speed across the package, and I’m excited to have it officially released.</p>
<p>I’m also very excited to have put out a <a href="https://arxiv.org/abs/2303.11312">preprint describing the package</a>, which goes a bit deeper into the logic of why and how the package implements the features it does. This is my first solo-authored paper,<sup>3</sup> and by far and away the one with the most equations.<sup>4</sup> Despite both of those, I’m pretty pleased with how this paper turned out; I think it’s a useful addition to the package documentation for users who want a more thorough explication of the scholarly background of package features.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I use this terminology in a number of places throughout the documentation to try and emphasize that nothing about the models themselves need to be spatial. The models don’t need to incorporate spatial information at all for these methods to be useful. I’ll admit that it’s a bit clunky, though, and have a habit of lapsing back to “spatial models”.↩︎</p></li>
<li id="fn2"><p>Only a little intimidating having my package reviewed by the authors of two of the best books on using R for spatial analysis!↩︎</p></li>
<li id="fn3"><p>And frankly, I don’t intend to make it a habit. I highly appreciate working with collaborators, particularly with my current research group, and know that my work is usually better for having gone through multiple rounds of revisions before being released. I really missed that process while working on this paper!↩︎</p></li>
<li id="fn4"><p>23 numbered equations! My undergraduate degree is in ecology, where <a href="https://www.pnas.org/doi/abs/10.1073/pnas.1205259109">each additional equation per page is associated with 28% fewer citations</a>; four years ago I’d never have expected I’d be writing a paper that looks like this↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>waywiser</category>
  <category>Spatial</category>
  <category>Data science</category>
  <category>R packages</category>
  <guid>https://mm218.dev/posts/2023-03-21-waywiser-ropensci/index.html</guid>
  <pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to run R jobs across multiple (local) computers</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-03-03-parallel/index.html</link>
  <description><![CDATA[ 




<p>I’ve got a small homelab going at the moment, where in addition to my daily workstation I’ve also got a <a href="https://www.intel.com/content/www/us/en/products/details/nuc.html">NUC</a>, <a href="https://www.raspberrypi.org/">Raspberry Pi</a>, and <a href="https://www.synology.com/en-us/dsm">Synology NAS</a> running on my local network.<sup>1</sup> I primarily use these other machines as always-on servers and storage for things like <a href="../2020/05/">Telegraf, Influx and Grafana</a>, <a href="https://mealie.io/">mealie</a> and <a href="https://github.com/paperless-ngx/paperless-ngx">paperless</a>, but every so often it’s useful to run a long-running, high CPU job on the NUC, rather than tying up my main workstation. In those situations, I tend to use <a href="https://code.visualstudio.com/docs/remote/ssh">VS Code’s Remote Server</a>, at least for anything too complex for just ssh’ing into the NUC and running commands in the CLI.</p>
<p>At the moment I’m working with some <em>extremely</em> long-running jobs which will take a few weeks to complete and are blockers for my other work. As a result, I’m not really worried about tying up my main workstation, if it means the jobs will run faster – in fact, I’d like to tie up as many computers as possible, if it means the jobs execute any faster.</p>
<p>In the past, I’ve tried to manually split up jobs into smaller pieces and run them independently on the different computers. This is a pain. I’ve also shifted to using <a href="https://books.ropensci.org/targets/">targets</a> for most analysis projects these days, in order to take advantage of its automatic DAG creation and state-saving. Manual splitting-and-execution really undermines targets’ automatic orchestration abilities, so I’ve needed to find a better way to split workloads across computers.</p>
<p>It turns out that better way is extremely straightforward,<sup>2</sup> and I’m kicking myself for not finding it out earlier. Say you’ve got two machines with internal IP addresses of <code>192.168.1.001</code> and <code>192.168.1.002</code>, each with a user <code>some_user</code> who has <a href="https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server#step-2-copying-an-ssh-public-key-to-your-server">key-based access</a> to ssh into the other machine. If you’re using <a href="https://future.futureverse.org/">future</a>, setting a <a href="https://future.futureverse.org/articles/future-1-overview.html#controlling-how-futures-are-resolved">plan</a> to work across both computers takes two function calls:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parallel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makePSOCKcluster</span>(</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.002"</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">master =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.001"</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_user"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6">future<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(future<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>cluster, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> cl)</span></code></pre></div>
<p>And that’s it! Any future-enabled functions you use<sup>3</sup> will be split across your machines. For my targets-based workflow, I just run <code>targets::tar_make_future(workers = 2)</code> to split the jobs up.</p>
<p>To push things further, you can also run multiple clusters on a single machine:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parallel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makePSOCKcluster</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.002"</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">master =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.1.001"</span>,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_user"</span></span>
<span id="cb2-5">)</span>
<span id="cb2-6">future<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(future<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>cluster, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> cl)</span></code></pre></div>
<p>Or set jobs to use multiple cores, either by <a href="https://future.futureverse.org/index.html#nested-futures-and-evaluation-topologies">nesting futures</a> or using other forms of parallelism; for instance, my current job is primarily using <a href="https://github.com/rspatial/terra">terra</a> for a lot of raster predictions, so by setting <code>cores = future::availableCores() - 1</code> inside of <code>terra::predict()</code> I’m able to more-or-less max out both machines I’m running on.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>With external access via <a href="https://tailscale.com/">tailscale</a>.↩︎</p></li>
<li id="fn2"><p>For a value of straightforward that includes “maintaining multiple machines with similar-enough R environments, access to shared storage if necessary, and ssh access to each other on a private subnet”.↩︎</p></li>
<li id="fn3"><p>Highly recommend either <a href="https://future.apply.futureverse.org/">future.apply</a> or <a href="https://furrr.futureverse.org/">furrr</a> for ease-of-use, by the way.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Spatial</category>
  <category>Data science</category>
  <guid>https://mm218.dev/posts/2023-03-03-parallel/index.html</guid>
  <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>spatialsample 0.3.0 is now on CRAN</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2023-01-17-spatialsample/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mm218.dev/posts/2023-01-17-spatialsample/map.jpg" class="img-fluid figure-img" alt="A pretty map picture. It has no relevance to the article."></p>
<figcaption class="figure-caption">Photo by <a href="https://unsplash.com/@tjump">Nik Shuliahin 💛💙</a> on <a href="https://unsplash.com/photos/rkFIIE9PxH0">Unsplash</a></figcaption>
</figure>
</div>
<p>A new release of <a href="https://spatialsample.tidymodels.org/">spatialsample</a> – an R package extending the <a href="https://rsample.tidymodels.org/">rsample</a> framework to handle spatial resampling and cross-validation – just landed on CRAN. This post will describe the new breaking changes to the <code>spatial_clustering_cv()</code> function, as well as improvements made to how spatialsample handles repeated cross-validation, as well as improvements made to how spatialsample handles repeated cross-validation; for a full list of changes, check out <a href="https://spatialsample.tidymodels.org/news/index.html">this release’s NEWS entry</a></p>
<p>You can install the package from CRAN via:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spatialsample"</span>)</span></code></pre></div>
<section id="breaking-changes-to-spatial_clustering_cv" class="level2">
<h2 class="anchored" data-anchor-id="breaking-changes-to-spatial_clustering_cv">Breaking changes to <code>spatial_clustering_cv()</code></h2>
<p>The only (intentional!) breaking changes in this version are to the function <code>spatial_clustering_cv()</code>. This function is the oldest part of the package, and as such didn’t quite work like any of the other parts of the package: distance calculations sometimes used <code>dist()</code> instead of <code>sf::st_distance()</code>, distances used centroids instead of polygon edges, and trying to adapt this function to work with both <code>sf</code> and non-spatial data had made the internals a bit hairy.</p>
<p>As of <a href="https://rsample.tidymodels.org/news/index.html#rsample-111">rsample 1.1.1</a>, all of those non-spatial elements have been outsourced to <code>rsample::clustering_cv()</code>. If you’ve been using <code>spatial_clustering_cv()</code> for non-spatial data, this function is pretty close to a drop-in replacement, and you should migrate code over.</p>
<p>For spatial point data, <code>spatial_clustering_cv()</code> should work identically to past versions. For other geometry types however, note that distance calculations have now changed to use edge-to-edge distance between geometries, rather than centroids as in past versions. This means this function now uses distances in a way that’s more consistent with the rest of the package, and more consistent with what I personally view as best practice; two polygons sharing a lot of perimeter but with centroids separated by a decent margin are still likely to be highly similar.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(spatialsample)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spatial_clustering_cv</span>(boston_canopy, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#  2-fold spatial cross-validation 
# A tibble: 2 × 2
  splits            id   
  &lt;list&gt;            &lt;chr&gt;
1 &lt;split [277/405]&gt; Fold1
2 &lt;split [405/277]&gt; Fold2</code></pre>
</div>
</div>
</section>
<section id="repetition-repetition-repetition" class="level2">
<h2 class="anchored" data-anchor-id="repetition-repetition-repetition">Repetition, repetition, repetition<sup>1</sup></h2>
<p>I think the most exciting part of this release is that all spatialsample functions can now handle cross-validation with repeats. Simply pass your desired number of repeats to the <code>repeats</code> argument of any function.<sup>2</sup> The <code>autoplot()</code> function will now also automatically detect when you’ve used repeated cross-validation, and facet plots accordingly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">boston_canopy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spatial_block_cv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repeats =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2023-01-17-spatialsample/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="and-more" class="level2">
<h2 class="anchored" data-anchor-id="and-more">…and more!</h2>
<p>This is just scratching the surface of the new features and improvements in this release of spatialsample. You can see a full list in <a href="https://spatialsample.tidymodels.org/news/index.html">this release’s NEWS entry</a>.</p>
</section>
<section id="repetition" class="level2">
<h2 class="anchored" data-anchor-id="repetition">Repetition!</h2>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This joke I keep making is stolen from <a href="https://www.youtube.com/watch?v=g4GRYQHccLo">an old Kurt Braunohler video</a>. Or potentially, <a href="https://www.youtube.com/watch?v=Lvd6MBsiDBo">this other Kurt Braunohler video</a>. Or potentially, <a href="https://www.youtube.com/watch?v=g4GRYQHccLo">that first Kurt Braunohler video</a>.↩︎</p></li>
<li id="fn2"><p>Though note that spatialsample should error if repeats would return the same exact folds, such as when using <code>spatial_leave_location_out_cv()</code> with <code>v = NULL</code>. This behavior might change in the future if anyone complains, but for the modeling projects I’ve worked on, you’d only repeat identical CV folds by accident.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>spatialsample</category>
  <category>tidymodels</category>
  <category>R packages</category>
  <category>geospatial data</category>
  <guid>https://mm218.dev/posts/2023-01-17-spatialsample/index.html</guid>
  <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2023-01-17-spatialsample/map.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The tools I loved this year</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2022-12-12-tools/index.html</link>
  <description><![CDATA[ 




<p>One of the problems with open source development is that it’s the engineering equivalent of yelling into the void. Once your code is released, it’s really, really hard to know if anyone actually <em>uses</em> your tool. You might be able to track download numbers,<sup>1</sup> but there’s almost no way to tell how many of those downloads are actual users, and how many are from automated webscrapers, unofficial mirrors, or people who will try to use your software once before giving up and moving on to something else.<sup>2</sup> The best information about how many people use your software is, basically, how much you hear people talking about your software.</p>
<p>The problem is that, for the majority of open source projects, you’ll only hear people talk about your software when it’s pissing someone off. People don’t generally open issues on GitHub to tell you they love your work,<sup>3</sup> but rather to tell you that your work messed up in a big enough way that they’re going to spend time writing you letters about it. On my more meditative days, I’m able to look at issues as “someone cares enough about this project to spend their time telling me what they think would improve it”; on my more human ones, it can feel like someone sharing a public list of my mistakes.<sup>4</sup></p>
<p>So, with all this in mind and full up on the holiday spirit, I’m putting here a non-exhaustive list of the open-source tools that I loved this year, in no particular order, with a bent towards independent developers and smaller projects. These are <em>primarily</em> R projects, with a few other tools thrown in. Apologies to anyone I’ve forgotten; please know that you would not know I had ever used your software if I didn’t love it.</p>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">Workflow</h2>
<section id="targets-by-will-landau" class="level3">
<h3 class="anchored" data-anchor-id="targets-by-will-landau"><a href="https://books.ropensci.org/targets/">targets</a> by Will Landau</h3>
<p>Every so often you stumble across a project that makes it obviously, blindingly clear that you’ve been doing things wrong this whole time. Sometimes this means finding out that your efforts have been <em>wrong</em>, and you’ve been doing things <em>incorrectly</em> up until now; more exciting are the times you realize you haven’t been doing anything <em>wrong</em> per se, but could be doing things so much <em>better</em>.</p>
<p>The targets package is a peak example of the latter. The ways analyses are usually structured – cells of a single notebook, shell scripts that run a smattering of individual files, cludgy Make files – are <em>fine</em>, and serve a purpose, and there’s nothing <em>wrong</em> with them. There’s just a better way. And targets is that better way.</p>
<p>Rather than making you define the dependencies between your analysis steps yourself, targets will automatically calculate your project’s DAG and run your scripts in the order they need to be executed. If you change a script, or files change on disk, targets will invalidate only the steps that <em>need</em> to be re-run under the new conditions, and will run only those steps on your next go. This alone is incredible.</p>
<p>But targets does <em>so much more</em> than that. My personal needs have meant I’ve spent a lot of time with targets’ dynamic branching mechanism, where you can tell targets to execute a script against various combinations of input parameters, massively reducing the amount of actual code you need to write. There’s plenty of additional bells and whistles attached for dealing with distributed computing and cloud data environments. Plus, there’s tons of metrics and instrumentation available to watch your DAG as it executes, and the visuals produced by the package are <em>beautiful</em>:</p>
<p><img src="https://mm218.dev/posts/2022-12-12-tools/dag.png" class="img-fluid" alt="The targets graph for my most recent project. Functions and objects are connected by lines, diagramming the relationships between the steps in the project."></p>
<p>Part of the joy of targets is just how well-documented the package is. There’s a <a href="https://docs.ropensci.org/targets/">website</a>. There’s <a href="https://books.ropensci.org/targets/">an entire book</a>. Will has set an incredibly high bar for the rest of us.</p>
</section>
<section id="paperless-ng-by-jonas-winkler" class="level3">
<h3 class="anchored" data-anchor-id="paperless-ng-by-jonas-winkler"><a href="https://github.com/jonaswinkler/paperless-ng">Paperless-ng</a> by Jonas Winkler</h3>
<p>A docker container runs on a small server in my living room,<sup>5</sup> running my instance of Paperless-ng. When I save a new article to its “input” folder, the container OCR’s the document and moves it to a safe storage location, giving it the appropriate “tags” and making it accessible with the rest of the papers I’ve ever shown an interest in.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mm218.dev/posts/2022-12-12-tools/paperless.png" class="img-fluid figure-img" alt="A screenshot of the Paperless-ng user interface. A search for 'virtual environments' returned 174 results, shown as individual tiles with names and text previews."></p>
<figcaption class="figure-caption">I swear I’ve read (most of) these, I just am not <em>great</em> at updating my tags.</figcaption>
</figure>
</div>
<p>Paired with a VPN<sup>6</sup>, this means I can access my entire reference library from anywhere I go, from any device I own, with access to full-text search and any notes I’ve taken. This is one of the outright best hacks I have ever found for literature searches; I have access to a personally-curated Google Scholar filled with the sources that <em>I</em> have found relevant in the past, which makes finding the proper citation or reference document a breeze. If you’re a certain breed of nerdy academic, I can’t recommend it enough.</p>
</section>
<section id="future-and-progressr-by-henrik-bengtsson" class="level3">
<h3 class="anchored" data-anchor-id="future-and-progressr-by-henrik-bengtsson"><a href="https://future.futureverse.org/">future</a> and <a href="https://progressr.futureverse.org/">progressr</a> by Henrik Bengtsson</h3>
<p>My research group is split across folks who use Windows, MacOs, and Linux, and we need to share code a <em>lot</em>. That makes relying on system features, like multi-core processing via <code>mclapply()</code> in the parallel package, rather fraught.</p>
<p>Our solution to that problem is the future package, which provides functions for parallel computing which function across OSes. That alone merits a spot on this list. But even more than that, I’m a huge fan of the philosophy behind the future package.</p>
<p>Say for instance you’re developing a package – or writing a script for a coworker, or generally writing code that you will not be executing yourself. Your code looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">intense_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb1-2">  list_to_iterate_over <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...)</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb1-4">    list_to_iterate_over,</span>
<span id="cb1-5">    some_intensive_processing_function</span>
<span id="cb1-6">  )</span>
<span id="cb1-7">}</span></code></pre></div>
</div>
<p>You have no idea what else your user will be doing when you execute this. Maybe they’re busy running a more important job that needs most of their RAM, or maybe your script can safely use all their computing resources; while writing your function, you can’t know. For that reason, you don’t want to enable parallelism by default.</p>
<p>So what do you do? Let the user decide how parallel they want your code to be. If you write your code using packages from the future family, your users can use the <code>plan()</code> function to specify how much parallelism they’re comfortable with your script using. And gaining that amount of flexibility requires a one-line change:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">intense_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb2-2">  list_to_iterate_over <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...)</span>
<span id="cb2-3">  future.apply<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">future_lapply</span>(</span>
<span id="cb2-4">    list_to_iterate_over,</span>
<span id="cb2-5">    some_intensive_processing_function</span>
<span id="cb2-6">  )</span>
<span id="cb2-7">}</span></code></pre></div>
</div>
<p>You don’t need to write any logic around parallelization; all of that work gets outsourced to future.</p>
<p>For similar reasons, I really like the progressr package that’s part of the future ecosystem. Adding progress bars is as simple as specifying how many iterations you’re expecting to do, and when the bar should update:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">iteration_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb3-2">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> progressr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">progressor</span>(n)</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n),</span>
<span id="cb3-5">    \(x) {</span>
<span id="cb3-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"On iteration %f"</span>, x))</span>
<span id="cb3-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb3-8">    }</span>
<span id="cb3-9">  )</span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb3-11">}</span></code></pre></div>
</div>
<p>And then all the rest is left to the user. They can use whatever sort of progress bar they find useful, or none at all – you don’t need to be a part of that decision whatsoever:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">progressr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">handlers</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"txtprogressbar"</span>)</span>
<span id="cb4-2">progressr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_progress</span>(</span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iteration_function</span>()</span>
<span id="cb4-4">)</span></code></pre></div>
</div>
</section>
<section id="units-by-edzer-pebesma" class="level3">
<h3 class="anchored" data-anchor-id="units-by-edzer-pebesma"><a href="https://github.com/r-quantities/units">units</a> by Edzer Pebesma</h3>
<p>I’m gonna be honest, this is a weird one for the workflow section. But at the same time, the units package has become something I load in almost every project I work on. If you’re doing anything that <em>might</em> have unit conversions, this package can be a lifesaver.</p>
<p>For instance, let’s take an actual example from a project I worked on last week. Say you’ve run some samples through an <a href="https://en.wikipedia.org/wiki/Inductively_coupled_plasma_mass_spectrometry">ICP</a> machine, and need to calculate how much of a given analyte<sup>7</sup> is in your sample.</p>
<p>To do that, you’ve got three numbers: the concentration of the analyte in the solution you ran through the ICP in units of milligrams per liter, the amount of solution you used in units of milliliters, and the amount of sample in the solution in grams. Your target is the amount of analyte per amount of sample, in units of milligrams per gram. This is simple dimensional analysis<sup>8</sup>, and you set up your equations like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">concentration_mg_per_L <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.68</span></span>
<span id="cb5-2">sample_weight_g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.29</span></span>
<span id="cb5-3">solution_volume_mL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">53.54</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">solution_volume_L <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> solution_volume_mL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb5-6">concentration_mg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> concentration_mg_per_L <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> solution_volume_L</span>
<span id="cb5-7">concentration_mg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_weight_g</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 108.2014</code></pre>
</div>
</div>
<p>See the bug?</p>
<p>This is the sort of thing that can kill an analysis; silent logic bugs that <em>execute</em> fine but invalidate all of your results. If we tag our measurements with the units they represent, however, it’s a little bit easier to see what went wrong here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">concentration_mg_per_L <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.68</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg / L"</span>)</span>
<span id="cb7-2">sample_weight_g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.29</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>)</span>
<span id="cb7-3">solution_volume_mL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">53.54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mL"</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5">concentration_mg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> concentration_mg_per_L <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> solution_volume_mL</span>
<span id="cb7-6">concentration_mg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_weight_g</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.0001082014 [1/L/mL]</code></pre>
</div>
</div>
<p>The units package automatically converts between units, which means we can get rid of the manual conversion from milliliters of solution into liters. The package also tells us what units our results are in following calculation. Here we can see that our results aren’t in the units we’re after – we want a concentration (amount of analyte per unit of sample), not something measured in “1 per liter per milliliter”.</p>
<p>This tips us off that we made a mistake in our conversions somewhere, and indeed we flipped an operand – rather than <em>dividing</em> our concentration by the amount of solution, we need to multiply it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">concentration_mg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> concentration_mg_per_L <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> solution_volume_mL</span>
<span id="cb9-2">concentration_mg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_weight_g</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.0003101628 [1]</code></pre>
</div>
</div>
<p>That gives us our desired concentration: the number of grams of analyte per gram of sample. We can easily convert that to other forms using the units package; for instance, we tend to work with concentrations in units of milligram of analyte per gram of sample:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">(concentration_mg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_weight_g) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg / g"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.3101628 [mg/g]</code></pre>
</div>
</div>
<p>But we can be even more explicit than that. The units package lets us install our own units, which lets us tag what these numbers are a gram <em>of</em>. That means that we can automatically see that our results are natively a ratio of total analyte per unit of sample:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_unit</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analyte"</span>)</span>
<span id="cb13-2">units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_unit</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample"</span>)</span>
<span id="cb13-3">units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_unit</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solution"</span>)</span>
<span id="cb13-4"></span>
<span id="cb13-5">concentration_mg_per_L <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.68</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(mg * analyte) / (L * solution)"</span>)</span>
<span id="cb13-6">sample_weight_g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.29</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g * sample"</span>)</span>
<span id="cb13-7">solution_volume_mL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">53.54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mL * solution"</span>)</span>
<span id="cb13-8"></span>
<span id="cb13-9">concentration_mg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> concentration_mg_per_L <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> solution_volume_mL</span>
<span id="cb13-10"></span>
<span id="cb13-11">(concentration_mg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_weight_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.0003101628 [analyte/sample]</code></pre>
</div>
</div>
<p>And we can purposefully convert that to units of miligrams of analyte per grams of sample, in a very explicit way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">(concentration_mg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_weight_g) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-2">  units<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(mg * analyte) / (g * sample)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.3101628 [analyte*mg/g/sample]</code></pre>
</div>
</div>
<p>This erases an entire category of bugs, and has been <em>big</em> for me this year. The <a href="https://www.auckland.ac.nz/en/news/2017/12/05/problem-solving-pits-of-success.html">tidyverse</a> team <a href="https://twitter.com/alice_data/status/748200882043396096">talks a lot</a> about the idea of trying to help people fall into a <a href="https://blog.codinghorror.com/falling-into-the-pit-of-success/">“pit of success”</a> – that tools should make it very easy to do things right, and very hard to do things wrong. The units package feels like a fantastic example of the concept.<sup>9</sup></p>
</section>
</section>
<section id="visualization" class="level2">
<h2 class="anchored" data-anchor-id="visualization">Visualization</h2>
<section id="ggdist-by-matthew-kay" class="level3">
<h3 class="anchored" data-anchor-id="ggdist-by-matthew-kay"><a href="https://mjskay.github.io/ggdist/">ggdist</a> by Matthew Kay</h3>
<p>I think I am extremely, extremely late to the ggdist party. But that’s okay, because ggdist is extremely, extremely good; there’s plenty to party about.</p>
<p>I really feel like the best advertisement for this package is the <a href="https://mjskay.github.io/ggdist/">package website</a>; the basic demonstration graphs on that page are <em>beautiful</em>. The toy example plots look better than some<sup>10</sup> of my published figures.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(films) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-3">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb17-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> height, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> films, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> films)</span>
<span id="cb17-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-6">  ggdist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_slab</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-7">  ggdist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_dotsinterval</span>(</span>
<span id="cb17-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, </span>
<span id="cb17-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb17-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interval_alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb17-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">point_alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb17-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slab_size =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb17-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-14">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-15">  ggdist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_ggdist</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2022-12-12-tools/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>ggdist is a late addition to my arsenal; I used it to make graphs while revising a manuscript and was immediately hooked. The toolkit ggdist provides is incredibly flexible, enabling both dozens of radically different representations of the same data as well as the infinite infinitesimal tweaks that we all obsess over to get our graphs <em>just right</em>. I’m a huge fan so far.</p>
</section>
<section id="kableextra-by-hao-zhu" class="level3">
<h3 class="anchored" data-anchor-id="kableextra-by-hao-zhu"><a href="https://haozhu233.github.io/kableExtra/">kableExtra</a> by Hao Zhu</h3>
<p>A confession: every two months<sup>11</sup> I try a new package for making tables,<sup>12</sup> use it for a week, and immediately go back to kableExtra. There’s just really nothing like it for consistent, professional, beautiful, and <em>controllable</em> tables, particularly for PDF documents.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-3">  kableExtra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-4">  kableExtra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(</span>
<span id="cb18-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootstrap_options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"striped"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hover"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"condensed"</span>),</span>
<span id="cb18-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed_thead =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb18-7">  )</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-striped table-hover table-condensed table-sm small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th" style="text-align: left; position: sticky; top: 0; background-color: #FFFFFF;"></th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">mpg</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">cyl</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">disp</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">hp</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">drat</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">wt</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">qsec</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">vs</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">am</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">gear</th>
<th data-quarto-table-cell-role="th" style="text-align: right; position: sticky; top: 0; background-color: #FFFFFF;">carb</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Mazda RX4</td>
<td style="text-align: right;">21.0</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">160</td>
<td style="text-align: right;">110</td>
<td style="text-align: right;">3.90</td>
<td style="text-align: right;">2.620</td>
<td style="text-align: right;">16.46</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">Mazda RX4 Wag</td>
<td style="text-align: right;">21.0</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">160</td>
<td style="text-align: right;">110</td>
<td style="text-align: right;">3.90</td>
<td style="text-align: right;">2.875</td>
<td style="text-align: right;">17.02</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Datsun 710</td>
<td style="text-align: right;">22.8</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">108</td>
<td style="text-align: right;">93</td>
<td style="text-align: right;">3.85</td>
<td style="text-align: right;">2.320</td>
<td style="text-align: right;">18.61</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">Hornet 4 Drive</td>
<td style="text-align: right;">21.4</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">258</td>
<td style="text-align: right;">110</td>
<td style="text-align: right;">3.08</td>
<td style="text-align: right;">3.215</td>
<td style="text-align: right;">19.44</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Hornet Sportabout</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">360</td>
<td style="text-align: right;">175</td>
<td style="text-align: right;">3.15</td>
<td style="text-align: right;">3.440</td>
<td style="text-align: right;">17.02</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="even">
<td style="text-align: left;">Valiant</td>
<td style="text-align: right;">18.1</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">225</td>
<td style="text-align: right;">105</td>
<td style="text-align: right;">2.76</td>
<td style="text-align: right;">3.460</td>
<td style="text-align: right;">20.22</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Column widths! Consistent APIs to control header rows, grouping rows, data rows! Consistent APIs to control columns! Consistent APIs to control individual cells! kableExtra is a well-designed package. Plus, kableExtra ships with <a href="https://haozhu233.github.io/kableExtra/"><em>incredible</em> documentation</a>, which is extremely easy to search; my experience is that this package is written the way that you intuitively <em>want</em> a table-making package to be written. Every table in every paper I’ve written<sup>13</sup> has been run through kableExtra, and I’m expecting that trend to continue going forward.</p>
</section>
<section id="ggsflabel-by-hiroaki-yutani" class="level3">
<h3 class="anchored" data-anchor-id="ggsflabel-by-hiroaki-yutani"><a href="https://github.com/yutannihilation/ggsflabel">ggsflabel</a> by Hiroaki Yutani</h3>
<p><a href="https://twitter.com/TheMapAddict/status/1514056934407774216">Putting labels</a> on <a href="https://twitter.com/MatthewHMalone/status/1524369593632014336">maps</a> is a <a href="https://twitter.com/MatthewHMalone/status/1529170399640133633">recurring meme</a> among <a href="https://twitter.com/pokateo_/status/1526885811651612672">GIS users</a>. This is one of those things that feels like it should not be that hard, and turns out to actually be impossible.</p>
<p>But somehow, ggsflabel gets it… right? Almost every time? It’s magic. There’s literally no other explanation than magic. You could sell this to any university with an ArcMap subscription for thousands of dollars, but instead I installed it for free from GitHub.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_sf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape/nc.shp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>))</span>
<span id="cb19-2"></span>
<span id="cb19-3">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(nc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-4">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-5">  ggsflabel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf_label_repel</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> NAME), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2022-12-12-tools/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="ggspatial-by-dewey-dunnington" class="level3">
<h3 class="anchored" data-anchor-id="ggspatial-by-dewey-dunnington"><a href="https://github.com/paleolimbot/ggspatial">ggspatial</a> by Dewey Dunnington</h3>
<p>Just like label placement, every other part of making a map is surprisingly hard. Making coordinate reference systems play nicely with plotting libraries is hard, adding directionally-aware elements to a map is hard, adding scale bars and other distance-aware elements to a map is hard.</p>
<p>The ggspatial package makes it easier. My research group uses it extensively for our north arrows and scale bars, but the entire package is a gem. It solves a problem and does it well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_sf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape/nc.shp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>))</span>
<span id="cb20-2"></span>
<span id="cb20-3">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(nc) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-4">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-5">  ggspatial<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotation_north_arrow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">location =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"br"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-6">  ggspatial<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotation_scale</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2022-12-12-tools/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="patchwork-by-thomas-lin-pedersen" class="level3">
<h3 class="anchored" data-anchor-id="patchwork-by-thomas-lin-pedersen"><a href="https://patchwork.data-imaginist.com/">patchwork</a> by Thomas Lin Pedersen</h3>
<p>For the longest time, it was surprisingly tricky to create multi-panel plots in R. The implementations that did exist required you to think a <em>little</em> bit too much about how R thinks about drawing graphics, which has never been a strong suit of mine. Dealing with legends and other annotations was also often a pain.</p>
<p>Enter patchwork, which makes combining plot objects together an absolute breeze:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(patchwork)</span>
<span id="cb21-2"></span>
<span id="cb21-3">p1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(Orange, ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age, circumference, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Tree)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-4">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span>
<span id="cb21-5"></span>
<span id="cb21-6">p2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mtcars, ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(wt, drat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-7">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb21-8"></span>
<span id="cb21-9">p1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_annotation</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag_levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> </span>
<span id="cb21-11">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.tag =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2022-12-12-tools/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Just about all of my multi-panel figures are made with patchwork these days, because I find it to be exactly as flexible as I need for my visuals. Perhaps the best compliment I can give patchwork is that I barely ever need to think about it – when I need to create multi-panel graphs, I load patchwork and then things Just Work from there.</p>
</section>
</section>
<section id="spatial" class="level2">
<h2 class="anchored" data-anchor-id="spatial">Spatial</h2>
<section id="terra-by-robert-hijmans" class="level3">
<h3 class="anchored" data-anchor-id="terra-by-robert-hijmans"><a href="https://github.com/rspatial/terra">terra</a> by Robert Hijmans</h3>
<p>I’m not going to lie: I was dreading <a href="https://r-spatial.org//r/2022/04/12/evolution.html">the R spatial migration</a>. I have <em>so many</em> legacy projects relying on raster and friends,<sup>14</sup> and was expecting the transition to be an incredible headache without bringing any real benefits to my work.</p>
<p>I could not have been more wrong. Switching workloads to terra has been a <em>fantastic</em> investment across our research group. The terra package is faster than raster, and benefits from over a decade<sup>15</sup> of lessons learned from the raster package. The breadth of operations implemented is incredible as well; a weekly conversation in my lab involves someone<sup>16</sup> asking “how do I do X?”, where X is some complex calculation that would be incredibly difficult to implement, and someone<sup>17</sup> answering “oh, use this one-liner from terra.”</p>
<p>The terra package implements the functions you <em>expect</em> for a raster toolkit, with the names you <em>expect</em> for a raster toolkit, which work in the way you <em>expect</em> for a raster toolkit. For a relatively new package (the first CRAN release was in 2020), terra <em>feels</em> incredibly mature, and is an absolute joy to work with.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">loi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tmaptools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geocode_OSM</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hyampom California"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coords</span>
<span id="cb22-2">loi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> loi[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> loi[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>]])</span>
<span id="cb22-3">loi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>(loi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coords =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>)</span>
<span id="cb22-4">loi_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb22-5">output_tiles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> terrainr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_tiles</span>(</span>
<span id="cb22-6">  terrainr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_bbox_side_length</span>(loi, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>),</span>
<span id="cb22-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resolution =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb22-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_prefix =</span> loi_file</span>
<span id="cb22-9">)</span>
<span id="cb22-10"></span>
<span id="cb22-11">terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rast</span>(output_tiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>elevation) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-12">  terra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mm218.dev/posts/2022-12-12-tools/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="gdal-by-frank-warmerdam-even-rouault-and-others" class="level3">
<h3 class="anchored" data-anchor-id="gdal-by-frank-warmerdam-even-rouault-and-others"><a href="https://gdal.org/">GDAL</a> by Frank Warmerdam, Even Rouault, and others</h3>
<p>For me, 2022 was the year of CLI GDAL commands. I have now written two papers entirely on the back of shell scripts calling <code>gdal_calc</code> and <code>gdalwarp</code>.</p>
<p>For those with normal hobbies, GDAL is a software library that describes itself as a “translator library” between raster and vector formats. In practice, however, GDAL is a full-featured raster toolkit with pretty decent vector support; a huge amount of common raster operations can be run by chaining together GDAL commands. And that’s huge, because GDAL is <em>fast</em> and can handle much, much larger data than R can.</p>
<p>Recommending GDAL to people who work with spatial data is a little bit like recommending breathing air,<sup>18</sup> given its dominant position in the spatial software ecosystem. But still, this year in particular, I found myself really, really appreciating having this tool at my disposal.</p>
</section>
<section id="sf-by-edzer-pebesma" class="level3">
<h3 class="anchored" data-anchor-id="sf-by-edzer-pebesma"><a href="https://r-spatial.github.io/sf/">sf</a> by Edzer Pebesma</h3>
<p>Perhaps unsurprisingly, the sf package continues to be an absolute delight. sf is the 14th most popular package when counting CRAN downloads; if you work with spatial data, you know about sf. Heck, odds are, if you don’t work with spatial data, you probably also know about sf. I used it in the last three code examples, because it is that core to how I think about doing spatial data analysis in R.</p>
<p>sf is another package that has, with shocking regularity, already implemented the thing you’re trying to do. The dplyr integration is fantastic; the ggplot2 integration is fantastic; the ability to call directly to GDAL is fantastic. I remain a huge fan.</p>
</section>
<section id="landscapemetrics-by-maximilian-hesselbarth-et-al." class="level3">
<h3 class="anchored" data-anchor-id="landscapemetrics-by-maximilian-hesselbarth-et-al."><a href="https://r-spatialecology.github.io/landscapemetrics/">landscapemetrics</a> by Maximilian Hesselbarth et al.</h3>
<p>Imagine, if you will, that everyone – quite literally every single person – in your field uses tool X. X is mostly focused on calculating statistics, and because of its dominance most of those statistics are known primarily as “the X set of statistics”. Most people in your field don’t know how to calculate the statistics without X and aren’t particularly interested in trying; a “correct” statistic is one that agrees with tool X.</p>
<p>Now, imagine tool X is closed-source, only runs on Windows, and was first released in 1995, so doesn’t exactly integrate with other software. In order to address those drawbacks, a team of scientists develop an R package that calculates the same statistics as X. This is already incredibly impressive; I cannot stress enough that <em>everyone</em> uses X and expects your results to match it <em>exactly</em>, and sometimes you just can’t figure out how to precisely match the closed-source Windows-only software. This was a big job.</p>
<p>Now imagine that two years later, the person who wrote tool X retires and every trace of tool X is erased from the internet. This suddenly becomes a <em>much bigger job</em>.</p>
<p>That’s, as best as I can tell from the outside, what happened to the team behind landscapemetrics. FRAGSTATS existed and was <em>the</em> standard reference for a whole boat of statistics;<sup>19</sup> landscapemetrics provided an open-source implementation; FRAGSTATS suddenly no longer existed. I don’t want to sound like I’m criticizing FRAGSTATS here – for a very long time, that software provided an incredible service for free to a huge number of researchers, and I don’t think releasing something on the Internet creates an infinite obligation to make sure the download links never expire.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">landscapemetrics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_lsm</span>(landscapemetrics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>landscape, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"patch"</span>)</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["layer"],"name":[1],"type":["int"],"align":["right"]},{"label":["level"],"name":[2],"type":["chr"],"align":["left"]},{"label":["class"],"name":[3],"type":["int"],"align":["right"]},{"label":["id"],"name":[4],"type":["int"],"align":["right"]},{"label":["metric"],"name":[5],"type":["chr"],"align":["left"]},{"label":["value"],"name":[6],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"patch","3":"1","4":"1","5":"area","6":"0.00010000"},{"1":"1","2":"patch","3":"1","4":"2","5":"area","6":"0.00050000"},{"1":"1","2":"patch","3":"1","4":"3","5":"area","6":"0.01480000"},{"1":"1","2":"patch","3":"1","4":"4","5":"area","6":"0.00010000"},{"1":"1","2":"patch","3":"1","4":"5","5":"area","6":"0.00010000"},{"1":"1","2":"patch","3":"1","4":"6","5":"area","6":"0.00140000"},{"1":"1","2":"patch","3":"1","4":"7","5":"area","6":"0.00030000"},{"1":"1","2":"patch","3":"1","4":"8","5":"area","6":"0.00050000"},{"1":"1","2":"patch","3":"1","4":"9","5":"area","6":"0.00010000"},{"1":"1","2":"patch","3":"2","4":"10","5":"area","6":"0.00350000"},{"1":"1","2":"patch","3":"2","4":"11","5":"area","6":"0.00020000"},{"1":"1","2":"patch","3":"2","4":"12","5":"area","6":"0.00020000"},{"1":"1","2":"patch","3":"2","4":"13","5":"area","6":"0.00980000"},{"1":"1","2":"patch","3":"2","4":"14","5":"area","6":"0.00020000"},{"1":"1","2":"patch","3":"2","4":"15","5":"area","6":"0.00010000"},{"1":"1","2":"patch","3":"2","4":"16","5":"area","6":"0.00240000"},{"1":"1","2":"patch","3":"2","4":"17","5":"area","6":"0.00010000"},{"1":"1","2":"patch","3":"2","4":"18","5":"area","6":"0.00030000"},{"1":"1","2":"patch","3":"2","4":"19","5":"area","6":"0.00030000"},{"1":"1","2":"patch","3":"2","4":"20","5":"area","6":"0.00570000"},{"1":"1","2":"patch","3":"2","4":"21","5":"area","6":"0.00040000"},{"1":"1","2":"patch","3":"2","4":"22","5":"area","6":"0.00070000"},{"1":"1","2":"patch","3":"2","4":"23","5":"area","6":"0.00030000"},{"1":"1","2":"patch","3":"3","4":"24","5":"area","6":"0.04570000"},{"1":"1","2":"patch","3":"3","4":"25","5":"area","6":"0.00090000"},{"1":"1","2":"patch","3":"3","4":"26","5":"area","6":"0.00030000"},{"1":"1","2":"patch","3":"3","4":"27","5":"area","6":"0.00100000"},{"1":"1","2":"patch","3":"1","4":"1","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"cai","6":"47.97297297"},{"1":"1","2":"patch","3":"1","4":"4","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"cai","6":"14.28571429"},{"1":"1","2":"patch","3":"1","4":"7","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"8","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"9","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"cai","6":"31.42857143"},{"1":"1","2":"patch","3":"2","4":"11","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"13","5":"cai","6":"44.89795918"},{"1":"1","2":"patch","3":"2","4":"14","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"cai","6":"16.66666667"},{"1":"1","2":"patch","3":"2","4":"17","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"19","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"20","5":"cai","6":"49.12280702"},{"1":"1","2":"patch","3":"2","4":"21","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"cai","6":"14.28571429"},{"1":"1","2":"patch","3":"2","4":"23","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"24","5":"cai","6":"49.23413567"},{"1":"1","2":"patch","3":"3","4":"25","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"26","5":"cai","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"27","5":"cai","6":"10.00000000"},{"1":"1","2":"patch","3":"1","4":"1","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"1","4":"2","5":"circle","6":"0.62551778"},{"1":"1","2":"patch","3":"1","4":"3","5":"circle","6":"0.78050151"},{"1":"1","2":"patch","3":"1","4":"4","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"1","4":"5","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"1","4":"6","5":"circle","6":"0.55436616"},{"1":"1","2":"patch","3":"1","4":"7","5":"circle","6":"0.61802814"},{"1":"1","2":"patch","3":"1","4":"8","5":"circle","6":"0.51029248"},{"1":"1","2":"patch","3":"1","4":"9","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"2","4":"10","5":"circle","6":"0.57959072"},{"1":"1","2":"patch","3":"2","4":"11","5":"circle","6":"0.49070418"},{"1":"1","2":"patch","3":"2","4":"12","5":"circle","6":"0.68169011"},{"1":"1","2":"patch","3":"2","4":"13","5":"circle","6":"0.81122924"},{"1":"1","2":"patch","3":"2","4":"14","5":"circle","6":"0.49070418"},{"1":"1","2":"patch","3":"2","4":"15","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"2","4":"16","5":"circle","6":"0.68497166"},{"1":"1","2":"patch","3":"2","4":"17","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"2","4":"18","5":"circle","6":"0.52253517"},{"1":"1","2":"patch","3":"2","4":"19","5":"circle","6":"0.52253517"},{"1":"1","2":"patch","3":"2","4":"20","5":"circle","6":"0.53165556"},{"1":"1","2":"patch","3":"2","4":"21","5":"circle","6":"0.36338023"},{"1":"1","2":"patch","3":"2","4":"22","5":"circle","6":"0.38296853"},{"1":"1","2":"patch","3":"2","4":"23","5":"circle","6":"0.61802814"},{"1":"1","2":"patch","3":"3","4":"24","5":"circle","6":"0.66587975"},{"1":"1","2":"patch","3":"3","4":"25","5":"circle","6":"0.56859648"},{"1":"1","2":"patch","3":"3","4":"26","5":"circle","6":"0.61802814"},{"1":"1","2":"patch","3":"3","4":"27","5":"circle","6":"0.49370004"},{"1":"1","2":"patch","3":"1","4":"1","5":"contig","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"contig","6":"0.33333333"},{"1":"1","2":"patch","3":"1","4":"3","5":"contig","6":"0.76126126"},{"1":"1","2":"patch","3":"1","4":"4","5":"contig","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"contig","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"contig","6":"0.59523810"},{"1":"1","2":"patch","3":"1","4":"7","5":"contig","6":"0.22222222"},{"1":"1","2":"patch","3":"1","4":"8","5":"contig","6":"0.43333333"},{"1":"1","2":"patch","3":"1","4":"9","5":"contig","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"contig","6":"0.69047619"},{"1":"1","2":"patch","3":"2","4":"11","5":"contig","6":"0.16666667"},{"1":"1","2":"patch","3":"2","4":"12","5":"contig","6":"0.08333333"},{"1":"1","2":"patch","3":"2","4":"13","5":"contig","6":"0.76190476"},{"1":"1","2":"patch","3":"2","4":"14","5":"contig","6":"0.16666667"},{"1":"1","2":"patch","3":"2","4":"15","5":"contig","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"contig","6":"0.62500000"},{"1":"1","2":"patch","3":"2","4":"17","5":"contig","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"contig","6":"0.27777778"},{"1":"1","2":"patch","3":"2","4":"19","5":"contig","6":"0.27777778"},{"1":"1","2":"patch","3":"2","4":"20","5":"contig","6":"0.79239766"},{"1":"1","2":"patch","3":"2","4":"21","5":"contig","6":"0.41666667"},{"1":"1","2":"patch","3":"2","4":"22","5":"contig","6":"0.52380952"},{"1":"1","2":"patch","3":"2","4":"23","5":"contig","6":"0.22222222"},{"1":"1","2":"patch","3":"3","4":"24","5":"contig","6":"0.78482859"},{"1":"1","2":"patch","3":"3","4":"25","5":"contig","6":"0.50000000"},{"1":"1","2":"patch","3":"3","4":"26","5":"contig","6":"0.22222222"},{"1":"1","2":"patch","3":"3","4":"27","5":"contig","6":"0.55000000"},{"1":"1","2":"patch","3":"1","4":"1","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"core","6":"0.00710000"},{"1":"1","2":"patch","3":"1","4":"4","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"core","6":"0.00020000"},{"1":"1","2":"patch","3":"1","4":"7","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"8","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"9","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"core","6":"0.00110000"},{"1":"1","2":"patch","3":"2","4":"11","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"13","5":"core","6":"0.00440000"},{"1":"1","2":"patch","3":"2","4":"14","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"core","6":"0.00040000"},{"1":"1","2":"patch","3":"2","4":"17","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"19","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"20","5":"core","6":"0.00280000"},{"1":"1","2":"patch","3":"2","4":"21","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"core","6":"0.00010000"},{"1":"1","2":"patch","3":"2","4":"23","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"24","5":"core","6":"0.02250000"},{"1":"1","2":"patch","3":"3","4":"25","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"26","5":"core","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"27","5":"core","6":"0.00010000"},{"1":"1","2":"patch","3":"1","4":"1","5":"enn","6":"7.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"enn","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"enn","6":"2.82842712"},{"1":"1","2":"patch","3":"1","4":"4","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"enn","6":"2.82842712"},{"1":"1","2":"patch","3":"1","4":"7","5":"enn","6":"4.12310563"},{"1":"1","2":"patch","3":"1","4":"8","5":"enn","6":"4.12310563"},{"1":"1","2":"patch","3":"1","4":"9","5":"enn","6":"4.24264069"},{"1":"1","2":"patch","3":"2","4":"10","5":"enn","6":"4.47213595"},{"1":"1","2":"patch","3":"2","4":"11","5":"enn","6":"4.47213595"},{"1":"1","2":"patch","3":"2","4":"12","5":"enn","6":"3.16227766"},{"1":"1","2":"patch","3":"2","4":"13","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"2","4":"14","5":"enn","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"enn","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"17","5":"enn","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"enn","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"19","5":"enn","6":"2.82842712"},{"1":"1","2":"patch","3":"2","4":"20","5":"enn","6":"5.83095189"},{"1":"1","2":"patch","3":"2","4":"21","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"enn","6":"2.82842712"},{"1":"1","2":"patch","3":"2","4":"23","5":"enn","6":"3.16227766"},{"1":"1","2":"patch","3":"3","4":"24","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"3","4":"25","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"3","4":"26","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"3","4":"27","5":"enn","6":"2.00000000"},{"1":"1","2":"patch","3":"1","4":"1","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"frac","6":"1.36521239"},{"1":"1","2":"patch","3":"1","4":"3","5":"frac","6":"1.39327285"},{"1":"1","2":"patch","3":"1","4":"4","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"frac","6":"1.21970667"},{"1":"1","2":"patch","3":"1","4":"7","5":"frac","6":"1.26185951"},{"1":"1","2":"patch","3":"1","4":"8","5":"frac","6":"1.13864688"},{"1":"1","2":"patch","3":"1","4":"9","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"frac","6":"1.26642554"},{"1":"1","2":"patch","3":"2","4":"11","5":"frac","6":"1.16992500"},{"1":"1","2":"patch","3":"2","4":"12","5":"frac","6":"2.00000000"},{"1":"1","2":"patch","3":"2","4":"13","5":"frac","6":"1.31753383"},{"1":"1","2":"patch","3":"2","4":"14","5":"frac","6":"1.16992500"},{"1":"1","2":"patch","3":"2","4":"15","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"frac","6":"1.30862575"},{"1":"1","2":"patch","3":"2","4":"17","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"frac","6":"1.26185951"},{"1":"1","2":"patch","3":"2","4":"19","5":"frac","6":"1.26185951"},{"1":"1","2":"patch","3":"2","4":"20","5":"frac","6":"1.13903334"},{"1":"1","2":"patch","3":"2","4":"21","5":"frac","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"frac","6":"1.12915007"},{"1":"1","2":"patch","3":"2","4":"23","5":"frac","6":"1.26185951"},{"1":"1","2":"patch","3":"3","4":"24","5":"frac","6":"1.45833110"},{"1":"1","2":"patch","3":"3","4":"25","5":"frac","6":"1.26185951"},{"1":"1","2":"patch","3":"3","4":"26","5":"frac","6":"1.26185951"},{"1":"1","2":"patch","3":"3","4":"27","5":"frac","6":"1.20411998"},{"1":"1","2":"patch","3":"1","4":"1","5":"gyrate","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"gyrate","6":"1.00015229"},{"1":"1","2":"patch","3":"1","4":"3","5":"gyrate","6":"8.55192604"},{"1":"1","2":"patch","3":"1","4":"4","5":"gyrate","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"gyrate","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"gyrate","6":"1.63148582"},{"1":"1","2":"patch","3":"1","4":"7","5":"gyrate","6":"0.66666667"},{"1":"1","2":"patch","3":"1","4":"8","5":"gyrate","6":"0.84780148"},{"1":"1","2":"patch","3":"1","4":"9","5":"gyrate","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"gyrate","6":"2.49548945"},{"1":"1","2":"patch","3":"2","4":"11","5":"gyrate","6":"0.50000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"gyrate","6":"0.70710678"},{"1":"1","2":"patch","3":"2","4":"13","5":"gyrate","6":"6.36373298"},{"1":"1","2":"patch","3":"2","4":"14","5":"gyrate","6":"0.50000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"gyrate","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"gyrate","6":"2.51028194"},{"1":"1","2":"patch","3":"2","4":"17","5":"gyrate","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"gyrate","6":"0.65403884"},{"1":"1","2":"patch","3":"2","4":"19","5":"gyrate","6":"0.65403884"},{"1":"1","2":"patch","3":"2","4":"20","5":"gyrate","6":"3.17066816"},{"1":"1","2":"patch","3":"2","4":"21","5":"gyrate","6":"0.70710678"},{"1":"1","2":"patch","3":"2","4":"22","5":"gyrate","6":"0.97479327"},{"1":"1","2":"patch","3":"2","4":"23","5":"gyrate","6":"0.66666667"},{"1":"1","2":"patch","3":"3","4":"24","5":"gyrate","6":"11.23638380"},{"1":"1","2":"patch","3":"3","4":"25","5":"gyrate","6":"1.23682432"},{"1":"1","2":"patch","3":"3","4":"26","5":"gyrate","6":"0.66666667"},{"1":"1","2":"patch","3":"3","4":"27","5":"gyrate","6":"1.24202906"},{"1":"1","2":"patch","3":"1","4":"1","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"ncore","6":"3.00000000"},{"1":"1","2":"patch","3":"1","4":"4","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"ncore","6":"2.00000000"},{"1":"1","2":"patch","3":"1","4":"7","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"8","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"1","4":"9","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"ncore","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"11","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"13","5":"ncore","6":"2.00000000"},{"1":"1","2":"patch","3":"2","4":"14","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"ncore","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"17","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"19","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"20","5":"ncore","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"21","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"ncore","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"23","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"24","5":"ncore","6":"11.00000000"},{"1":"1","2":"patch","3":"3","4":"25","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"26","5":"ncore","6":"0.00000000"},{"1":"1","2":"patch","3":"3","4":"27","5":"ncore","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"1","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"para","6":"2.40000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"para","6":"0.87837838"},{"1":"1","2":"patch","3":"1","4":"4","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"para","6":"1.42857143"},{"1":"1","2":"patch","3":"1","4":"7","5":"para","6":"2.66666667"},{"1":"1","2":"patch","3":"1","4":"8","5":"para","6":"2.00000000"},{"1":"1","2":"patch","3":"1","4":"9","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"para","6":"1.08571429"},{"1":"1","2":"patch","3":"2","4":"11","5":"para","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"13","5":"para","6":"0.83673469"},{"1":"1","2":"patch","3":"2","4":"14","5":"para","6":"3.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"para","6":"1.33333333"},{"1":"1","2":"patch","3":"2","4":"17","5":"para","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"para","6":"2.66666667"},{"1":"1","2":"patch","3":"2","4":"19","5":"para","6":"2.66666667"},{"1":"1","2":"patch","3":"2","4":"20","5":"para","6":"0.70175439"},{"1":"1","2":"patch","3":"2","4":"21","5":"para","6":"2.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"para","6":"1.71428571"},{"1":"1","2":"patch","3":"2","4":"23","5":"para","6":"2.66666667"},{"1":"1","2":"patch","3":"3","4":"24","5":"para","6":"0.76148796"},{"1":"1","2":"patch","3":"3","4":"25","5":"para","6":"1.77777778"},{"1":"1","2":"patch","3":"3","4":"26","5":"para","6":"2.66666667"},{"1":"1","2":"patch","3":"3","4":"27","5":"para","6":"1.60000000"},{"1":"1","2":"patch","3":"1","4":"1","5":"perim","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"perim","6":"12.00000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"perim","6":"130.00000000"},{"1":"1","2":"patch","3":"1","4":"4","5":"perim","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"perim","6":"4.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"perim","6":"20.00000000"},{"1":"1","2":"patch","3":"1","4":"7","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"1","4":"8","5":"perim","6":"10.00000000"},{"1":"1","2":"patch","3":"1","4":"9","5":"perim","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"perim","6":"38.00000000"},{"1":"1","2":"patch","3":"2","4":"11","5":"perim","6":"6.00000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"2","4":"13","5":"perim","6":"82.00000000"},{"1":"1","2":"patch","3":"2","4":"14","5":"perim","6":"6.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"perim","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"perim","6":"32.00000000"},{"1":"1","2":"patch","3":"2","4":"17","5":"perim","6":"4.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"2","4":"19","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"2","4":"20","5":"perim","6":"40.00000000"},{"1":"1","2":"patch","3":"2","4":"21","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"perim","6":"12.00000000"},{"1":"1","2":"patch","3":"2","4":"23","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"3","4":"24","5":"perim","6":"348.00000000"},{"1":"1","2":"patch","3":"3","4":"25","5":"perim","6":"16.00000000"},{"1":"1","2":"patch","3":"3","4":"26","5":"perim","6":"8.00000000"},{"1":"1","2":"patch","3":"3","4":"27","5":"perim","6":"16.00000000"},{"1":"1","2":"patch","3":"1","4":"1","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"2","5":"shape","6":"1.20000000"},{"1":"1","2":"patch","3":"1","4":"3","5":"shape","6":"2.60000000"},{"1":"1","2":"patch","3":"1","4":"4","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"5","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"6","5":"shape","6":"1.25000000"},{"1":"1","2":"patch","3":"1","4":"7","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"8","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"1","4":"9","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"10","5":"shape","6":"1.58333333"},{"1":"1","2":"patch","3":"2","4":"11","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"12","5":"shape","6":"1.33333333"},{"1":"1","2":"patch","3":"2","4":"13","5":"shape","6":"2.05000000"},{"1":"1","2":"patch","3":"2","4":"14","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"15","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"16","5":"shape","6":"1.60000000"},{"1":"1","2":"patch","3":"2","4":"17","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"18","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"19","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"20","5":"shape","6":"1.25000000"},{"1":"1","2":"patch","3":"2","4":"21","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"22","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"2","4":"23","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"3","4":"24","5":"shape","6":"4.04651163"},{"1":"1","2":"patch","3":"3","4":"25","5":"shape","6":"1.33333333"},{"1":"1","2":"patch","3":"3","4":"26","5":"shape","6":"1.00000000"},{"1":"1","2":"patch","3":"3","4":"27","5":"shape","6":"1.14285714"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>But it still creates big shoes for landscapemetrics to fill – and landscapemetrics fills them admirably. This package was the engine behind <a href="../2022-08-10-ground-filtering">the landscape structure section of my ground filtering paper this year</a>, and is so user-friendly. I’m very grateful that this tool exists <em>at all</em> now that FRAGSTATS is no longer with us; that the package is <em>good</em> is more than we deserve.</p>
</section>
</section>
<section id="devops" class="level2">
<h2 class="anchored" data-anchor-id="devops">DevOps</h2>
<section id="pi-hole" class="level3">
<h3 class="anchored" data-anchor-id="pi-hole"><a href="https://pi-hole.net/">Pi-hole</a></h3>
<p>If you’re nerdy enough to have a sever kicking around, you owe it to yourself to set up a Pi-hole. A <em>comical</em> amount of the total payload size for any website is made up of advertisements and tracking code that is annoying at best and actively malicious at worst; letting that unwanted data into your network and onto your machine is a real security risk. You should use an ad blocker in your browser for this reason (I personally use <a href="https://adnauseam.io/">Ad Nauseum</a>), but adding an extra layer of security to your network is also a great idea.</p>
<p>Pi-holes are relatively easy to set up (in comparison to, let’s say, Python), will help your websites load faster, and will help prevent malicious code from affecting your machines. I can’t recommend them enough.</p>
</section>
<section id="plumber-by-barret-schloerke-pool-by-joe-cheng-and-memoise-by-hadley-wickham-and-jim-hester-among-others" class="level3">
<h3 class="anchored" data-anchor-id="plumber-by-barret-schloerke-pool-by-joe-cheng-and-memoise-by-hadley-wickham-and-jim-hester-among-others"><a href="https://www.rplumber.io/">plumber</a> by Barret Schloerke, <a href="https://rstudio.github.io/pool/index.html">pool</a> by Joe Cheng, and <a href="https://memoise.r-lib.org/index.html">memoise</a> by Hadley Wickham and Jim Hester (among others)</h3>
<p>I’m cheating, because technically these next three packages belong in the next section, but also a <em>huge</em> amount of my work this year has been helped by having these packages around. The plumber package makes it comically easy to set up a REST API using R, and we lean on it to run the data delivery infrastructure for our research group. I don’t know how they did it, but the team behind plumber managed to make it so writing API code <em>feels</em> like writing analysis or processing code, even though it’s a completely different problem space. It’s fantastic.</p>
<p>This year in particular we’ve been focused on speeding up our API. For that purpose, we’ve turned to pool and memoise: the pool package caches database connections so that you don’t need to spend the time re-establishing connections for each new request that comes through; the memoise package caches function calls, so that you don’t need to spend the time re-calculating the results of a function that you recently executed. By making our data retrieval API lean heavily on these two packages, we were able to cut our average download times in <em>half</em> – not the server time, not the individual function calls we altered, but time from user making a request to having all of the data they required. And the changes required were painless – we were already using DBI, so using pool took roughly no work; using memoise took maybe an hour of my time. These packages make working with APIs a treat, even in a “statistical computing and graphics” language.</p>
</section>
<section id="openmetrics-by-aaron-jacobs-and-logger-by-gergely-daróczi" class="level3">
<h3 class="anchored" data-anchor-id="openmetrics-by-aaron-jacobs-and-logger-by-gergely-daróczi"><a href="https://github.com/atheriel/openmetrics/">openmetrics</a> by Aaron Jacobs and <a href="https://daroczig.github.io/logger/">logger</a> by Gergely Daróczi</h3>
<p>Speaking of APIs, these two packages have been absolute workhorses for us over the past year. The openmetrics package writes metrics about your API to a format that’s understandable by <a href="https://prometheus.io/">Prometheus</a>, which in turn is easily queried via <a href="https://grafana.com/">Grafana</a>; combined, these tools have formed our main observability stack for our data retrieval API ever since we stood it up. The logger package, meanwhile, does exactly what you’d expect: it emits logs, of various levels, to wherever you direct it. Having good tooling for monitoring and logging has been incredibly helpful as we need to debug and otherwise alter our production API, and I’ve been extremely happy with our setup.</p>
</section>
</section>
<section id="the-posit-empire" class="level2">
<h2 class="anchored" data-anchor-id="the-posit-empire">The Posit Empire</h2>
<p>Last, but certainly not least, there’s a huge suite of tools I use nearly every day from <a href="https://posit.co/">Posit, PBC</a> (née RStudio). Because this post is rather long, and I wanted to focus on smaller projects, I’m going to write a bit less about each; that is not because I like them any less.</p>
<p><img src="https://mm218.dev/posts/2022-12-12-tools/favorites.jpg" class="img-fluid" alt="An image of a book cover, with three bears holding hands; the book is called 'You're All My Favorites'"></p>
<section id="quarto" class="level3">
<h3 class="anchored" data-anchor-id="quarto"><a href="https://quarto.org/">Quarto</a></h3>
<p>I’ve been a huge Quarto booster since it was released; heck, I went to (I think) the first public Quarto talk at the Boston RUG meetup. This site is written in Quarto; my last three papers have been written in Quarto; the talk I’m giving Wednesday is written in Quarto. I’ve written <a href="https://github.com/mikemahoney218/quarto-arxiv">three</a> <a href="https://github.com/mikemahoney218/quarto-tandf">Quarto</a> <a href="https://github.com/mikemahoney218/quarto-agu">formats</a>. A huge amount of my job is “writing” – writing code, papers, talks, and so on – and being able to treat each form of writing in the same way, without needing to switch my tooling up is a <em>huge</em> help when I need to switch across tasks.</p>
</section>
<section id="recipes" class="level3">
<h3 class="anchored" data-anchor-id="recipes"><a href="https://recipes.tidymodels.org/">recipes</a></h3>
<p>I think I need to write a longer post about recipes at some point, because this package is <em>great</em>. In isolation, recipes makes it extremely easy to do feature engineering in a clean, ergonomic way; I teach with it even when I’m not teaching with tidymodels. But when combined with the rest of the tidymodels ecosystem, recipes really shines, helping you avoid data leakage and keeping your data preprocessing pipelines consistent across iterations.</p>
</section>
<section id="yardstick" class="level3">
<h3 class="anchored" data-anchor-id="yardstick"><a href="https://yardstick.tidymodels.org/">yardstick</a></h3>
<p>Want to calculate RMSE of two numeric columns in a data frame?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmse</span>(Orange, age, circumference)</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":[".metric"],"name":[1],"type":["chr"],"align":["left"]},{"label":[".estimator"],"name":[2],"type":["chr"],"align":["left"]},{"label":[".estimate"],"name":[3],"type":["dbl"],"align":["right"]}],"data":[{"1":"rmse","2":"standard","3":"915.4996"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>Decide you want to calculate MAE instead?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mae</span>(Orange, age, circumference)</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":[".metric"],"name":[1],"type":["chr"],"align":["left"]},{"label":[".estimator"],"name":[2],"type":["chr"],"align":["left"]},{"label":[".estimate"],"name":[3],"type":["dbl"],"align":["right"]}],"data":[{"1":"mae","2":"standard","3":"806.2857"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>Want to calculate a <em>ton</em> of metrics all at once?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metric_set</span>(</span>
<span id="cb26-2">  yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>rmse, </span>
<span id="cb26-3">  yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mae,</span>
<span id="cb26-4">  yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>rsq,</span>
<span id="cb26-5">  yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mape,</span>
<span id="cb26-6">  yardstick<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>msd</span>
<span id="cb26-7">)(Orange, age, circumference)</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":[".metric"],"name":[1],"type":["chr"],"align":["left"]},{"label":[".estimator"],"name":[2],"type":["chr"],"align":["left"]},{"label":[".estimate"],"name":[3],"type":["dbl"],"align":["right"]}],"data":[{"1":"rmse","2":"standard","3":"915.4996138"},{"1":"mae","2":"standard","3":"806.2857143"},{"1":"rsq","2":"standard","3":"0.8345167"},{"1":"mape","2":"standard","3":"85.5436006"},{"1":"msd","2":"standard","3":"806.2857143"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>yardstick is consistent in inputs and outputs, extremely clean, and a joy to work with. I’ve been extending it recently in <a href="https://github.com/mikemahoney218/waywiser/">waywiser</a> and enjoying the process a lot. Plus, just like with recipes, it integrates beautifully with the rest of tidymodels. Fantastic.</p>
</section>
<section id="ggplot2" class="level3">
<h3 class="anchored" data-anchor-id="ggplot2"><a href="https://ggplot2.tidyverse.org/">ggplot2</a></h3>
<p>I mean, come on.</p>
</section>
<section id="dplyr" class="level3">
<h3 class="anchored" data-anchor-id="dplyr"><a href="https://dplyr.tidyverse.org/">dplyr</a></h3>
<p>I mean, come <em>on</em>.</p>
</section>
<section id="tidyr" class="level3">
<h3 class="anchored" data-anchor-id="tidyr">tidyr</h3>
<p>I fell in love with tidyr back in 2017,<sup>20</sup> because it let me do things like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">Orange <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb27-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(data, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(circumference <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age, x)),</span>
<span id="cb27-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rsq =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(model, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared)</span>
<span id="cb27-6">  )</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["Tree"],"name":[1],"type":["ord"],"align":["right"]},{"label":["data"],"name":[2],"type":["list"],"align":["right"]},{"label":["model"],"name":[3],"type":["list"],"align":["right"]},{"label":["rsq"],"name":[4],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"<nfnGrpdD[,2]>","3":"<S3: lm>","4":"0.9711463"},{"1":"2","2":"<nfnGrpdD[,2]>","3":"<S3: lm>","4":"0.9748846"},{"1":"3","2":"<nfnGrpdD[,2]>","3":"<S3: lm>","4":"0.9764930"},{"1":"4","2":"<nfnGrpdD[,2]>","3":"<S3: lm>","4":"0.9691634"},{"1":"5","2":"<nfnGrpdD[,2]>","3":"<S3: lm>","4":"0.9756256"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>I don’t know if dplyr has changed since then or if I’ve just gotten more familiar with it, but I’ve since realized I can use dplyr for this sort of thing instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">Orange <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb28-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(circumference <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age, dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cur_data</span>())),</span>
<span id="cb28-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rsq =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(model, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared)</span>
<span id="cb28-6">  )</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["Tree"],"name":[1],"type":["ord"],"align":["right"]},{"label":["model"],"name":[2],"type":["list"],"align":["right"]},{"label":["rsq"],"name":[3],"type":["dbl"],"align":["right"]}],"data":[{"1":"3","2":"<S3: lm>","3":"0.9764930"},{"1":"1","2":"<S3: lm>","3":"0.9711463"},{"1":"5","2":"<S3: lm>","3":"0.9756256"},{"1":"2","2":"<S3: lm>","3":"0.9748846"},{"1":"4","2":"<S3: lm>","3":"0.9691634"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>But for my more complicated split-apply-combine workflows, tidyr still reigns supreme.</p>
</section>
<section id="devtools-testthat-pkgdown" class="level3">
<h3 class="anchored" data-anchor-id="devtools-testthat-pkgdown">devtools, testthat, pkgdown</h3>
<p>Last but not least, the tools I probably use more than any other package. It is <em>incredible</em> how effectively devtools and testthat speed up package development; it’s hard to imagine any other tools being a greater force multiplier than these. I can count the number of times I have run <code>R CMD check</code> on one hand, and the number of times I’ve run <code>devtools::check()</code> on the atoms of the universe.</p>
<p>Similarly, pkgdown is an <em>incredible</em> tool for the entire community. The fact that it is now easy – I mean, <em>trivial</em> – to have a nice-looking HTML documentation website for any package, so long as it has a README and man pages, is incredible. It makes the software we write more accessible to users, and incentivizes writing <em>good</em> documentation by turning man pages and vignettes into marketing material and a public-facing homepage.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>And that’s a big “might”. For the R packages I maintain, I’m able to track the number of downloads I get each day from the RStudio CRAN mirror. As I write this, this site is one of 103 mirrors, and while I <em>suspect</em> it’s the most popular one, I’m pretty confident that no one but CRAN actually <em>knows</em> – and to make matters worse, the people using the other 102 mirrors directly rather than the RStudio redirect are <em>most certainly</em> not a random sample. That means I’m only capturing some % of total downloads, but just about no one knows what % that might be, and it’s probably a different number for different packages. I can also track the number of clones each of my repos gets, but this is even less useful; <a href="https://github.com/tidymodels/spatialsample">spatialsample’s repo</a> was cloned 28 times yesterday, by a total of 4 people. Who are you people? Why are you cloning this repo so much?↩︎</p></li>
<li id="fn2"><p>To again use the RStudio download numbers as an example, a fun game is to check how many downloads even the least popular packages get each day. I have never, using <a href="https://hadley.shinyapps.io/cran-downloads/">Hadley’s app</a>, found a package with an average lower than ~5 downloads per day (see for instance my <a href="https://github.com/mikemahoney218/heddlr/">heddlr</a> package as a benchmark). Of course, if you have a stable userbase your users presumably <em>won’t</em> need to download your packages unless they get a new computer, a new version of R, or you release an update – which often causes spikes in the download numbers – so “number of downloads” is a pretty bad metric, even before we get into all the downloads from non-users or all the ways this number can be gamed.↩︎</p></li>
<li id="fn3"><p>And frankly, I don’t think most maintainers would actually like this; issues on a bug tracker are meant to be individual tasks to be tackled, and so positive feedback sent through this channel is probably the right message in the wrong place.↩︎</p></li>
<li id="fn4"><p>Which, don’t get me wrong, is still very appreciated. Even at my least meditative, I’d rather <em>stop</em> making the mistake :)↩︎</p></li>
<li id="fn5"><p>A <a href="https://www.intel.com/content/www/us/en/products/details/nuc.html">NUC</a> running Ubuntu, which is really the perfect machine for “an inexpensive always-on computer that won’t deafen me with fans or beep really loudly when I’m asleep”.↩︎</p></li>
<li id="fn6"><p>I use <a href="https://tailscale.com/">tailscale</a>, which is <em>not</em> open source but would otherwise make this list.↩︎</p></li>
<li id="fn7"><p>“Element”; in this case, we’re measuring how much phosphorous is in each gram of a wood sample.↩︎</p></li>
<li id="fn8"><p>There is no such thing.↩︎</p></li>
<li id="fn9"><p>One example here: units objects are not numeric vectors, in the normal sense. You can’t do, for instance, <code>units::set_units(2, "m") + 1</code>; without knowing what units <code>1</code> is in, it’s impossible to say what the return value would be. A whole class of bugs, eliminated by <em>not</em> letting you do something.↩︎</p></li>
<li id="fn10"><p>(most)↩︎</p></li>
<li id="fn11"><p>Read: “Whenever I see people posting about a new package on Twitter”↩︎</p></li>
<li id="fn12"><p>Mostly in LaTeX. Another confession: I don’t entirely <em>understand</em> the point of HTML tables. This is probably because I do not write statistical analyses for the internet. For the types of content I consume via HTML, I want you to either give me a graph of the important message of your data, or to give me a CSV so I can go figure out the message for myself. The sorts of things I consume via PDF, or write for PDF formats, usually have a higher evidence bar.↩︎</p></li>
<li id="fn13"><p>Minus <a href="https://www.mm218.dev/papers/mahoney_stella_2020.pdf">Mahoney and Stella 2020</a>, which was written in Word; the horrors of formatting tables for that paper in Word is actually what got me into R Markdown in the first place.↩︎</p></li>
<li id="fn14"><p>I didn’t use rgeos or rgdal directly, other than as part of functions in the raster package; I’m also new enough to the space that I’ve <em>always</em> used sf, and never really touched sp or maptools.↩︎</p></li>
<li id="fn15"><p>The first version of raster hit CRAN in 2010. That we should all be so long-lasting and so useful!↩︎</p></li>
<li id="fn16"><p>Pretty often, though not always, me.↩︎</p></li>
<li id="fn17"><p>Pretty often, though not always, <a href="https://www.lucaskjohnson.com/">Lucas</a>.↩︎</p></li>
<li id="fn18"><p>The original draft, written very late at night, said “a little bit like recommending not being on fire” here. I changed that, because it did not make any sense, but I also found it really funny, hence this note.↩︎</p></li>
<li id="fn19"><p>As in, “I had more than one college course that was, in no small part, <em>on</em> FRAGSTATS”.↩︎</p></li>
<li id="fn20"><p>Which means yes, I do sometimes still use <code>gather()</code>, though weirdly never <code>spread()</code>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Spatial</category>
  <category>Data science</category>
  <guid>https://mm218.dev/posts/2022-12-12-tools/index.html</guid>
  <pubDate>Mon, 12 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2022-12-12-tools/favorites.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to include sf data in R packages</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2022-12-01-sf-in-packages/index.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Store your sf objects as <a href="https://r-pkgs.org/data.html#sec-data-sysdata">internal data</a>. Add a <code>.R</code> file to <code>data/</code> (probably named <code>your_data.R</code>) containing the following:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delayedAssign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_data"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-3">  your_package<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span>your_data</span>
<span id="cb1-4">}))</span></code></pre></div>
<p><a href="https://r-pkgs.org/data.html#sec-documenting-data">Document your data as usual</a>.</p>
<p>See the update at the bottom of this post for a bit more information.</p>
</section>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The Problem</h2>
<p>If you work with spatial data in R, you’re familiar with <a href="https://r-spatial.github.io/sf/">the sf package</a>. If you write spatially-oriented packages for R, there’s a good chance you think a lot about how to handle and work with sf objects. I think that’s a good thing; sf makes data analysis with spatial data <em>miles</em> easier, and I rely on it throughout my packages.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mm218.dev/posts/2022-12-01-sf-in-packages/sf.jpg" class="img-fluid figure-img" alt="Three cute fuzzy monsters adding spatial geometries to an existing table of attributes using glue and tape, while one cuts out the spatial polygons. Title text reads &quot;sf: spatial data…simplified.&quot; and a caption at the bottom reads &quot;sticky geometries: for people who love their maps and sanity.&quot;"></p>
<figcaption class="figure-caption">CC-BY 4.0 Artwork by Allison Horst.</figcaption>
</figure>
</div>
<p>If you write spatially-oriented packages, there’s a good chance your examples or tests could benefit from your package including some sf objects as demonstration data. But there’s a few weird edge cases that crop up when including sf objects in package data.</p>
<p>For instance, let’s look at the <code>guerry</code> data from the <a href="https://spatialanalysis.github.io/geodaData/">geodaData</a> package. On its own, this object seems to load and print perfectly fine:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">geodaData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>guerry <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  CODE_DE COUNT AVE_ID_ dept Region Dprtmnt Crm_prs Crm_prp Litercy Donatns
1      01     1      49    1      E     Ain   28870   15890      37    5098
  Infants Suicids MainCty Wealth Commerc Clergy Crm_prn Infntcd Dntn_cl Lottery
1   33120   35039       2     73      58     11      71      60      69      41
  Desertn Instrct Prsttts Distanc Area Pop1831
1      55      46      13 218.372 5762  346.03
geometry
1 801150, 800669, 800688, 800780, 800589, 800333, 799095, 799136, 799690, 799329, 797715, 797655, 797410, 797149, 796755, 796738, 796612, 795234, 794905, 794547, 791555, 791465, 791935, 791835, 791670, 790205, 790035, 789304, 788617, 788005, 787670, 786705, 786350, 785720, 785562, 786670, 786930, 787055, 787208, 787367, 786900, 786795, 786830, 786811, 786384, 786550, 786560, 786465, 785956, 787211, 787415, 787600, 787536, 787137, 786610, 786457, 787138, 787365, 787545, 787880, 788198, 788225, 789130, 789370, 789790, 789995, 790445, 790237, 789585, 788993, 788830, 788650, 788638, 788673, 789501, 789510, 789596, 789680, 789845, 790050, 790594, 790750, 790740, 790739, 791139, 791749, 791860, 792199, 792285, 792880, 793615, 793737, 793650, 793618, 793480, 794012, 794347, 794535, 794686, 795135, 796115, 796193, 796250, 796311, 796335, 796324, 796316, 796385, 796495, 797830, 797970, 797959, 797910, 797905, 798850, 798930, 798980, 799122, 799255, 799340, 800295, 800326, 800757, 801505, 802043, 802820, 804846, 805165, 805338, 805485, 808352, 808655, 809605, 809930, 811710, 813076, 814292, 814670, 815189, 816978, 817045, 818290, 819798, 819990, 819753, 820496, 820305, 820810, 821023, 821020, 821753, 822453, 822690, 823263, 823585, 824250, 825284, 825600, 828440, 829372, 828470, 828705, 828395, 827745, 828485, 830445, 831525, 832747, 833030, 833286, 833885, 833687, 832940, 832830, 833866, 833825, 833752, 833675, 835995, 835930, 836194, 836185, 836190, 836405, 836690, 837059, 837545, 838628, 838735, 840056, 840530, 840855, 841371, 841670, 841591, 841093, 840525, 840483, 841576, 841898, 843750, 843973, 844372, 844675, 846805, 848292, 848440, 848651, 850029, 850390, 851184, 851650, 851857, 851710, 852195, 853883, 854050, 854684, 854950, 855010, 854706, 856495, 857425, 857675, 857795, 860115, 860522, 860356, 860868, 861160, 861499, 861800, 863931, 864270, 867954, 868320, 868625, 868940, 870819, 871569, 872099, 872230, 873891, 874080, 875215, 875688, 875836, 876350, 877249, 877575, 877751, 879950, 880577, 882757, 884049, 885600, 886165, 886435, 889069, 889778, 890867, 893000, 894101, 894575, 894622, 893375, 892712, 892540, 891600, 891281, 891245, 891340, 890292, 890080, 890987, 891235, 891560, 891794, 891337, 890413, 889185, 888822, 887853, 887180, 886092, 885735, 885432, 884760, 883760, 883455, 882749, 882058, 881989, 880591, 880422, 879890, 879855, 882197, 882019, 881408, 880810, 880202, 880177, 879600, 879351, 878142, 877449, 876853, 875845, 875089, 874800, 874322, 874925, 874725, 872900, 872100, 871837, 870648, 869972, 869296, 869435, 868710, 868663, 868525, 868760, 868985, 868525, 868617, 868760, 868864, 869034, 868545, 868661, 868975, 868911, 869020, 869215, 870970, 870979, 870925, 871130, 870721, 870455, 870800, 870344, 870311, 870897, 870710, 870615, 869975, 869465, 869314, 869040, 868989, 868710, 868050, 867940, 867995, 867975, 867825, 867736, 867995, 867979, 867788, 868170, 867935, 867643, 867110, 867246, 867588, 866723, 866013, 865294, 864275, 864000, 863659, 861885, 861845, 862185, 862398, 862694, 862533, 860925, 860842, 861160, 861300, 861210, 860973, 860337, 858511, 858205, 858072, 857453, 857320, 857265, 856650, 856355, 856182, 855610, 854744, 854474, 852864, 852620, 852647, 851685, 851354, 850753, 850470, 850320, 850069, 850023, 850741, 851509, 852157, 852073, 850451, 850375, 850111, 849805, 848375, 848150, 847545, 847281, 845980, 845694, 844840, 842895, 842098, 841825, 841604, 841170, 840895, 839825, 839769, 840798, 840745, 840580, 840305, 839320, 839165, 839016, 838200, 836342, 836100, 835840, 834252, 833175, 833017, 832785, 832719, 832433, 831189, 830330, 829565, 829550, 829422, 828638, 827810, 827523, 826955, 826653, 825785, 825487, 824587, 822700, 822339, 821748, 821660, 821459, 820815, 820470, 819281, 818215, 817851, 816405, 815735, 815844, 815501, 814830, 814502, 814175, 813785, 811510, 811202, 810503, 809935, 808612, 808305, 807965, 807085, 806759, 806450, 805480, 804700, 804426, 803230, 802864, 801150, 2092615, 2093190, 2095430, 2095795, 2096112, 2097190, 2098505, 2098838, 2100360, 2100395, 2100950, 2101330, 2102850, 2102788, 2102425, 2102785, 2103487, 2103892, 2104515, 2104359, 2102570, 2102760, 2104075, 2105023, 2105295, 2105555, 2105875, 2107116, 2107148, 2106760, 2106708, 2106990, 2107029, 2107335, 2108399, 2109486, 2109775, 2110010, 2110344, 2111056, 2113550, 2114260, 2114370, 2114751, 2116197, 2116940, 2117563, 2117860, 2119206, 2120474, 2120775, 2121475, 2121809, 2122743, 2123110, 2124100, 2124890, 2125160, 2125377, 2125830, 2126745, 2127075, 2128290, 2128585, 2129209, 2129525, 2131460, 2131793, 2132230, 2132742, 2133100, 2133655, 2134028, 2135142, 2136382, 2137110, 2138174, 2138520, 2139015, 2139590, 2140547, 2142011, 2142380, 2142716, 2143599, 2144456, 2144790, 2147049, 2147420, 2148815, 2150425, 2150782, 2152285, 2152660, 2153400, 2155103, 2155696, 2155980, 2156241, 2157025, 2159030, 2160314, 2160635, 2161408, 2161795, 2162102, 2163021, 2163470, 2163785, 2165380, 2165700, 2167362, 2167695, 2167835, 2169845, 2170117, 2170395, 2171035, 2171335, 2171435, 2171593, 2170924, 2170498, 2170754, 2171611, 2171760, 2171217, 2171380, 2170485, 2170210, 2168729, 2168520, 2168719, 2168735, 2170150, 2169640, 2170568, 2170640, 2171442, 2171075, 2172530, 2171719, 2171534, 2171205, 2170948, 2169812, 2169145, 2168648, 2167568, 2167190, 2167185, 2166355, 2166075, 2166394, 2166285, 2165476, 2165330, 2165160, 2165065, 2163119, 2162490, 2161655, 2161531, 2161519, 2161005, 2159908, 2159915, 2158958, 2158780, 2158494, 2158105, 2157807, 2157040, 2156696, 2155806, 2155445, 2155097, 2154750, 2153047, 2152675, 2151171, 2150780, 2150680, 2150149, 2150070, 2153840, 2154400, 2151187, 2150820, 2151192, 2151708, 2151840, 2151081, 2150965, 2150606, 2148479, 2148155, 2146631, 2145603, 2145394, 2145800, 2146033, 2145523, 2145410, 2146002, 2147688, 2148035, 2148733, 2148841, 2148775, 2149407, 2150710, 2150922, 2151180, 2152638, 2153465, 2153815, 2154550, 2153948, 2153605, 2152546, 2152522, 2151954, 2151680, 2151135, 2150917, 2149401, 2147845, 2145955, 2145690, 2145842, 2146060, 2146529, 2146675, 2146311, 2146245, 2146162, 2146145, 2146227, 2147047, 2147009, 2146655, 2148801, 2149145, 2148900, 2149908, 2151749, 2152270, 2151866, 2151825, 2152160, 2156500, 2157904, 2159490, 2160898, 2163565, 2164270, 2164140, 2163415, 2162493, 2162099, 2160395, 2160083, 2159465, 2158743, 2156340, 2155944, 2155185, 2153375, 2152677, 2152295, 2150917, 2149984, 2149695, 2147869, 2147615, 2147405, 2146272, 2145258, 2144570, 2145445, 2145356, 2144792, 2145110, 2143618, 2143730, 2143963, 2143997, 2143495, 2143280, 2142419, 2142149, 2141782, 2141448, 2140052, 2139555, 2139435, 2138192, 2137078, 2136753, 2134940, 2133632, 2132631, 2132205, 2132001, 2131755, 2131650, 2131962, 2130970, 2130628, 2130520, 2129464, 2128114, 2126982, 2126720, 2126810, 2127080, 2128513, 2128829, 2128495, 2127050, 2125650, 2125275, 2123780, 2123569, 2123070, 2121885, 2121591, 2120685, 2120349, 2119679, 2118760, 2118458, 2117935, 2117610, 2116295, 2115554, 2114005, 2113621, 2112855, 2111817, 2110485, 2110250, 2110165, 2109573, 2108843, 2107500, 2106390, 2106018, 2103410, 2101545, 2101232, 2099875, 2099512, 2098080, 2097320, 2096964, 2094425, 2094056, 2092595, 2092277, 2091670, 2091277, 2090131, 2088645, 2088380, 2088330, 2088110, 2087753, 2086334, 2085607, 2084278, 2084187, 2084575, 2084465, 2084328, 2084450, 2084109, 2083150, 2082820, 2082092, 2081333, 2079632, 2078870, 2078155, 2077808, 2077080, 2076787, 2076386, 2076155, 2075110, 2074811, 2074591, 2073960, 2073584, 2073221, 2073460, 2073797, 2074780, 2075941, 2077758, 2078730, 2079020, 2079386, 2079920, 2080021, 2079717, 2079917, 2080840, 2081131, 2082613, 2082507, 2081230, 2081554, 2082291, 2083206, 2083940, 2084174, 2084350, 2084500, 2084810, 2086215, 2086449, 2087620, 2087856, 2088564, 2091270, 2091898, 2092105, 2092424, 2093065, 2093318, 2094355, 2096198, 2096536, 2096910, 2097185, 2097470, 2098117, 2098880, 2099191, 2099825, 2100899, 2101165, 2101453, 2102554, 2102260, 2102031, 2101525, 2101162, 2100482, 2099710, 2098550, 2095140, 2094745, 2094389, 2093577, 2091920, 2091724, 2091325, 2091135, 2090510, 2090257, 2089517, 2089735, 2089692, 2090044, 2090765, 2091109, 2092110, 2092273, 2093148, 2093260, 2093406, 2093980, 2093715, 2092629, 2092497, 2094120, 2094025, 2093925, 2093907, 2093620, 2093793, 2093796, 2093390, 2093210, 2093030, 2092976, 2093490, 2093370, 2093210, 2092960, 2093105, 2093280, 2093210, 2093269, 2092615</code></pre>
</div>
</div>
<p>But if we cast this object to a <a href="https://tibble.tidyverse.org/">tibble</a>, we get an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(geodaData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>guerry))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error : All columns in a tibble must be vectors.
✖ Column `geometry` is a `sfc_MULTIPOLYGON/sfc` object.</code></pre>
</div>
</div>
<p>This is <a href="https://github.com/r-lib/pillar/issues/552">a known bug</a> that packages need to work around themselves, and can be a bit of a pain to figure out solutions for. It tends to crop up when data.frame objects are implicitly casted to tibbles, for instance by <a href="https://dplyr.tidyverse.org/">dplyr</a> functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(geodaData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>guerry, CODE_DE))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error : All columns in a tibble must be vectors.
✖ Column `geometry` is a `sfc_MULTIPOLYGON/sfc` object.</code></pre>
</div>
</div>
<p>But it can happen without casting to tibbles as well, for instance when trying to use <code>dplyr::arrange()</code>:<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(geodaData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>guerry))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error in vec_size() : 
  `x` must be a vector, not a &lt;sfc_MULTIPOLYGON/sfc&gt; object.</code></pre>
</div>
</div>
<p>Any code that calls <code>vctrs::vec_size()</code> will wind up erroring in this situation, which includes a good amount of tidyverse code.</p>
<p>A final challenge with including sf objects in R packages is that some projected CRS include non-ASCII characters in their WKT, <a href="https://github.com/r-spatial/sf/issues/1341">causing an aggravating warning</a> in R CMD check: <code>Warning: found non-ASCII string</code>. Your package won’t be accepted to CRAN with that warning, and as such, this needs to be fixed.<sup>2</sup></p>
<p>All three of these problems can be solved by the same approach, which I think is the best way to include sf objects in packages.</p>
</section>
<section id="the-solution" class="level2">
<h2 class="anchored" data-anchor-id="the-solution">The Solution</h2>
<p>Rather than including sf objects directly as package data in the normal manner, you should store the sf object as internal data and then load it via <code>delayedAssign</code>. This is an approach inspired by <a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins</a> (<a href="https://github.com/allisonhorst/palmerpenguins/pull/36">here’s the relevant PR</a>), now in use in the <a href="spatialsample.tidymodels.org/">spatialsample</a> and <a href="https://mikemahoney218.github.io/waywiser/">waywiser</a> packages I maintain.</p>
<p>To store <a href="https://r-pkgs.org/data.html#sec-data-sysdata">your sf objects as internal data</a>, save them into a file named <code>R/sysdata.rda</code>. If you use <code>usethis::use_data()</code>, set the argument <code>internal = TRUE</code> to make this happen automatically. This solves the third problem for us; something about not exporting the sf object directly means that R CMD check no longer checks the CRS for non-ASCII characters, and the warning is no longer triggered.</p>
<p>You now need to somehow export this data, in order to let users actually use your newly-internal sf object. To do so, we’re going to write a file in the <code>data/</code> folder, named something like <code>your_data.R</code>, taking advantage of the <code>delayedAssign()</code> function like so:<sup>3</sup></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delayedAssign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_data"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb10-3">  your_package<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span>your_data</span>
<span id="cb10-4">}))</span></code></pre></div>
<p>This function makes it so that, whenever a user calls your data object for the first time in a session, you quietly load the sf package before assigning your internal data to the exported object. <a href="https://adv-r.hadley.nz/environments.html#search-path">This doesn’t <em>attach</em> the sf package</a>, meaning that your users won’t accidentally have the entire sf package dumped into their search path. Loading the sf package, however, is enough to fix both problems 1 and 2; your data will now play happily with tibbles, dplyr functions, and the broader R ecosystem.</p>
<p>You then need to <a href="https://r-pkgs.org/data.html#sec-documenting-data">document your data</a> in a file under <code>R/</code> the same way you always would.</p>
<p>And that’s it! Your package will now be more user-friendly and CRAN-acceptable. I’ve been using this approach for months with no side effects<sup>4</sup> and am planning to keep using it going forward.</p>
</section>
<section id="update" class="level2">
<h2 class="anchored" data-anchor-id="update">Update</h2>
<p><a href="https://fosstodon.org/@edzer@mastodon.social/109439029871771876">Edzer points out on Mastodon</a> that, in order to <a href="https://www.tidyverse.org/blog/2022/09/playing-on-the-same-team-as-your-dependecy/">play nicely with potential changes in sf</a>, you can <a href="https://r-pkgs.org/data.html#sec-data-extdata">include your data as an external file</a> instead. The steps here are broadly similar: save your sf object to a file in <code>inst/extdata</code>, and write a file in <code>R/</code> that looks something like this:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delayedAssign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_data"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb11-3">    sf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_sf</span>(</span>
<span id="cb11-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extdata/your_data.gpkg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_package"</span>)</span>
<span id="cb11-5">    ),</span>
<span id="cb11-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">silent =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-7">  )</span>
<span id="cb11-8">}))</span></code></pre></div>
<p>We need to wrap the call in <code>try()</code> in order to make this approach work with tooling like <code>devtools::document()</code>, which will otherwise complain about trying to read a file that isn’t there.</p>
<p>In my tests, this was enough to fix issues 1 and 2; calling <code>sf::read_sf()</code> will load the sf package and should fix any interoperability issues. However, this approach doesn’t necessarily fix the non-ASCII character WARNING given off by R CMD check.</p>
<p>Of course, you can also include external files in <code>inst/</code> and then have your users read it themselves using <code>system.file()</code>, like <a href="https://r-spatial.github.io/sf/articles/sf1.html">the sf vignettes do themselves</a>!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This section was edited on 2022-12-01; thanks to <a href="https://fosstodon.org/@geospacedman@mastodon.social/109439358830660533">Barry Rowlingson</a> for pointing out a mistake in the original draft.↩︎</p></li>
<li id="fn2"><p>Theoretically this <em>should</em> be fixed by setting <code>Encoding: UTF8</code> in your package DESCRIPTION, but <a href="https://github.com/r-spatial/sf/issues/1341#issuecomment-609645514">that rarely seems to help</a>.↩︎</p></li>
<li id="fn3"><p>Just in case it’s not clear: make sure to change <code>your_data</code> and <code>your_package</code> below to, well, the name of your data and the name of your package.↩︎</p></li>
<li id="fn4"><p>Knock on wood for me, I’ve tempted the gods.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>Tutorials</category>
  <category>Spatial</category>
  <category>Data science</category>
  <guid>https://mm218.dev/posts/2022-12-01-sf-in-packages/index.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2022-12-01-sf-in-packages/sf.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How rsample keeps memory usage low</title>
  <dc:creator>Mike Mahoney</dc:creator>
  <link>https://mm218.dev/posts/2022-10-04-rsample/index.html</link>
  <description><![CDATA[ 




<p>A few months back, I wrote two comments on <a href="https://github.com/tidymodels/rsample/issues/335">a GitHub issue</a> explaining a bit of how <a href="https://rsample.tidymodels.org/">rsample</a> works under the hood. Specifically, a user asked how rsample keeps the total amount of memory that its resamples use relatively low. I’ve sent this GitHub issue to a few people since then, so it felt like it might be useful enough to turn the issue into a blog.<sup>1</sup></p>
<section id="whats-an-rsample" class="level2">
<h2 class="anchored" data-anchor-id="whats-an-rsample">What’s an rsample?</h2>
<p>In case you’ve never used it, <a href="https://rsample.tidymodels.org/">rsample</a> is an R package for data resampling – if you need bootstrap resampling, V-fold cross-validation, permutation sampling, and more, rsample is meant for you.<sup>2</sup> The majority of these rsample functions return <code>rset</code> objects, which are just jazzed-up tibbles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsample)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mlbench)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(LetterRecognition)</span>
<span id="cb1-5"></span>
<span id="cb1-6">boots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstraps</span>(LetterRecognition, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-7">boots</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Bootstrap sampling 
# A tibble: 2 × 2
  splits               id        
  &lt;list&gt;               &lt;chr&gt;     
1 &lt;split [20000/7403]&gt; Bootstrap1
2 &lt;split [20000/7375]&gt; Bootstrap2</code></pre>
</div>
</div>
<p>Each of our individual resamples is stored as an <code>rsplit</code> object, each of which takes up a row in the <code>splits</code> column. Printing these objects tells us how many rows are in our analysis and assessment sets,<sup>3</sup> but hides most of the actual structure of the <code>rsplit</code> object. If we use <code>str()</code> instead, we can see that there are three named elements in each <code>rsplit</code>: <code>data</code>, our original data frame; <code>in_id</code>, which has the indices for which observations are going to be held “in” our analysis set, and <code>out_id</code>, which sometimes<sup>4</sup> has the indices for which observations are going to be held “out” to make up our assessment set, but here is <code>NA</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">boots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Analysis/Assess/Total&gt;
&lt;20000/7403/20000&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(</span>
<span id="cb5-2">  boots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb5-3">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 4
 $ data  :'data.frame': 20000 obs. of  17 variables:
  ..$ lettr: Factor w/ 26 levels "A","B","C","D",..: 20 9 4 14 7 19 2 1 10 13 ...
  ..$ x.box: num [1:20000] 2 5 4 7 2 4 4 1 2 11 ...
  ..$ y.box: num [1:20000] 8 12 11 11 1 11 2 1 2 15 ...
  ..$ width: num [1:20000] 3 3 6 6 3 5 5 3 4 13 ...
  ..$ high : num [1:20000] 5 7 8 6 1 8 4 2 4 9 ...
  ..$ onpix: num [1:20000] 1 2 6 3 1 3 4 1 2 7 ...
  ..$ x.bar: num [1:20000] 8 10 10 5 8 8 8 8 10 13 ...
  ..$ y.bar: num [1:20000] 13 5 6 9 6 8 7 2 6 2 ...
  ..$ x2bar: num [1:20000] 0 5 2 4 6 6 6 2 2 6 ...
  ..$ y2bar: num [1:20000] 6 4 6 6 6 9 6 2 6 2 ...
  ..$ xybar: num [1:20000] 6 13 10 4 6 5 7 8 12 12 ...
  ..$ x2ybr: num [1:20000] 10 3 3 4 5 6 6 2 4 1 ...
  ..$ xy2br: num [1:20000] 8 9 7 10 9 6 6 8 8 9 ...
  ..$ x.ege: num [1:20000] 0 2 3 6 1 0 2 1 1 8 ...
  ..$ xegvy: num [1:20000] 8 8 7 10 7 8 8 6 6 1 ...
  ..$ y.ege: num [1:20000] 0 4 3 2 5 9 7 2 1 1 ...
  ..$ yegvx: num [1:20000] 8 10 9 8 10 7 10 7 7 8 ...
 $ in_id : int [1:20000] 18847 18895 2986 1842 3371 11638 4761 6746 16128 2757 ...
 $ out_id: logi NA
 $ id    : tibble [1 × 1] (S3: tbl_df/tbl/data.frame)
  ..$ id: chr "Bootstrap1"
 - attr(*, "class")= chr [1:2] "boot_split" "rsplit"</code></pre>
</div>
</div>
</section>
<section id="the-mystery-of-the-missing-mbs" class="level2">
<h2 class="anchored" data-anchor-id="the-mystery-of-the-missing-mbs">The mystery of the missing MBs</h2>
<p>So, just looking at this structure, it seems like each <code>rsplit</code> contains a complete copy of our original data. But somehow, to borrow the example from the rsample README, creating a 50-times bootstrap sample doesn’t require 50 times as much memory, but instead about 3x:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(LetterRecognition)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.64 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35222</span>)</span>
<span id="cb9-2">boots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstraps</span>(LetterRecognition, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb9-3">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(boots)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6.69 MB</code></pre>
</div>
</div>
<p>Even that top-line result is a little misleading, though, because rsample isn’t copying the data to actually create <code>boots</code>. If we look at the object sizes for both the original data and the resamples together, we can see that <code>boots</code> is only contributing ~4 MB:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(LetterRecognition, boots)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6.69 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_sizes</span>(LetterRecognition, boots)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 2.64 MB
* 4.04 MB</code></pre>
</div>
</div>
<p>So: what? How?</p>
</section>
<section id="copying-modifying" class="level2">
<h2 class="anchored" data-anchor-id="copying-modifying">Copying; modifying</h2>
<p>Well, R uses what’s known as <a href="https://adv-r.hadley.nz/names-values.html">copy-on-modify</a> semantics. That means that, when you assign the same data to multiple variables, each of those variables will actually point at the same address in RAM:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">LetterRecognition2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> LetterRecognition</span>
<span id="cb15-2"></span>
<span id="cb15-3">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0x5573114c93e0"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0x5573114c93e0"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(</span>
<span id="cb19-2">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition),</span>
<span id="cb19-3">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition2)</span>
<span id="cb19-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>This also means that <code>LetterRecognition2</code> takes up literally 0 space in your RAM:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(LetterRecognition, LetterRecognition2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.64 MB</code></pre>
</div>
</div>
<p>And that will stay true up until we modify either of these objects. No copy is made, no additional RAM gets used, until one of the objects is modified.</p>
<p>That also means that, right now, <code>LetterRecognition2</code> is another name for the data stored in each of our <code>rsplits</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(</span>
<span id="cb23-2">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(boots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb23-3">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition2)</span>
<span id="cb23-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>And if we get rid of <code>LetterRecognition</code>, which both <code>LetterRecognition2</code> and our bootstraps are based off of, those objects will <em>still</em> point at the same address,<sup>5</sup> and our <code>data</code> slot in <code>boots</code> still won’t take up additional space:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(LetterRecognition)</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          used (Mb) gc trigger (Mb) max used (Mb)
Ncells  849739 45.4    1358681 72.6  1358681 72.6
Vcells 2362850 18.1    8388608 64.0  8384745 64.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(</span>
<span id="cb27-2">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(boots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb27-3">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition2)</span>
<span id="cb27-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_sizes</span>(LetterRecognition2, boots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 2.64 MB
*     0 B</code></pre>
</div>
</div>
<p>So how does rsample keep its objects so small? By not making extra copies of your data where it doesn’t have to. This is how the entire <code>boots</code> table winds up only adding ~1.5x the space of the original data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_sizes</span>(LetterRecognition2, boots)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 2.64 MB
* 4.04 MB</code></pre>
</div>
</div>
<p>And that’s pretty close to as small as this object could get – that’s just the amount of space required to store the indices (in this case, 20,000 indices per repeat, 50 repeats):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4.00 MB</code></pre>
</div>
</div>
<p>(The 42kb difference is the attributes we’ve attached to each split – things like its class and ID and so on – but that’s not going to be enough memory to be relevant for most applications.)</p>
<p>This is also, as it happens, why <code>out_id</code> is set <code>NA</code> in our bootstrap resamples.<sup>6</sup> Because you can figure out which observations we want to “hold out” for the assessment set based on which ones we’re keeping “in” for analysis, rsample doesn’t store those indices for most of its resampling methods.<sup>7</sup></p>
<p>And one last thought: if you modified <code>LetterRecognition2</code>, <em>then</em> the data in our splits would no longer point at the same address space as the original table. That’s entirely on purpose and desirable, because once you start messing with your original data, your resampling indices are no longer guaranteed to correspond to the original table you used to create them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">LetterRecognition2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(</span>
<span id="cb35-4">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(boots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb35-5">  lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(LetterRecognition2)</span>
<span id="cb35-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>But, as best as possible, rsample will keep the <code>rset</code> small.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(boots)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6.69 MB</code></pre>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Plus, I’ve been writing my candidacy exam for two weeks now, and need an excuse to look at anything else for an hour.↩︎</p></li>
<li id="fn2"><p>For what it’s worth, while I’m an author on rsample, I didn’t write any of the rsample features mentioned in this blog post. I believe the rsample-specific details were all written by Max Kuhn. All the copy-on-modify semantics stuff, however, is just part of R and written over the past few decades by R Core.↩︎</p></li>
<li id="fn3"><p>“Analysis” maps to “training” while “assessment” maps to “testing”. “Analysis” and “assessment” are purposefully used to <a href="https://www.tmwr.org/resampling.html#resampling-methods">avoid confusion over <em>which</em> training and test set are being used</a>.↩︎</p></li>
<li id="fn4"><p>We’ll come back to this.↩︎</p></li>
<li id="fn5"><p>As of <a href="https://stat.ethz.ch/pipermail/r-announce/2020/000653.html">R 4.0</a>, as I understand it.↩︎</p></li>
<li id="fn6"><p>Told ya we’d come back to it.↩︎</p></li>
<li id="fn7"><p>Now the package I maintain, spatialsample, <em>does</em> include <code>out_id</code> on its objects relatively often. Most of the time, this is because the objects were created with a non <code>NULL</code> buffer, and so our hold out set isn’t simply “all of the data that’s not in”; sometimes it’s because I initially <em>always</em> included <code>out_id</code>, and haven’t fixed my code to be more efficient yet. PRs welcome!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>rsample</category>
  <category>tidymodels</category>
  <guid>https://mm218.dev/posts/2022-10-04-rsample/index.html</guid>
  <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
  <media:content url="https://mm218.dev/posts/2022-10-04-rsample/splash.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
