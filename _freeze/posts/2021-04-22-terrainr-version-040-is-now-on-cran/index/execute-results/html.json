{
  "hash": "e25f6e90d2b77f509ebf8cb98faea709",
  "result": {
    "markdown": "---\ntitle: \"What's new in terrainr 0.4.0?\"\ndescription: |\n  The new CRAN release of terrainr improves consistency, CRS logic, and \n  fixes some bugs.\nauthor:\n  - name: Mike Mahoney\n    url: {}\ndate: 2021-04-22\noutput:\n  distill::distill_article:\n    self_contained: false\n    toc: true\n    includes: \n      after_body: \"../utterances.html\"\n---\n\n\n\n\nterrainr version 0.4.0 is now on CRAN! This version is a relatively minor update \nthat shouldn't impact most workflows, but makes some changes to improve the \nlogic and consistency of the package. The rest of this post runs through the \nchanges you can expect if you `update.packages()` any time soon!\n\n## What's a terrainr?\n\n[terrainr](https://docs.ropensci.org/terrainr/) is an R package for the \nretrieval and visualization of spatial data. It provides functions to download\nelevation data and basemap tiles for points within the United States (using \npublic domain data from the USGS National Map), visualize them in R via ggplot2,\nand process them for 3D visualization using the Unity 3D engine. You can see\n[the GitHub repo here!](https://docs.ropensci.org/terrainr/)\n\n## `merge_rasters` can handle tiles with different numbers of bands\n\nThe old implementation of `merge_rasters` was very bulky, read all your map \ntiles into memory at once, and was a bit of a mess to maintain thanks to the \nlarge number of paths you could theoretically take through the code. The commit\n(suggested via rOpenSci review!) replacing it with `gdalwarp` via `sf` is \nprobably the single best code improvement I've made to this repo. Unfortunately,\nthe old method could also handle merging rasters with differing numbers of \nbands, while the simple `gdalwarp` fix couldn't.\n\nSo the old implementation is back as an internal method while I look for a \nbetter solution to this problem. `merge_rasters` will now attempt to use \n`gdalwarp` to merge your input files and then fall back to (a massively \nsimplified version of) the older version if `gdalwarp` fails.\n\nAs for why you'd want to automatically merge rasters with different numbers of \nbands, well...\n\n## `get_tiles` doesn't auto-download transparency values for NAIP\n\nNAIP orthophotography provides fantastic continuous 1-meter images for the \ncontinental United States. When downloading these photos with the argument \n`transparency = true`, which used to be the default, _most_ photos don't have\nany transparent pixels to talk about and as such are returned and saved as 3\nband rasters (RGB images). _Some_ photos, however, do have such pixels and are\nreturned with a 4th alpha band. This causes problems with `gdalwarp` as well as\nimage editing software, and the majority of the time users are not better served \nby these pixels being transparent. \n\nAs a result, this version changes the default `transparency` argument for \n`get_tiles` and `hit_national_map_api` to `false` when downloading NAIP images\n(no other data source is impacted). This is one of the reasons this version \ngets a 0.x.0 number -- while it should be a small change, the same inputs to \nfunctions no longer returns the same outputs (though I doubt people would \nnotice), so I'm counting this as a breaking change. \n\nThere's a slightly more impactful breaking change worth noting though:\n\n## Functions pay attention to the provided CRS\n\nThis header is actually about two distinct changes.\n\nFirst, another new behavior with `get_tiles` is that rather than assuming the \nprovided data and downloaded image should both be using the WGS84 CRS (EPSG \n4326), `get_tiles` will now infer the EPSG CRS from any provided `sf` or \n`Raster` object. If the numeric code is missing, this function will still assume\n4326.\n\nSimilarly, rather than specifying `target_crs` in `vector_to_overlay`, this \nfunction will now return an overlay projected to match `reference_raster`'s CRS.\nMissing CRS are handled slightly differently here -- if the `error_crs` argument\nis `NULL`, this function will warn; if `FALSE` it will assume 4326, and if \n`TRUE` it will interrupt the function with an error.\n\nThose are the major changes to this iteration! On top of these there are some \nminor changes to the package internals, slowly removing dead code paths and \nsimplifying things behind the scenes. If you have any problems (bugs or missing\nfeatures) with the package, feel free to [open an issue!](https://github.com/ropensci/terrainr/issues)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}