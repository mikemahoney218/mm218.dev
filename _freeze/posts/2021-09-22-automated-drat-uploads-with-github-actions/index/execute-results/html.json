{
  "hash": "ced0be99d8cf2caa5b26b7c711a81947",
  "result": {
    "markdown": "---\ntitle: \"Automated {drat} uploads with GitHub Actions\"\ndescription: |\n  Continuously deploy your code to personal CRAN-like repos, automatically and for free!\ncategories: [\"R\", \"Tutorials\", \"CI\", \"CD\", \"GitHub Actions\"]\nauthor:\n  - name: Mike Mahoney\n    url: {}\ndate: 09-23-2021\noutput:\n  distill::distill_article:\n    self_contained: false\n    toc: true\n---\n\n\n\n\nThis is a quick walkthrough of how to use GitHub actions to automatically upload packages to personal [{drat}](https://github.com/eddelbuettel/drat) repos. \n\nIf you just want the good stuff, [here's the link to the GitHub action I'm using](https://github.com/mikemahoney218/upload-to-drat-repo/) as well as [the GitHub workflow that uploads terrainr to my own drat repo](https://github.com/ropensci/terrainr/blob/main/.github/workflows/drat.yml).\n\n## What are we doing?\n\n[{drat}](https://github.com/eddelbuettel/drat) is an R package that helps you set up CRAN-like repositories, hosted (primarily) on GitHub Pages. [GitHub Actions](https://github.com/features/actions) is a continuous integration/continuous deployment service^[Kinda. It's probably more accurate to say GitHub Actions provides hosted compute which is typically used for CI/CD workflows, but can also be applied to other things; I use it to [make art and post to Twitter, for instance.](https://twitter.com/proc_tweets)], also hosted by GitHub, which lets you trigger compute workloads based on a CRON schedule, activity on a hosted repository, or manually. \n\nThis post walks through setting up a GitHub Actions CD workflow^[Workflows are explicit, repository-specific jobs, while actions are generic scripts which can be included inside of workflows.] to automatically build and upload an R package to a drat repo based on a schedule or repository activity. \n\n## Why are we doing it?\n\nMy lab has a number of internal packages we use for our day-to-day work which handle things like downloading data from our central server and producing standardized model assessment outputs. All of these packages live on GitHub in our central organization, and for a long time our workflow for installing these packages has been to clone the repository and then `devtools::install` the package.\n\nRecently, though, we've had to share one of our packages with a number of outside collaborators who we aren't going to be adding to the organization. We've also started working with a number of people who are less familiar with git and GitHub, both externally and within the lab, which means we need to provide a bit more instruction than simply saying \"clone the repo and install that\"^[I had completely forgotten how complex getting started with GitHub can be as a novice until recently, teaching a Carpentries workshop, I realized that teaching the initial account set-up [requires a full 45 minute lesson](https://swcarpentry.github.io/git-novice/07-github/index.html).]. This also means that solutions like \"use `remotes::install_github` with a PAT\" aren't feasible; we want people to be able to get the packages they need without needing to know anything about GitHub itself. Therefore, we needed a simpler method to actually distribute our code, both to people we'd happily give repo access and people we wouldn't want to.\n\nFor public repositories and organizations, I think the easiest solution to this problem is to set up your own [R Universe](https://r-universe.dev/organizations/), which rOpenSci has written [fantastic instructions for getting started with](https://ropensci.org/blog/2021/06/22/setup-runiverse/); this offloads your responsibility for managing CI to the rOpenSci team. For this project, however, we wanted a separate and mostly hidden repository page, which made {drat} a perfect candidate. \n\nThe only problem was how to make sure we were always publishing the newest versions of our package. We're a small team doing a lot of different things, so being able to automate away any repetitive task (like publishing patch releases to a {drat} repo) can really help reduce the cognitive load and number of mistakes associated with updating our shared codebase.\n\n## How did we do it?\n\nBecause the original version of this workflow is on a private repo, I'll walk through [the workflow](https://github.com/ropensci/terrainr/blob/main/.github/workflows/drat.yml) that uploads [terrainr](https://github.com/ropensci/terrainr) to [my own personal drat repo](https://github.com/mikemahoney218/drat). The YAML file that runs the workflow looks like this:\n\n```yaml\non:\n  push:\n    branches:\n      - 'main'\n    paths:\n      - 'DESCRIPTION'\n  workflow_dispatch:\n\njobs:\n  drat-upload:\n    runs-on: ubuntu-20.04\n    name: Drat Upload\n    steps:\n      - uses: mikemahoney218/upload-to-drat-repo@v0.1\n        with:\n          drat_repo: 'mikemahoney218/drat'\n          token: \"${{ secrets.DRAT_TOKEN }}\"\n          commit_message: \"Automated update (add terrainr)\"\n          commit_email: \"mike.mahoney.218@gmail.com\"\n```\n\nThis script has two main components to it: running the job and configuring the action itself. \n\n### Running the job\n\nAt the top of terrainr's drat workflow script is the following chunk:\n\n```yaml\non:\n  push:\n    branches:\n      - 'main'\n    paths:\n      - 'DESCRIPTION'\n  workflow_dispatch:\n```\n\nThis sets up two different ways to trigger the workflow. First off, any `push` commit to the `main` branch that touches the `DESCRIPTION` file will automatically build the package and push it to my drat repo. Because terrainr is published on CRAN and has a handful of users, I do my best to update version numbers whenever I make changes -- even during development, I try and bump development versions whenever there's a fix or update worth mentioning. \n\nSince the version number is stored in `DESCRIPTION`, this means I'll only push updated package versions when I've actually updated something in the package; my small edits to the CI files, for instance, won't create a new release.\n\nIf you want to be freer about updating your repo, you can drop any of these restrictions. For instance, our internal packages have workflow triggers that look like this:\n\n```yaml\non:\n  push:\n    branches: 'main'\n```\n\nIn this case, we push an update any time we push _any_ commit to the main branch. This can cause problems -- for instance, if we don't update version numbers then `update.packages` won't recognize that local installations are out of date -- but makes more sense for our small team and small group of users. \n\nThe second method this workflow uses to upload a new version is the `workflow_dispatch:` option, which lets me manually trigger the workflow from the GitHub UI. This is super helpful in case I accidentally mess up my drat repo, or make a small edit without changing the version number in the `DESCRIPTION`; without this line I'd have to rebuild the package on my laptop and update the drat repo from my local copy.\n\nThere's a lot of other ways you can set to trigger workflows -- [see the full list here](https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on) -- but the other one I want to highlight is that you can also set the workflow to trigger on a schedule using a crontab. This snippet for instance will release daily builds every day at 0:00 UTC:\n\n```yaml\non:\n  schedule: \n    - cron: '0 0 * * *'\n```\n\nYou can use this syntax to create incredibly complex schedules; I personally always use https://crontab.guru/ to make sure my crontabs are right when I'm trying to schedule jobs.\n\n### Configuring the action\n\nThe second half of the workflow script actually calls the action to build the package and upload it to your drat repo:\n\n```yaml\njobs:\n  drat-upload:\n    runs-on: ubuntu-20.04\n    name: Drat Upload\n    steps:\n      - uses: mikemahoney218/upload-to-drat-repo@v0.1\n        with:\n          drat_repo: 'mikemahoney218/drat'\n          token: \"${{ secrets.DRAT_TOKEN }}\"\n          commit_message: \"Automated update (add terrainr)\"\n          commit_email: \"mike.mahoney.218@gmail.com\"\n```\n\nThis will, by default, spin up an Ubuntu 20.04 runner and run v0.1 of [the upload action](https://github.com/mikemahoney218/upload-to-drat-repo/), which is the current version. This action will automatically check out the repo the workflow is called from, build and install the R package in that repo, then insert it into a drat repo.\n\nThere's a few input values for this workflow which you _must_ specify, which are under the \"with\" step:\n\n+ `drat_repo`: The GitHub repository for the drat repo you're trying to push your package to. If you don't have a drat repo yet, you can create one locally using `drat::initRepo`, and then push the created directory up to GitHub.\n+ `commit_email`: The author to write the drat repo commit as; used to set `git config user.email`. You must provide a value here.\n+ `token`: A [personal access token (PAT)](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token). The action will use this PAT to clone your package and drat repo, as well as to push your drat repo, so make sure to authorize the PAT to do so. It's a good idea to use a service account with the fewest permissions possible for this job.\n\nYou can also customize the job further with a few additional inputs:\n\n+ `commit_message`: The message to use when committing to `drat_repo`.\n+ `commit_author`: The author to write the commit as; used to set `git config user.name`.\n+ `package`: The GitHub repository for the package you want to upload. Defaults to the repository the action is running in, but this can be used to run your workflow elsewhere (for instance, if you want to have all your upload jobs scheduled in the drat repo itself).\n\nAnd for most use cases, this should be enough to automatically deploy your package whenever you desire! So far, I've tested this workflow on a handful of my own packages (terrainr and then our internal packages), and things are working well so far -- if you find any problems or have any suggestions, [feel free to open an issue on the action repo here.](https://github.com/mikemahoney218/upload-to-drat-repo/issues)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}