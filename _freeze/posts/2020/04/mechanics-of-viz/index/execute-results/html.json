{
  "hash": "1684e3ebcaacf7109f2654f7f1afce59",
  "result": {
    "markdown": "---\ntitle: \"Mechanics of Data Visualizations\"\ncategories: [\"Data Visualization\", \"Tutorials\"]\ndate: '2020-04-21'\nupdated: '2020-04-21'\ndescription: \"Part 2 in the data visualization series\"\nauthor:\n  - name: Mike Mahoney\n    url: {}\noutput:\n  distill::distill_article:\n    self_contained: false\n---\n\n\n_(Note: this is part two of a three part series on data visualization,_\n_originally published on [Towards Data Science in 2019](https://towardsdatascience.com/the-art-and-science-of-data-visualization-6f9d706d673e)._\n\nLet’s move from theoretical considerations of graphing to the actual\nbuilding blocks you have at your disposal. As we do so, we’re also going\nto move on to mantra \\#2:\n\n### Everything should be made as simple as possible – but no simpler.\n\nGraphs are inherently a 2D image of our data:\n\n![](unnamed-chunk-1-1.png)\n\nThey have an x and a y scale, and - as in our scatter plot here - the\nposition a point falls along each scale tells you how large its values\nare. But this setup only allows us to look at two variables in our data\n- and we’re frequently interested in seeing relationships between more\nthan two variables.\n\nSo the question becomes: how can we visualize those extra variables? We\ncan try adding another position scale:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"unnamed-chunk-2-1.png\")\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-2-1.png){width=100%}\n:::\n:::\n\n\nBut 3D images are hard to wrap your head around, complicated to produce,\nand not as effective in delivering your message. They do have their uses\n- particularly when you’re able to build real, physical 3D models, and\nnot just make 3D shapes on 2D planes - but frequently aren’t worth the\ntrouble.\n\nSo what tools do we have in our toolbox? The ones that are generally\nagreed upon (no, really - this is an area of active debate) fall into\nfour categories:\n\n  - Position (like we already have with X and Y)\n  - Color\n  - Shape\n  - Size\n\nThese are the tools we can use to encode more information into our\ngraphics. We’re going to call these *aesthetics*, but any number of\nother words could work - some people refer to them as scales, some as\nvalues. I call them aesthetics because that’s what my software of choice\ncalls them - but the word itself comes from the fact that these are the\nthings that change how your graph looks.\n\nFor what it’s worth, we’re using an EPA data set for this unit,\nrepresenting fuel economy data from 1999 and 2008 for 38 popular models\nof car. “Hwy” is highway mileage, “displ” is engine displacement (so\nvolume), and “cty” is city mileage. But frankly, our data set doesn’t\nmatter right now - most of our discussion here is applicable to any data\nset you’ll pick up.\n\nWe’re going to go through each of these aesthetics, to talk about how\nyou can encode more information in each of your graphics. Along the way,\nremember our mantras:\n\n1.  A good graphic tells a story\n2.  Everything should be made as simple as possible - but no simpler\n3.  Use the right tool for the job\n4.  Ink is cheap. Electrons are even cheaper\n\nWe’ll talk about how these are applicable throughout this section.\n\n### Position\n\nLet’s start off discussing these aesthetics by finishing up talking\nabout position. The distance of values along the x, y, or – in the case\nof our 3D graphic – z axes represents how large a particular variable\nis. People inherently understand that values further out on each axis\nare more extreme - for instance, imagine you came across the following\ngraphic (made with simulated data):\n\n![](unnamed-chunk-3-1.png)\n\nWhich values do you think are higher?\n\nMost people innately assume that the bottom-left hand corner represents\na 0 on both axes, and that the further you get from that corner the\nhigher the values are. This – relatively obvious – revelation hints at a\nmuch more important concept in data visualizations: perceptual topology\nshould match data topology. Put another way, that means that values\nwhich *feel* larger in a graph should represent values that *are* larger\nin your data. As such, when working with position, higher values should\nbe the ones further away from that lower left-hand corner – you should\nlet your viewer’s subconscious assumptions do the heavy lifting for you.\n\nApplying this advice to categorical data can get a little tricky.\nImagine that we’re looking at the average highway mileages for\nmanufacturers of the cars in our data set:\n\n![](unnamed-chunk-4-1.png)\n\nIn this case, the position along the x axis just represents a different\ncar maker, in alphabetical order. But remember, position in a graph is\nan aesthetic that we can use to encode more information in our graphics.\nAnd we aren’t doing that here – for instance, we could show the same\ninformation without using x position at all:\n\n![](unnamed-chunk-5-1.png)\n\nTry to compare Pontiac and Hyundai on the first graph, versus on this\nsecond one. If anything, removing our extraneous x aesthetic has made it\neasier to compare manufacturers. This is a big driver behind our second\nmantra – that everything should be made as simple as possible, but no\nsimpler. Having extra aesthetics confuses a graph, making it harder to\nunderstand the story it’s trying to tell.\n\nHowever, when making a graphic, we should always be aiming to make\nimportant comparisons easy. As such, we should take advantage of our x\naesthetic by arranging our manufacturers not alphabetically, but rather\nby their average highway mileage:\n![](unnamed-chunk-6-1.png)\n\nBy reordering our graphic, we’re now able to better compare more similar\nmanufacturers. It’s now dramatically faster to understand our\nvisualization – closer comparisons are easier to make, so placing more\nsimilar values closer together makes them dramatically easier to grasp.\nLook at Pontiac vs Hyundai now, for instance. Generally speaking, don’t\nput things in alphabetical order - use the order you place things to\nencode additional information.\n\nAs a quick sidenote, I personally believe that, when working with\ncategorical values along the X axis, you should reorder your values so\nthe highest value comes first. For some reason, I just find having the\ntallest bar/highest point (or whatever is being used to show value) next\nto the Y axis line is much cleaner looking than the alternative:\n\n![](unnamed-chunk-7-1.png)\n\nFor what it’s worth, I’m somewhat less dogmatic about this when the\nvalues are on the Y axis. I personally believe the highest value should\nalways be at the top, as humans expect higher values to be further from\nthat bottom left corner:\n![](unnamed-chunk-8-1.png)\n\nHowever, I’m not as instantly repulsed by the opposite ordering as I am\nwith the X axis, likely because the bottom bar/point being the furthest\nlooks like a more natural shape, and is still along the X axis line:\n![](unnamed-chunk-9-1.png)\n\nFor this, at least, your mileage may vary. Also, it’s worth pointing out\nhow much cleaner the labels on this graph are when they’re on the Y axis\n- flipping your coordinate system, like we’ve done here, is a good way\nto display data when you’ve got an unwieldy number of categories.\n\n### Color\n\nWhile we’ve done a good job covering the role position plays in\ncommunicating information, we’re still stuck on the same question we\nstarted off with: How can we show a third variable on the graph?\n\nOne of the most popular ways is to use colors to represent your third\nvariable. It might be worth talking through how color can be used with a\nsimulated data set. Take for example the following graph:\n![](unnamed-chunk-10-1.png)\n\nAnd now let’s add color for our third variable:\n![](unnamed-chunk-11-1.png)\n\nRemember: perceptual topology should match data topology. Which values\nare larger?\n\nMost people would say the darker ones. But is it always that simple?\nLet’s change our color scale to compare:\n![](unnamed-chunk-12-1.png)\n\nSure, some of these colors are darker than others – but I wouldn’t say\nany of them tell me a value is particularly high or low.\n\nThat’s because humans don’t percieve *hue* – the actual shade of a color\n– as an ordered value. The color a point is doesn’t communicate that the\npoint has a higher or lower value than any other point on the graph.\nInstead, hue works as an *unordered* value, which only tells us which\npoints belong to which groupings. In order to tell how high or low a\npoint’s value is, we instead have to use *luminescence* – or how bright\nor dark the individual point is.\n\nThere’s one other axis you can move colors along in order to encode\nvalue – how vibrant a color is, known as *chroma*:\n\n![](unnamed-chunk-13-1.png)\n\nJust keep in mind that *luminescence* and *chroma* – how light a color\nis and how vibrant it is – are *ordered values*, while *hue* (or shade\nof color) is *unordered* This becomes relevant when dealing with\ncategorical data. For instance, moving back to the scatter plot we\nstarted with:\n\n![](unnamed-chunk-14-1.png)\n\nIf we wanted to encode a categorical variable in this – for instance,\nthe class of vehicle – we could use hue to distinguish the different\ntypes of cars from one another:\n\n![](unnamed-chunk-15-1.png)\n\nIn this case, using hue to distinguish our variables clearly makes more\nsense than using either chroma or luminesence:\n\n![](unnamed-chunk-16-1.png)\n\nThis is a case of knowing what tool to use for the job - chroma and\nluminescence will clearly imply certain variables are closer together\nthan is appropriate for categorical data, while hue won’t give your\naudience any helpful information about an ordered variable. Note,\nthough, that I’d still discourage using the rainbow to distinguish\ncategories in your graphics – the colors of the rainbow aren’t exactly\nunordered values (for instance, red and orange are much more similar\ncolors than yellow and blue), and you’ll wind up implying connections\nbetween your categories that you might not want to suggest. Also, the\nrainbow is just really ugly:\n\n![](unnamed-chunk-17-1.png)\n\nSpeaking of using the right tool for the job, one of the worst things\npeople like to do in data visualizations is overuse color. Take for\ninstance the following example:\n\n![](unnamed-chunk-18-1.png)\n\nIn this graph, the variable “class” is being represented by both\nposition along the x axis, and by color. By duplicating this effort,\nwe’re making our graph harder to understand – encoding the information\nonce is enough, and doing it any more times than that is a distraction.\nRemember the second mantra: Everything should be made as simple as\npossible – but no simpler. The best data visualization is one that\nincludes all the elements needed to deliver the message, and no more.\n\nYou can feel free to use color in your graphics, so long as it adds more\ninformation to the plot - for instance, if it’s encoding a third\nvariable:\n\n![](unnamed-chunk-19-1.png)\n\nBut replicating as we did above is just adding more junk to your chart.\n\nThere’s one last way you can use color effectively in your plot, and\nthat’s to highlight points with certain characteristics:\n\n![](unnamed-chunk-20-1.png)\n\nDoing so allows the viewer to quickly pick out the most important\nsections of our graph, increasing its effectiveness. Note that I used\nshape instead of color to separate the class of vehicles, by the way –\ncombining point highlighting and using color to distinguish categorical\nvariables can work, but can also get somewhat chaotic:\n\n![](unnamed-chunk-21-1.png)\n\nThere’s one other reason color is a tricky aesthetic to get right in\nyour graphics: about 5% of the population (10% of men, 1% of women)\ncan’t see colors at all. That means you should be careful when using\nit in your visualizations – use colorblind-safe color palettes (google\n“ColorBrewer” or “viridis” for more on these), and pair it with\nanother aesthetic whenever possible.\n\n### Shape\n\nThe easiest aesthetic to pair color with is the next most frequently\nused – shape. This one is much more intuitive than color – to\ndemonstrate, let’s go back to our scatter plot:\n\n![](unnamed-chunk-22-1.png)\n\nWe can now change the shape of each point based on what class of vehicle\nit represents:\n![](unnamed-chunk-23-1.png)\n\nImagine we were doing the same exercise as we did with color earlier –\nwhich values are larger?\n\nI’ve spoiled the answer already by telling you what the shapes represent\n– none of them are inherently larger than the others. Shape, like hue,\nis an *unordered value*.\n\nThe same basic concepts apply when we change the shape of lines, not\njust points. For instance, if we plot separate trendlines for\nfront-wheel, rear-wheel, and four-wheel drive cars, we can use linetype\nto represent each type of vehicle:\n\n![](unnamed-chunk-24-1.png)\n\nBut even here, no one linetype implies a higher or lower value than the\nothers.\n\nThere are two caveats to be made to this rule, however. For instance, if\nwe go back to our original scatter plot and change which shapes we’re\nusing:\n\n![](unnamed-chunk-25-1.png)\n\nThis graph seems to imply more connection between the first three\nclasses of car (which are all different types of diamonds) and the next\nthree classes (which are all types of triangle), while singling out\nSUVs. In this way, we’re able to use shape to imply connection between\nour groupings - more similar shapes, which differ only in angle or\ntexture, imply a closer relationship to one another than to other types\nof shape. This can be a blessing as well as a curse - if you pick, for\nexample, a square and a diamond to represent two unrelated groupings,\nyour audience might accidentally read more into the relationship than\nyou had meant to imply.\n\nIt’s also worth noting that different shapes can pretty quickly clutter\nup a graph. As a general rule of thumb, using more than 3-4 shapes on a\ngraph is a bad idea, and more than 6 means you need to do some thinking\nabout what you actually want people to take away.\n\n### Size\n\nOur last aesthetic is that of size. Going back to our original scatter\nplot, we could imagine using size like this:\n\n![](unnamed-chunk-26-1.png)\n\nSize is an inherently *ordered value* - large size points imply larger\nvalues. Specifically, humans perceive larger areas as corresponding to\nlarger values - the points which are three times larger in the above\ngraph are about three times larger in value, as well.\n\nThis becomes tricky when size is used incorrectly, either by mistake or\nto distort the data. Sometimes an analyst maps radius to the variable,\nrather than area of the point, resulting in graphs as the below:\n\n![](unnamed-chunk-27-1.png)\n\nIn this example, the points representing a cty value of 10 don’t look\nanything close to 1/3 as large as the points representing 30. This makes\nthe increase seem much steeper upon looking at this chart – so be\ncareful when working with size as an aesthetic that your software is\nusing the area of points, not radius\\!\n\nIt’s also worth noting that unlike color – which can be used to\ndistinguish groupings, as well as represent an ordered value – it’s\ngenerally a bad idea to use size for a categorical variable. For\ninstance, if we mapped point size to class of vehicle:\n\n![](unnamed-chunk-28-1.png)\n\nWe seem to be implying relationships here that don’t actually exist,\nlike a minivan and midsize vehicle being basically the same. As a\nresult, it’s best to only use size for continuous (or numeric) data.\n\n### A Tangent\n\nNow that we’ve gone over these four aesthetics, I want to go on a quick\ntangent. When it comes to how quickly and easily humans perceive each of\nthese aesthetics, research has settled on the following order:\n\n1.  Position\n2.  Size\n3.  Color (especially chroma and luminescence)\n4.  Shape\n\nAnd as we’ve discussed repeatedly, the best data visualization is one\nthat includes exactly as many elements as it takes to deliver a message,\nand no more. Everything should be made as simple as possible, but no\nsimpler.\n\nHowever, we live in a world of humans, where the scientifically most\neffective method is not always the most popular one. And since color is\ninherently more exciting than size as an aesthetic, the practitioner\noften finds themselves using colors to denote values where size would\nhave sufficed. And since we know that color should usually be used\nalongside shape in order to be more inclusive in our visualizations,\nsize often winds up being the last aesthetic used in a chart. This is\nfine - sometimes we have to optimize for other things than “how quickly\ncan someone understand my chart”, such as “how attractive does my chart\nlook” or “what does my boss want from me”. But it’s worth noting, in\ncase you see contradictory advice in the future - the disagreement comes\nfrom if your source is teaching the most scientifically sound theory, or\nthe most applicable practice.\n\n### Summary\n\nWe started off this section with our second mantra: that everything\nshould be made as simple as possible, but no simpler. The first half of\nthat cautions us against overusing aesthetics and against adding too\nmuch to a graphic, lest we erode its efficency in conveying information:\n\n![](unnamed-chunk-29-1.png)\n\nThe second half cautions us against not using all the aesthetics it\ntakes to tell our story, in case we don’t produce the most expressive\ngraphic possible:\n![](unnamed-chunk-30-1.png)\n\nInstead, we should use exactly as many aesthetics as it takes to tell\nour story, carefully choosing each to encode the most information\npossible into our graphics:\n![](unnamed-chunk-31-1.png)\n\nAs for the specific takeaways from this section, I can think of the\nfollowing:\n\n  - Match perceptual and data topology – if a color or position *feels\n    like a higher value*, use it to represent data that is a higher\n    value\n  - Make important comparisons easy – place them near each other, call\n    attention to them\n  - Use aesthetics to encode more information into your graphics\n      - Use exactly as many aesthetics as you need – no more, no less.\n  - Don’t place things in alphabetical order\n  - Don’t use the rainbow for a color scheme\n  - Use ordered aesthetics (like position, chroma, luminescence, and\n    size) to show ordered values (like numeric data)\n  - Use unordered aesthetics (like hue or shape) to show unordered\n    values\n\nLet’s transition away from aesthetics, and towards our third mantra:\n\n### Use the right tool for the job.\n\nThink back to our first chart:\n\n![](unnamed-chunk-32-1.png)\n\nAs you already know, this is a *scatter plot* - also known as a *point\ngraph*. Now say we added a line of best fit to it:\n\n![](unnamed-chunk-33-1.png)\n\nThis didn’t stop being a scatter plot once we drew a line on it – but\nthe term scatter plot no longer really encompasses everything that’s\ngoing on here. It’s also obviously not a line chart, as even though\nthere’s a line on it, it also has points.\n\nRather than quibble about what type of chart this is, it’s more helpful\nto describe what tools we’ve used to depict our data. We refer to these\nas *geoms*, short for *geometries* – because when you get really deep\ninto things, these are geometric representations of how your data set is\ndistributed along the x and y axes of your graph. I don’t want to get\ntoo far down that road – I just want to explain the vocabulary so that\nwe aren’t talking about *what type of chart* that is, but rather *what\ngeoms it uses*. Framing things that way makes it easier to understand\nhow things can be combined and reformatted, rather than assuming each\ntype of chart can only do one thing.\n\n### Two continuous variables\n\nThis chart uses two geoms that are really good for graphs that have a\ncontinuous y and a continuous x - points and lines. This is what people\nrefer to most of the time when they say a line graph - a single smooth\ntrendline that shows a pattern in the data. However, a line graph can\nalso mean a chart where each point is connected in turn:\n\n![](unnamed-chunk-34-1.png)\n\nIt’s important to be clear about which type of chart you’re expected to\nproduce\\! I always refer to the prior as a trendline, for clarity.\n\nThese types of charts have enormous value for quick exploratory\ngraphics, showing how various combinations of variables interact with\none another. For instance, many analysts start familiarizing themselves\nwith new data sets using correlation matrices (also known as scatter\nplot matrices), which create a grid of scatter plots representing each\nvariable:\n\n![](unnamed-chunk-35-1.png)\n\nIn this format, understanding interactions between your data is quick\nand easy, with certain variable interactions obviously jumping out as\npromising avenues for further exploration.\n\nTo back up just a little, there’s one major failing of scatter plots\nthat I want to highlight before moving on. If you happen to have more\nthan one point with the same x and y values, a scatter plot will just\ndraw each point over the previous, making it seem like you have less\ndata than you actually do. Adding a little bit of random noise - for\ninstance, using RAND() in Excel - to your values can help show the\nactual densities of your data, especially when you’re dealing with\nnumbers that haven’t been measured as precisely as they could a have\nbeen.\n![](unnamed-chunk-36-1.png)\n\nOne last chart that does well with two continuous variables is the area\nchart, which resembles a line chart but fills in the area beneath the\nline:\n![](unnamed-chunk-37-1.png)\n\nArea plots make sense when 0 is a relevant number to your data set –\nthat is, a 0 value wouldn’t be particularly unexpected. They’re also\nfrequently used when you have multiple groupings and care about their\ntotal sum:\n\n![](unnamed-chunk-38-1.png)\n\n(This new data set is the “diamonds” data set, representing 54,000\ndiamonds sizes, qualities, cut, and sale prices. We’ll be going back and\nforth using it and the EPA data set from now on.)\n\nNow one drawback of stacked area charts is that it can be very hard to\nestimate how any individual grouping shifts along the x axis, due to the\ncumulative effects of all the groups underneath them. For instance,\nthere are actually fewer “fair” diamonds at 0.25 carats than at 1.0 –\nbut because “ideal” and “premium” spike so much, your audience might\ndraw the wrong conclusions. In situations where the total matters more\nthan the groupings, this is alright – but otherwise, it’s worth looking\nat other types of charts as a result.\n\n### One continuous variable\n\nIf instead you’re looking to see how a single continuous variable is\ndistributed throughout your data set, one of the best tools at your\ndisposal is the histogram. A histogram shows you how many observations\nin your data set fall into a certain range of a continuous variable, and\nplot that count as a bar plot:\n\n![](unnamed-chunk-39-1.png)\n\nOne important flag to raise with histograms is that you need to pay\nattention to how your data is being binned. If you haven’t picked the\nright width for your bins, you might risk missing peaks and valleys in\nyour data set, and might misunderstand how your data is distributed –\nfor instance, look what shifts if we graph 500 bins, instead of the 30\nwe used above:\n![](unnamed-chunk-40-1.png)\n\nAn alternative to the histogram is the frequency plot, which uses a line\nchart in the place of bars to represent the frequency of a value in your\ndata set:\n![](unnamed-chunk-41-1.png)\n\nAgain, however, you have to pay attention to how wide your data bins are\nwith these charts – you might accidentally smooth over major patterns in\nyour data if you aren’t careful\\!\n![](unnamed-chunk-42-1.png)\n\nOne large advantage of the frequency chart over the histogram is how it\ndeals with multiple groupings – if your groupings trade dominance at\ndifferent levels of your variable, the frequency graph will make it much\nmore obvious how they shift than a histogram will.\n\n(Note that I’ve done something weird to the data in order to show how\nthe distributions change below.)\n![](unnamed-chunk-43-1.png)\n\n### One categorical variable, one continuous\n\nIf you want to compare a categorical and continuous variable, you’re\nusually stuck with some form of bar chart:\n\n![](unnamed-chunk-44-1.png)\n\nThe bar chart is possibly the least exciting type of graph in existence,\nmostly because of how prevalent it is – but that’s because it’s really\ngood at what it does. Bar charts are one of the most easily interpreted\nand effective types of visualizations, no matter how exciting they are.\n\nHowever, some people are really intent on ruining that. Take, for\ninstance, the stacked bar chart, often used to add a third variable to\nthe mix:\n\n![](unnamed-chunk-45-1.png)\n\nCompare Fair/G to Premium/G. It’s next to impossible to accurately\ncompare the boxes – they don’t share a top or a bottom line, so you\ncan’t really make a comparison. In these situations, it’s a better\nidea to use a dodged bar chart instead:\n\n![](unnamed-chunk-46-1.png)\n\nDodged bar charts are usually a better choice for comparing the actual\nnumbers of different groupings. However, this chart does a good job\nshowing one of the limitations dodged bar charts come up against – once\nyou get past 4 or 5 groupings, making comparisons is tricky. In these\ncases, you’re probably trying to apply the wrong chart for the job, and\nshould consider either breaking your chart up into smaller ones –\nremember, ink is cheap, and electrons or cheaper – or replacing your\nbars with a few lines.\n\nThe one place where stacked bar charts are appropriate, however, is when\nyou’re comparing the relative proportions of two different groups in\neach bar. For instance, take the following graph:\n\n![](unnamed-chunk-47-1.png)\n\nIn this case, making comparisons across groups is trivial, made simple\nby the fact that the groupings all share a common line - at 100% for\ngroup 1, and at 0% for group 2. This point of reference solves the issue\nwe had with more than two groupings – though note we’d still prefer a\ndodged bar chart if the bars didn’t always sum to the same amount.\n\n#### A Quick Tangent\n\nThis is usually where most people will go on a super long rant about pie\ncharts and how bad they are. They’re wrong, but in an understandable\nway.\n\nPeople love to hate on pie charts, because they’re almost universally a\nbad chart. However, if it’s important for your viewer to be able to\nquickly figure out what proportion two or more groupings make up of the\nwhole, a pie chart is actually the fastest and most effective way to get\nthe point across. For instance, compare the following pie and bar\ncharts, made with the same data set:\n![](unnamed-chunk-48-1.png)\n\n![](unnamed-chunk-49-1.png)\n\nIt’s a lot easier to tell that, say, A is smaller than C through F in\nthe pie chart than the bar plot, since humans are better at summing\nangles than areas. In these instances, feel free to use a pie chart –\nand to tell anyone giving you flack that I said it was OK.\n\n### Two categorical variables\n\nOur last combination is when you’re looking to have a categorical\nvariable on both the x and y axis. These are trickier plots to think\nabout, as we no longer encode value in position based on how far away a\npoint is from the lower left hand corner, but rather have to get\ncreative in effectively using position to encode a value. Remember that\na geom is a geometric representation of how your data set is distributed\nalong the x and y axes of your graph. When both of your axes are\ncategorical, you have to get creative to show that distribution.\n\nOne method is to use density, as we would in a scatter plot, to show how\nmany datapoints you have falling into each combination of categories\ngraphed. You can do this by making a “point cloud” chart, where more\ndense clouds represent more common combinations:\n![](unnamed-chunk-50-1.png)\n\nEven without a single number on this chart, its message is clear - we\ncan tell how our diamonds are distributed with a single glance. A\nsimilar way to do this is to use a heatmap, where differently colored\ncells represent a range of values:\n\n![](unnamed-chunk-51-1.png)\n\nI personally think heatmaps are less effective – partially because by\nusing the color aesthetic to encode this value, you can’t use it for\nanything else – but they’re often easier to make with the resources at\nhand.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}